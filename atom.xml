<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神经漫游者</title>
  <icon>https://www.gravatar.com/avatar/6caa9034bb44f76c5c3cbb52bd3130ef</icon>
  <subtitle>本来对博客持有一种如果别人写过那么再写就没有意义的想法，想看的时候看别人的写好的文章不就好了吗？最近明白了，写博客也是一种学习，哪怕与人雷同哪怕千篇一律，只要自己动手，有所收获就不亏。如果还能帮到其他小伙伴，那就更好。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//aha.me/"/>
  <updated>2020-08-31T15:22:21.703Z</updated>
  <id>//aha.me/</id>
  
  <author>
    <name>Kaleldo</name>
    <email>1158809285@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据链路层</title>
    <link href="//aha.me/2020/08/31/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>//aha.me/2020/08/31/数据链路层/</id>
    <published>2020-08-31T14:56:18.000Z</published>
    <updated>2020-08-31T15:22:21.703Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>概念：在物理层提供比特传输服务的基础上，在通信的实体之间建立数据链路连接。传送以帧为单位的数据，采用差错控制、流量控制方法、使有差错的物理线路变成无差错的数据链路。</p></blockquote><a id="more"></a><h2 id="从哪读，读到哪-帧"><a href="#从哪读，读到哪-帧" class="headerlink" title="从哪读，读到哪 -  帧"></a>从哪读，读到哪 -  帧</h2><h3 id="相关协议"><a href="#相关协议" class="headerlink" title="相关协议"></a>相关协议</h3><ol><li><strong>高级数据链路控制协议</strong><br>当遇到连续 6 个 1 ，即 01111110 标志字段时，就作为开始读取的地方。结尾也需要一个标志字段。该过程也是 封装帧 的过程。这样看起来就像只有头尾的标志字段，夹着中间 透明数据 的帧在传输。<br>:<img src="https://img-blog.csdnimg.cn/2020083123031623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>问题</strong> 如果遇到相同数字是否代表结束或者开始呢?<br><img src="https://img-blog.csdnimg.cn/20200831230507652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>发送端不仅需要在数据前后添加标志字段，还需要对数据进行检查。如果有连续 6 个 1 出现，即 01111110，那就在第 7 位插入一个 0。接收端在解析的时候，如果发现连续 5 个 1，即 011111，就需要判断第 7 位是否为 0。如果是 0，则将 0 删除；如果是 1 并且第 8 位是 0，则认为是标志字段</li></ol><p>具体结构如下:</p><p><img src="https://img-blog.csdnimg.cn/20200831230712120.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><ol><li>标志字段（8bit）：二进制 01111110。</li><li>地址字段（8bit）：通信对方的地址。</li><li>控制字段（8bit）：用于区分帧的类型（数据帧、监控帧、无编号帧）</li><li>信息字段（可变）：数据</li><li>帧校验序列（16bit）：校验码。对地址字段、控制字段、信息字段进行 循环冗余校验。</li></ol></blockquote><ol start="2"><li><strong>点对点协议</strong><br>为在点对点连接上传输多协议数据包提供了一个标准方法<br><strong>结构如下:</strong><br><img src="https://img-blog.csdnimg.cn/20200831231141578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><ul><li>标志字段-F（1 字节）：二进制 01111110。</li><li>地址字段-A（1 字节）：一般是二进制 11111111，也是广播地址。因为是点对点，是可- 以知道对方地址的。</li><li>控制字段-C（1 字节）：默认为二进制 00000011，表示这是一个无序号帧。</li><li>协议字段（2 字节）：规定包含的数据按哪些协议解析。</li><li>信息字段-信息部分（可变）：包含被上层协议封装的数据，不超过 1500 字节。</li><li>帧校验序列字段-FCS（2 字节）：循环冗余校验码。</li></ul><ol start="3"><li><strong>以太网协议</strong></li></ol><ul><li>在发送数据之前，必须有一个静默期，即电压为 0，维持 96bit。用于区分上一帧和下一帧。</li><li>紧接着周期交替二进制 1 和 0，维持 56bit。可以用来同步时钟。</li><li>紧接着是二进制 10101011 的标志位。最后 11 就是通知对方，后面都是数据了。<br><img src="https://img-blog.csdnimg.cn/20200831231553843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>进行传输</strong><br>发送以太网帧，将主机 A 的 物理地址 填入 源地址 中。如果是发送到主机 C，则将主机 C 的 物理地址 填入 目标地址。如果是发送到以太网所有主机，则将广播地址 （十六进制 ff:ff:ff:ff:ff:ff） 填入 目标地址。（数据链路层）<br><img src="https://img-blog.csdnimg.cn/20200831231943780.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200831232026427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul><blockquote><p>物理地址 也叫 MAC 地址。MAC 地址 的长度为 48 bit(6 字节)，通常表示为 12 个 十六进制数，如：00-16-EA-AE-3C-40。其中前 6 位十六进制数 00-16-EA 代表网络硬件制造商的编号，它由 IEEE(电气与电子工程师协会)分配，而后 6 位十六进制数 AE-3C-40 代表该制造商所制造的某个网络产品(如网卡)的系列号。只要不更改自己的 MAC 地址，MAC 地址在世界是惟一的。形象地说，MAC 地址就如同身份证上的身份证号码，具有唯一性。<br><strong>结构</strong><br><img src="https://img-blog.csdnimg.cn/20200831232113743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><ul><li>前同步码（7 字节）：交替出现的 0 和 1，作用是提醒接受端有数据帧到来，并且可以- - - 调整自身的时钟频率，前同步码属于物理层添加。</li><li>帧首定界符（1 字节）：二进制 10101011。最后的 11 是提醒接收端，信息要来了。</li><li>目标地址（6 字节）：接收方的物理地址（MAC 地址）。</li><li>源地址（6 字节）：发送方的物理地址（MAC 地址）。</li><li>长度或类型（2 字节）：规定包含的数据按哪些协议解析。</li><li>数据（可变）：包含被上层协议封装的数据，最小长度 46 字节，最大长度 1500 字节。</li><li>帧校验序列字段-CRC（4 字节）：循环冗余码校验值</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;概念：在物理层提供比特传输服务的基础上，在通信的实体之间建立数据链路连接。传送以帧为单位的数据，采用差错控制、流量控制方法、使有差错的物理线路变成无差错的数据链路。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据链路层" scheme="//aha.me/categories/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    
    
      <category term="网络基础" scheme="//aha.me/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>网络层</title>
    <link href="//aha.me/2020/08/31/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>//aha.me/2020/08/31/网络层/</id>
    <published>2020-08-31T14:19:01.000Z</published>
    <updated>2020-08-31T14:52:47.355Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>物理层的主要功能是利用物理传输介质为数据链路层提供物理连接，以便透明传送比特流。<br><img src="https://img-blog.csdnimg.cn/20200831222611264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><a id="more"></a><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p><strong>问题1</strong>： 两台电脑如何通信？你可能会想到用网线，把网线拨开是几条铜导线。那这几条铜导线又是怎么传输信息的呢？如果给你几根铜导线，你如何设计信息传输的方式？<br><strong>回答：</strong> 可以在铜线两端加上电压。 比如：0 伏维持 1 秒 → 5 伏维持 1 秒 → 0 伏 维持 2 秒 → 5 伏维持 1 秒 → 0 伏 维持 1 秒 → 5 伏 维持 2 秒。这样可以得到下图：</p><p><img src="https://img-blog.csdnimg.cn/2020083122263923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>图示解读: 低电压 0V 的时候就代表数字 0，高电压 5V 的时候就代表数字 1。 这样就能得出<br>01001011，如果这是二进制，那转化为十进制就是 75<br><img src="https://img-blog.csdnimg.cn/20200831223623507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><p><strong>问题2</strong>： 现在我们可以传输数字了，那又如何传输字母、符号、文字呢？<br><strong>回答：</strong> 数字与字母、符号、文字做一种联系。例如：ASCLL 码表。二进制 01001011 → 十进制 75 → ASCLL 码表的 K 字母。反过来的流程就是：字母通过码表 → 数字 → 二进制 → 电信号<br><img src="https://img-blog.csdnimg.cn/20200831223740719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>1.码元：承载信息量的基本信号单位。例如：一次 0V 或者一次 5V。 比特（bit）：计算机专业术语，二进制数字中的位。例如：01001011为 8bit。 </p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200831225124511.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>2.比特率：每秒传送的 比特 数，其单位为 bps。<br> 3.波特（Baud）：波特率 的单位。波特 本身已是速率<br> 4.波特率：每秒传送多少个 码元，其单位为 波特 。<br>  注意：比特 和 波特 是完全不同的概念，比特率 不是波特率，但有时候 比特率 等于 波特率。例如：0.1 秒传送一次 0V 或者 5V。如果 0V 代表 0 、5V 代表 1，则 比特率 为10bps，波特率 为 10Baud。如果如果 0V 代表 01、5V 代表 10，则 比特率 为 20bps，波特率 为 10Baud。</p></blockquote><h2 id="怎么样保证发送间隔"><a href="#怎么样保证发送间隔" class="headerlink" title="怎么样保证发送间隔"></a>怎么样保证发送间隔</h2><ol><li><strong>时钟脉冲</strong><br><img src="https://img-blog.csdnimg.cn/20200831224133320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>问题3</strong>接下来有个疑问，上图中所表示的二进制是多少<br><strong>回答</strong>： 因为图上缺少时间概念，所以无法得知这 5V 到底维持了多长时间，也无法得出结果。</li></ol><blockquote><p>既然缺少，那么我们就引入时间概念。传输数据的过程中，也传输一条 时钟脉冲。当出现连续多个 0V 或者 5V，也能判断其二进制数量了。时钟脉冲 是一个按一定电压幅度，一定时间间隔连续发出的脉冲信号。如下图，一个单位时间内完成 0 和 1 之间的转换<br><img src="https://img-blog.csdnimg.cn/20200831224257336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><ol start="2"><li><strong>缺陷-时钟偏移.</strong><blockquote><p>通过发送一条 数据信号 和一条 时钟脉冲 来完成信息的传递。由于每条线在电阻、长短等物理介质和环境因素存在差异，于是就存在数据发送的快慢。导致时钟偏移，最后就是读取的结果出错。<br>如:10M Baud，意味着 100 纳秒 传输 1 码元。意味着 数据信号 和 时钟脉冲 的时间差不能超过 100 纳秒。传输速率越快，对时间差的要求就越苛刻。</p></blockquote></li></ol><p><img src="https://img-blog.csdnimg.cn/20200831224620710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>原本是 01000010 的二进制数据，现在变成了 1000010。如果是在传输速率为 10M Baud 或者更快的网线中，时钟同步就更困难。</p><ol start="3"><li><strong>解决方案-曼彻斯特编码</strong></li></ol><blockquote><p>不再是利用数据和时钟脉冲两条信号，而是将数据和时钟脉冲整合到一条信号中。数据解读方式：根据电压变化来识别成信号。如下图：从高电压到低电压是 0，从低电压到高电压是 1。<br><img src="https://img-blog.csdnimg.cn/2020083122490688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>从上图也可以看出，连续的 0 或 1 都能很好表达了。两个码元之间必定有电压跳变，可以方便地利用它作为同步时钟。<br>2个 码元 为一个 比特，可以把两 码元 当作一个整体，其前后边缘的电压变化是不算的。其实了解了 曼彻斯特编码 的解码过程，就比较清楚</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;物理层的主要功能是利用物理传输介质为数据链路层提供物理连接，以便透明传送比特流。&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200831222611264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="网络层" scheme="//aha.me/categories/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    
    
      <category term="网络基础" scheme="//aha.me/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java将秒值转换为日期格式，或转为日时分秒</title>
    <link href="//aha.me/2020/06/08/java%E5%B0%86%E7%A7%92%E5%80%BC%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%EF%BC%8C%E6%88%96%E8%BD%AC%E4%B8%BA%E6%97%A5%E6%97%B6%E5%88%86%E7%A7%92/"/>
    <id>//aha.me/2020/06/08/java将秒值转换为日期格式，或转为日时分秒/</id>
    <published>2020-06-08T09:27:25.000Z</published>
    <updated>2020-08-31T14:08:57.914Z</updated>
    
    <content type="html"><![CDATA[<p>最近对接直播项目,返回的在线观看人数和详细信息,但是时间是以秒为单位的,简直致命.<br>所以这里记录先解决方法</p><a id="more"></a><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> testPak;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.<span class="built_in">text</span>.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将秒转换为时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class SecondsTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> secondTest()&#123;</span><br><span class="line">        <span class="comment">//秒</span></span><br><span class="line">        <span class="keyword">long</span> <span class="built_in">second</span> = <span class="number">1509412775</span>l;</span><br><span class="line">        <span class="comment">//转换为日时分秒</span></span><br><span class="line">        <span class="keyword">String</span> days = secondToTime(<span class="built_in">second</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(days);</span><br><span class="line">        <span class="comment">//转换为所需日期格式</span></span><br><span class="line">        <span class="keyword">String</span> dateString = secondToDate(<span class="built_in">second</span>,<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(dateString);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒转换为指定格式的日期</span></span><br><span class="line"><span class="comment">     * @param second</span></span><br><span class="line"><span class="comment">     * @param patten</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> secondToDate(<span class="keyword">long</span> <span class="built_in">second</span>,<span class="keyword">String</span> patten) &#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTimeInMillis(<span class="built_in">second</span> * <span class="number">1000</span>);<span class="comment">//转换为毫秒</span></span><br><span class="line">        Date date = calendar.getTime();</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(patten);</span><br><span class="line">        <span class="keyword">String</span> dateString = format.format(date);</span><br><span class="line">        <span class="keyword">return</span> dateString;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回日时分秒</span></span><br><span class="line"><span class="comment">     * @param second</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> secondToTime(<span class="keyword">long</span> <span class="built_in">second</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> days = <span class="built_in">second</span> / <span class="number">86400</span>;<span class="comment">//转换天数</span></span><br><span class="line">        <span class="built_in">second</span> = <span class="built_in">second</span> % <span class="number">86400</span>;<span class="comment">//剩余秒数</span></span><br><span class="line">        <span class="keyword">long</span> hours = <span class="built_in">second</span> / <span class="number">3600</span>;<span class="comment">//转换小时数</span></span><br><span class="line">        <span class="built_in">second</span> = <span class="built_in">second</span> % <span class="number">3600</span>;<span class="comment">//剩余秒数</span></span><br><span class="line">        <span class="keyword">long</span> minutes = <span class="built_in">second</span> / <span class="number">60</span>;<span class="comment">//转换分钟</span></span><br><span class="line">        <span class="built_in">second</span> = <span class="built_in">second</span> % <span class="number">60</span>;<span class="comment">//剩余秒数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &lt; days)&#123;</span><br><span class="line">            <span class="keyword">return</span> days + <span class="string">"天，"</span>+hours+<span class="string">"小时，"</span>+minutes+<span class="string">"分，"</span>+<span class="built_in">second</span>+<span class="string">"秒"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> hours+<span class="string">"小时，"</span>+minutes+<span class="string">"分，"</span>+<span class="built_in">second</span>+<span class="string">"秒"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近对接直播项目,返回的在线观看人数和详细信息,但是时间是以秒为单位的,简直致命.&lt;br&gt;所以这里记录先解决方法&lt;/p&gt;
    
    </summary>
    
      <category term="项目小结" scheme="//aha.me/categories/%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="项目总结" scheme="//aha.me/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>docker常用脚本</title>
    <link href="//aha.me/2020/06/01/docker%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    <id>//aha.me/2020/06/01/docker常用脚本/</id>
    <published>2020-06-01T02:49:30.000Z</published>
    <updated>2020-08-31T14:08:57.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reids"><a href="#Reids" class="headerlink" title="Reids"></a>Reids</h2><a id="more"></a><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line">    <span class="meta">#reids容器</span></span><br><span class="line"><span class="symbol">  redis:</span></span><br><span class="line">    <span class="meta">#使用的镜像</span></span><br><span class="line"><span class="symbol">    image:</span> webcenter/activemq</span><br><span class="line">    <span class="meta">#无论退出状态是如何，都重启容器</span></span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line"><span class="symbol">    container_name:</span> cloud-redis</span><br><span class="line">    <span class="meta">#容器的映射端口</span></span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">8379</span>:<span class="number">6379</span></span><br><span class="line">    <span class="meta">#定义挂载点</span></span><br><span class="line">    <span class="meta">#环境变量</span></span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line">      - requirepass=root</span><br><span class="line"></span><br><span class="line"><span class="meta">##有密码</span></span><br><span class="line">docker run -d --name cloud-redis -p <span class="number">8379</span>:<span class="number">6379</span> redis --requirepass <span class="string">"kaleldo123456"</span></span><br><span class="line"></span><br><span class="line">docker run -d --name redis -p <span class="number">6379</span>:<span class="number">6379</span> redis</span><br></pre></td></tr></table></figure><h2 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it <span class="number">775</span>c7c9ee1e1 <span class="meta-keyword">/bin/</span>bash</span><br><span class="line"></span><br><span class="line">docker run -it -v  <span class="meta-keyword">/c/</span>Users<span class="meta-keyword">/aaa/</span>bbb<span class="meta-keyword">/docker/</span>tomcat/webapps:<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/tomcat/</span>webapps -p <span class="number">8280</span>:<span class="number">80</span> -p <span class="number">8288</span>:<span class="number">8080</span> tomcat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="symbol">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line">  tomcat-web:</span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line"><span class="symbol">    image:</span> tomcat</span><br><span class="line"><span class="symbol">    container_name:</span> tomcat-web</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">8280</span>:<span class="number">80</span></span><br><span class="line">      - <span class="number">8288</span>:<span class="number">8080</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="meta-keyword">/home/</span>vsftpd<span class="meta-keyword">/leo/</span>docker/tomcat-web:<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/tomcat/</span>webapps </span><br><span class="line">  tomcat-backend:</span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line"><span class="symbol">    image:</span> tomcat</span><br><span class="line"><span class="symbol">    container_name:</span> tomcat-backend</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">8180</span>:<span class="number">80</span></span><br><span class="line">      - <span class="number">8188</span>:<span class="number">8080</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="meta-keyword">/home/</span>vsftpd<span class="meta-keyword">/leo/</span>docker/tomcat-backend:<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/tomcat/</span>webapps</span><br></pre></td></tr></table></figure><h2 id="Java相关配置及推送"><a href="#Java相关配置及推送" class="headerlink" title="Java相关配置及推送"></a>Java相关配置及推送</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -it -v  /home/vsftpd/leo:/leo -p 8883:8080 -p 3330:3030 -p 3300:3000 -p 9990:9090 -p 8887:8087 ubuntu bash</span><br><span class="line">apt-<span class="builtin-name">get</span> install vim</span><br><span class="line">apt-<span class="builtin-name">get</span> update</span><br><span class="line">apt-<span class="builtin-name">get</span> install wget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jdk配置 加入环境</span><br><span class="line">1.vim ~/.bashrc</span><br><span class="line">2.source ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/java/jdk</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JRE_HOME</span>=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$&#123;JAVA_HOME&#125;/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=.:$&#123;JAVA_HOME&#125;/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">tomcat配置</span><br><span class="line">2.tomcat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">启动 ./startup.sh </span><br><span class="line">关闭 ./shutdown.sh</span><br><span class="line">1.vim startup.sh</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/java/jdk</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JRE_HOME</span>=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$&#123;JAVA_HOME&#125;/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=.:$&#123;JAVA_HOME&#125;/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">TOMCAT_HOME</span>=/usr/tomcat/tomcat8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.vim shutdown.sh</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/java/jdk</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JRE_HOME</span>=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$&#123;JAVA_HOME&#125;/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=.:$&#123;JAVA_HOME&#125;/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">/usr/tomcat/tomcat8/bin/startup.sh</span><br><span class="line"></span><br><span class="line">docker推送</span><br><span class="line">将镜像改为自己的</span><br><span class="line">docker tag yapi:v1 号码/v1</span><br><span class="line">推送</span><br><span class="line">docker push 号码/v1</span><br></pre></td></tr></table></figure><h2 id="ELK-配置"><a href="#ELK-配置" class="headerlink" title="ELK 配置"></a>ELK 配置</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  elasticsearch:</span></span><br><span class="line"><span class="symbol">    image:</span> elasticsearch:<span class="number">6.4</span><span class="number">.1</span></span><br><span class="line"><span class="symbol">    container_name:</span> elasticsearch</span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line">      - <span class="string">"cluster.name=elasticsearch"</span> <span class="meta">#集群名称为elasticsearch</span></span><br><span class="line">      - <span class="string">"discovery.type=single-node"</span> <span class="meta">#单节点启动</span></span><br><span class="line">      - <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span> <span class="meta">#jvm内存分配为512MB</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="meta-keyword">/home/</span>vsftpd<span class="meta-keyword">/leo/</span>elk<span class="meta-keyword">/febs/</span>elasticsearch/plugins:<span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/elasticsearch/</span>plugins</span><br><span class="line">      - <span class="meta-keyword">/home/</span>vsftpd<span class="meta-keyword">/leo/</span>elk<span class="meta-keyword">/febs/</span>elasticsearch/data:<span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/elasticsearch/</span>data</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">9200</span>:<span class="number">9200</span></span><br><span class="line"><span class="symbol">  kibana:</span></span><br><span class="line"><span class="symbol">    image:</span> kibana:<span class="number">6.4</span><span class="number">.1</span></span><br><span class="line"><span class="symbol">    container_name:</span> kibana</span><br><span class="line"><span class="symbol">    links:</span></span><br><span class="line">      - elasticsearch:es <span class="meta">#配置elasticsearch域名为es</span></span><br><span class="line"><span class="symbol">    depends_on:</span></span><br><span class="line">      - elasticsearch</span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line">      - <span class="string">"elasticsearch.hosts=http://es:9200"</span> <span class="meta">#因为上面配置了域名，所以这里可以简写为http:<span class="comment">//es:9200</span></span></span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">5601</span>:<span class="number">5601</span></span><br><span class="line"><span class="symbol">  logstash:</span></span><br><span class="line"><span class="symbol">    image:</span> logstash:<span class="number">6.4</span><span class="number">.1</span></span><br><span class="line"><span class="symbol">    container_name:</span> logstash</span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="meta-keyword">/home/</span>vsftpd<span class="meta-keyword">/leo/</span>elk<span class="meta-keyword">/febs/</span>logstash/logstash-febs.conf:<span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/logstash/</span>pipeline/logstash.conf</span><br><span class="line"><span class="symbol">    depends_on:</span></span><br><span class="line">      - elasticsearch</span><br><span class="line"><span class="symbol">    links:</span></span><br><span class="line">      - elasticsearch:es</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">4560</span>:<span class="number">4560</span></span><br></pre></td></tr></table></figure><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line">    <span class="meta">#nexus容器</span></span><br><span class="line"><span class="symbol">  nexus:</span></span><br><span class="line">    <span class="meta">#使用的镜像</span></span><br><span class="line"><span class="symbol">    image:</span> sonatype/nexus3</span><br><span class="line"><span class="symbol">    container_name:</span> maven</span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line">    <span class="meta">#容器的映射端口</span></span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">8881</span>:<span class="number">8081</span></span><br><span class="line">    <span class="meta">#定义挂载点</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="meta-keyword">/home/</span>vsftpd<span class="meta-keyword">/leo/</span>maven/data:<span class="meta-keyword">/var/</span>nexus-data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d -p <span class="number">8081</span>:<span class="number">8081</span> --name nexus -v <span class="meta-keyword">/home/</span>docker<span class="meta-keyword">/maven/</span>data:<span class="meta-keyword">/var/</span>nexus-data --restart=always sonatype/nexus3</span><br></pre></td></tr></table></figure><h2 id="Activemq"><a href="#Activemq" class="headerlink" title="Activemq"></a>Activemq</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line">    <span class="meta">#activemq容器</span></span><br><span class="line"><span class="symbol">  myactivemq:</span></span><br><span class="line">    <span class="meta">#使用的镜像</span></span><br><span class="line"><span class="symbol">    image:</span> webcenter/activemq</span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line">    <span class="meta">#容器的映射端口</span></span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">61613</span>:<span class="number">61613</span></span><br><span class="line">      - <span class="number">61616</span>:<span class="number">61616</span></span><br><span class="line">      - <span class="number">8161</span>:<span class="number">8161</span></span><br><span class="line">    <span class="meta">#定义挂载点</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="meta-keyword">/home/</span>vsftpd<span class="meta-keyword">/leo/</span>data:<span class="meta-keyword">/data/</span>activemq</span><br><span class="line">      - <span class="meta-keyword">/home/</span>vsftpd<span class="meta-keyword">/leo/</span>var<span class="meta-keyword">/log/</span>activemq:<span class="meta-keyword">/var/</span>log/activemq</span><br><span class="line">    <span class="meta">#环境变量</span></span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line">      - ACTIVEMQ_ADMIN_LOGIN=admin</span><br><span class="line">      - ACTIVEMQ_ADMIN_PASSWORD=admin</span><br><span class="line">      - ACTIVEMQ_CONFIG_MINMEMORY=<span class="number">512</span></span><br><span class="line">      - ACTIVEMQ_CONFIG_MAXMEMORY=<span class="number">2048</span></span><br><span class="line">      - TZ=Asia/Shanghai</span><br></pre></td></tr></table></figure><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d --name mysql -p 330601:3306 -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=123456 mysql:5.7.25</span><br></pre></td></tr></table></figure><h2 id="Rocketmq"><a href="#Rocketmq" class="headerlink" title="Rocketmq"></a>Rocketmq</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  namesrv-m:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">foxiswho/rocketmq:server-4.4.0</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9876</span><span class="string">:9876</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/rocketmq/namesrv/master/logs:/opt/logs"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/rocketmq/namesrv/master/store:/opt/store"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      JAVA_OPT_EXT:</span> <span class="string">"-server -Xms300m -Xmx300m -Xmn150m"</span></span><br><span class="line"><span class="attr">  namesrv-s:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">foxiswho/rocketmq:server-4.4.0</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9877</span><span class="string">:9876</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/rocketmq/namesrv/slave/logs:/opt/logs"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/rocketmq/namesrv/slave/store:/opt/store"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      JAVA_OPT_EXT:</span> <span class="string">"-server -Xms300m -Xmx300m -Xmn150m"</span></span><br><span class="line"><span class="attr">  broker-a-m:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">foxiswho/rocketmq:broker-4.4.0</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">10909</span><span class="string">:10909</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">10911</span><span class="string">:10911</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/rocketmq/broker/a-m/logs:/opt/logs"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/rocketmq/broker/a-m/store:/opt/store"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/rocketmq/broker/a-m/conf/broker-a.conf:/etc/rocketmq/broker.conf"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">mqbroker</span> <span class="bullet">-c</span> <span class="string">/etc/rocketmq/broker.conf</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - namesrv-m:</span><span class="string">namesrv-m</span></span><br><span class="line"><span class="attr">      - namesrv-s:</span><span class="string">namesrv-s</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      JAVA_OPTS:</span> <span class="string">" -Duser.home=/opt"</span></span><br><span class="line">      <span class="comment">#见rocketmq jvm内存默认配置 (jvm重复参数：后面生效，会覆盖)</span></span><br><span class="line"><span class="attr">      JAVA_OPT_EXT:</span> <span class="string">"-server -Xms300m -Xmx300m -Xmn150m"</span></span><br><span class="line"><span class="attr">  broker-a-s:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">foxiswho/rocketmq:broker-4.4.0</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">10916</span><span class="string">:10909</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">10915</span><span class="string">:10915</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/rocketmq/broker/a-s/logs:/opt/logs"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/rocketmq/broker/a-s/store:/opt/store"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/rocketmq/broker/a-s/conf/broker-b.conf:/etc/rocketmq/broker.conf"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">mqbroker</span> <span class="bullet">-c</span> <span class="string">/etc/rocketmq/broker.conf</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - namesrv-m:</span><span class="string">namesrv-m</span></span><br><span class="line"><span class="attr">      - namesrv-s:</span><span class="string">namesrv-s</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      JAVA_OPTS:</span> <span class="string">" -Duser.home=/opt"</span></span><br><span class="line"><span class="attr">      JAVA_OPT_EXT:</span> <span class="string">"-server -Xms300m -Xmx300m -Xmn150m"</span></span><br><span class="line"><span class="attr">  console:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">styletang/rocketmq-console-ng:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9990</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - namesrv-m:</span><span class="string">namesrv-m</span></span><br><span class="line"><span class="attr">      - namesrv-s:</span><span class="string">namesrv-s</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      JAVA_OPTS:</span> <span class="bullet">-Drocketmq.config.namesrvAddr=namesrv-m:9876;namesrv-s:9877</span> <span class="bullet">-Dcom.rocketmq.sendMessageWithVIPChannel=false</span></span><br></pre></td></tr></table></figure><h2 id="yapi"><a href="#yapi" class="headerlink" title="yapi"></a>yapi</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">初始化管理员账号成功,账号名：<span class="string">"admin@admin.com"</span>，密码：<span class="string">"ymfe.org"</span></span><br><span class="line">部署成功，请切换到部署目录，输入： <span class="string">"node vendors/server/app.js"</span> 指令启动服务器, 然后在浏览器打开 http:<span class="comment">//127.0.0.1:3000 访问</span></span><br><span class="line"></span><br><span class="line">docker run -it -v  /c/Users/aaa:/download -<span class="selector-tag">p</span> <span class="number">8083</span>:<span class="number">8080</span> -<span class="selector-tag">p</span> <span class="number">3030</span>:<span class="number">3030</span> -<span class="selector-tag">p</span> <span class="number">3000</span>:<span class="number">3000</span> -<span class="selector-tag">p</span> <span class="number">9090</span>:<span class="number">9090</span> -<span class="selector-tag">p</span> <span class="number">8087</span>:<span class="number">8087</span> <span class="number">1</span>d07f2f71c12</span><br><span class="line"></span><br><span class="line">service mongodb stop</span><br><span class="line"></span><br><span class="line">service mongodb start</span><br><span class="line"></span><br><span class="line">cd /usr/node/my-yapi</span><br><span class="line">node vendors/server/app.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">交给pm2处理</span><br><span class="line">npm install -g pm2</span><br><span class="line"></span><br><span class="line">pm2 start /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/my-yapi/vendors/server/app<span class="selector-class">.js</span> --name=<span class="string">"yapi"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pm2 list <span class="comment">// 查看当前正在运行的服务</span></span><br><span class="line">pm2 stop yapi  <span class="comment">// 通过设置的名称关闭指定的服务</span></span><br><span class="line">pm2 restart yapi  <span class="comment">// 通过设置的名称重启指定的服务</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装</span><br><span class="line"></span><br><span class="line">yapi</span><br><span class="line"></span><br><span class="line">tar xvJf node-v10.<span class="number">16.0</span>-linux-x64<span class="selector-class">.tar</span><span class="selector-class">.xz</span></span><br><span class="line"></span><br><span class="line">node</span><br><span class="line"><span class="number">1</span><span class="selector-class">.vim</span> ~/.bashrc</span><br><span class="line"><span class="number">2</span><span class="selector-class">.source</span> ~/.bashrc</span><br><span class="line">export PATH=/usr/node/node-v10.<span class="number">16.0</span>-linux-x64/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">//换源</span></span><br><span class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line">npm install -g yapi-cli</span><br><span class="line">yapi server</span><br><span class="line"></span><br><span class="line"><span class="number">1</span><span class="selector-class">.vim</span> ~/.bashrc</span><br><span class="line"><span class="number">2</span><span class="selector-class">.source</span> ~/.bashrc</span><br><span class="line">export PATH=/usr/mongodb/mongodb-linux-x86_64-ubuntu1804-<span class="number">4.0</span>.<span class="number">10</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"> ./mongodb/mongodb-linux-x86_64-ubuntu1804-<span class="number">4.0</span>.<span class="number">10</span>/bin/mongod --fork --dbpath ./dbdata --logpath ./dblog/log</span><br><span class="line"></span><br><span class="line">error while loading shared libraries: libcurl<span class="selector-class">.so</span>.<span class="number">4</span>: cannot open shared <span class="selector-tag">object</span> file: No such file or directory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm install -g yapi-cli</span><br><span class="line"></span><br><span class="line">yapi server</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Reids&quot;&gt;&lt;a href=&quot;#Reids&quot; class=&quot;headerlink&quot; title=&quot;Reids&quot;&gt;&lt;/a&gt;Reids&lt;/h2&gt;
    
    </summary>
    
      <category term="项目小结" scheme="//aha.me/categories/%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="项目总结" scheme="//aha.me/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>使用vue-video-player做H5直播播放</title>
    <link href="//aha.me/2020/06/01/%E4%BD%BF%E7%94%A8vue-video-player%E5%81%9AH5%E7%9B%B4%E6%92%AD%E6%92%AD%E6%94%BE/"/>
    <id>//aha.me/2020/06/01/使用vue-video-player做H5直播播放/</id>
    <published>2020-06-01T02:48:17.000Z</published>
    <updated>2020-08-31T14:08:57.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote><p>先下载video 插件 npm install vue-video-player –save</p></blockquote><a id="more"></a><h3 id="player-vue"><a href="#player-vue" class="headerlink" title="player vue"></a>player vue</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div <span class="class"><span class="keyword">class</span>="<span class="title">player</span>"&gt;</span></span><br><span class="line">&lt;video-player <span class="class"><span class="keyword">class</span>="<span class="title">video</span>-<span class="title">player</span> <span class="title">vjs</span>-<span class="title">custom</span>-<span class="title">skin</span>"</span></span><br><span class="line">                 ref=<span class="string">"videoPlayer"</span></span><br><span class="line">                 :playsinline=<span class="string">"true"</span></span><br><span class="line">                 style=<span class="string">"object-fit:fill"</span></span><br><span class="line">                 :options=<span class="string">"playerOptions"</span></span><br><span class="line">                 :x5-video-player-fullscreen=<span class="string">"true"</span></span><br><span class="line">                 <span class="meta">@pause</span>=<span class="string">"onPlayerPause(<span class="variable">$event</span>)"</span></span><br><span class="line">                 <span class="meta">@play</span>=<span class="string">"onPlayerPlay(<span class="variable">$event</span>)"</span></span><br><span class="line">                 <span class="meta">@fullscreenchange</span>=<span class="string">"onFullscreenChange(<span class="variable">$event</span>)"</span></span><br><span class="line">                 <span class="meta">@click</span>=<span class="string">"fullScreen"</span></span><br><span class="line">   &gt;</span><br><span class="line">   &lt;/video-player&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">import</span> &#123;videoPlayer&#125; from <span class="string">'vue-video-player'</span>;</span><br><span class="line"> <span class="keyword">import</span> <span class="string">'videojs-flash'</span></span><br><span class="line">  export <span class="keyword">default</span> &#123;</span><br><span class="line">      name:<span class="string">"player"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      videoPlayer</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">data</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">    </span><br><span class="line">        playerOptions: &#123;</span><br><span class="line"><span class="comment">//        playbackRates: [0.7, 1.0, 1.5, 2.0], //播放速度</span></span><br><span class="line">          autoplay: <span class="literal">true</span>, <span class="comment">//如果true,浏览器准备好时开始回放。</span></span><br><span class="line">          muted: <span class="literal">false</span>, <span class="comment">// 默认情况下将会消除任何音频。</span></span><br><span class="line">          loop: <span class="literal">false</span>, <span class="comment">// 导致视频一结束就重新开始。</span></span><br><span class="line">          preload: <span class="string">'auto'</span>, <span class="comment">// 建议浏览器在&lt;video&gt;加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）</span></span><br><span class="line">          language: <span class="string">'zh-CN'</span>,</span><br><span class="line">          aspectRatio: <span class="string">'16:9'</span>, <span class="comment">// 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如"16:9"或"4:3"）</span></span><br><span class="line">          fluid: <span class="literal">true</span>, <span class="comment">// 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。</span></span><br><span class="line">          sources: [&#123;</span><br><span class="line">            type: <span class="string">"application/x-mpegURL"</span>,</span><br><span class="line">            <span class="comment">//  type: "rtmp/mp4",</span></span><br><span class="line">           src: <span class="string">"rtmp://202.69.69.180:443/webcast/bshdlive-pc"</span></span><br><span class="line"></span><br><span class="line">          &#125;],</span><br><span class="line">          techOrder: [<span class="string">'flash'</span>],</span><br><span class="line">          controls: <span class="literal">true</span>,</span><br><span class="line">          width: document.documentElement.clientWidth,</span><br><span class="line">          notSupportedMessage: <span class="string">'此视频暂无法播放，请稍后再试'</span>, <span class="comment">//允许覆盖Video.js无法播放媒体源时显示的默认信息。</span></span><br><span class="line">          controlBar: &#123;</span><br><span class="line">            <span class="comment">// timeDivider: true,</span></span><br><span class="line">            <span class="comment">// durationDisplay: true,</span></span><br><span class="line">            <span class="comment">// remainingTimeDisplay: false,</span></span><br><span class="line">            fullscreenToggle: <span class="literal">true</span>  <span class="comment">//全屏按钮</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      fullScreen() &#123;</span><br><span class="line">        <span class="keyword">const</span> player = <span class="keyword">this</span>.$refs.videoPlayer.player</span><br><span class="line">        player.requestFullscreen()<span class="comment">//调用全屏api方法</span></span><br><span class="line">        player.isFullscreen(<span class="literal">true</span>)</span><br><span class="line">        player.play()</span><br><span class="line">      &#125;,</span><br><span class="line">      onPlayerPlay(player) &#123;</span><br><span class="line">        player.play()</span><br><span class="line">      &#125;,</span><br><span class="line">      onPlayerPause(player) &#123;</span><br><span class="line">        <span class="comment">// alert("pause");</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      player() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$refs.videoPlayer.player</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="main-js"><a href="#main-js" class="headerlink" title="main .js"></a>main .js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> VideoPlayer <span class="keyword">from</span> <span class="string">'vue-video-player'</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'video.js/dist/video-js.css'</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'vue-video-player/src/custom-theme.css'</span>)</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="comment">// VideoPlayer.config(&#123;</span></span><br><span class="line"><span class="comment">//   youtube: true,</span></span><br><span class="line"><span class="comment">//   switcher: true,</span></span><br><span class="line"><span class="comment">//   hls: true</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line">Vue.use(VideoPlayer)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>需要浏览器开启flash支持！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;先下载video 插件 npm install vue-video-player –save&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="直播" scheme="//aha.me/categories/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="vue" scheme="//aha.me/categories/%E7%9B%B4%E6%92%AD/vue/"/>
    
    
      <category term="VUE" scheme="//aha.me/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>花里胡哨的Java序列化机制</title>
    <link href="//aha.me/2020/04/07/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E7%9A%84Java%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6/"/>
    <id>//aha.me/2020/04/07/花里胡哨的Java序列化机制/</id>
    <published>2020-04-07T08:00:36.000Z</published>
    <updated>2020-08-31T14:08:57.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>通常在写实体类时都默认继承Serializable接口,但是有什么用?今天就来深入了解下java序列化机制</p></blockquote><h2 id="序列化、反序列化的概念"><a href="#序列化、反序列化的概念" class="headerlink" title="序列化、反序列化的概念"></a>序列化、反序列化的概念</h2><blockquote><p>序列化就是将java对象转化成二进制保存到磁盘中去，反序列化就是从磁盘中读取文件流然后转成java对象</p></blockquote><a id="more"></a><p>常用的方式及好处</p><ul><li>网络通讯传输java对象数据-&gt;利用序列化实现远程通信，即在网络上传送对象的字节序列</li><li>永久保存java对象-&gt;实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上</li></ul><h2 id="Java序列化机制"><a href="#Java序列化机制" class="headerlink" title="Java序列化机制"></a>Java序列化机制</h2><ol><li>Serializable接口</li></ol><ul><li>创建StudentEntity 并实现Serializable 接口</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line">    <span class="comment">//get set toString</span></span><br></pre></td></tr></table></figure><blockquote><p> serialVersionUID有两种显示的生成方式：<br>  一是默认的1L，比如：private static final long serialVersionUID = 1L;<br>  二是根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，比如： private static final long serialVersionUID = xxxxL;</p></blockquote><p><strong>serialVersionUID的作用-&gt;目的是序列化对象版本控制，有关各版本反序列化时是否兼容</strong></p><ul><li>在Test类中去实现序列化和反序列化。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception, IOException &#123;</span><br><span class="line">        SerializeStudent();</span><br><span class="line">        DeSerializeStudent();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//序列化方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> SerializeStudent() <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">        StudentEntity studentEntity = <span class="keyword">new</span> StudentEntity();</span><br><span class="line">        studentEntity.setStudentName(<span class="string">"Kaleldo"</span>);</span><br><span class="line">        <span class="comment">//序列化对象到文件中</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"C://Test/Student"</span>));</span><br><span class="line">        oos.writeObject(studentEntity);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"序列化对象成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反序列化方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> DeSerializeStudent() <span class="keyword">throws</span> FileNotFoundException, IOException&#123;</span><br><span class="line">        <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"C://Test/Student"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>));</span><br><span class="line">        StudentEntity studentEntity = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            studentEntity = (StudentEntity)ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"反序列化对象成功"</span>+studentEntity.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果:在C://Test 目录会发现一个Student文件 ,同时控制台输出以下内容</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Connected <span class="keyword">to</span> the target VM, addres<span class="variable">s:</span> <span class="string">'127.0.0.1:51227'</span>, transpor<span class="variable">t:</span> <span class="string">'socket'</span></span><br><span class="line">序列化对象成功</span><br><span class="line">Disconnected from the target VM, addres<span class="variable">s:</span> <span class="string">'127.0.0.1:51227'</span>, transpor<span class="variable">t:</span> <span class="string">'socket'</span></span><br><span class="line">反序列化对象成功StudentEntity&#123;studentName=<span class="string">'Kaleldo'</span>&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Externalizable接口</li></ol><ul><li>实现Externalizable接口需注意3点</li></ul><blockquote><p>（1）Externalizable继承自Serializable接口</p><p>（2）需重写writeExternal()与readExternal()方法</p><p>（3）实现Externalizable接口的类必须要提供一个public的无参的构造器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student1Entity</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student1Entity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeObject(studentName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        studentName = (String) in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//get set toString</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>测试<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception, IOException &#123;</span><br><span class="line">        SerializeStudent();</span><br><span class="line">        DeSerializeStudent();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//序列化方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> SerializeStudent() <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">        Student1Entity studentEntity = <span class="keyword">new</span> Student1Entity();</span><br><span class="line">        studentEntity.setStudentName(<span class="string">"Kaleldo"</span>);</span><br><span class="line">        <span class="comment">//序列化对象到文件中</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"C://Test/Student1"</span>));</span><br><span class="line">        oos.writeObject(studentEntity);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"序列化对象成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反序列化方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> DeSerializeStudent() <span class="keyword">throws</span> FileNotFoundException, IOException&#123;</span><br><span class="line">        <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"C://Test/Student1"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>));</span><br><span class="line">        Student1Entity studentEntity = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            studentEntity = (Student1Entity)ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"反序列化对象成功"</span>+studentEntity.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>-输出<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Connected <span class="keyword">to</span> the target VM, addres<span class="variable">s:</span> <span class="string">'127.0.0.1:51328'</span>, transpor<span class="variable">t:</span> <span class="string">'socket'</span></span><br><span class="line">序列化对象成功</span><br><span class="line">Disconnected from the target VM, addres<span class="variable">s:</span> <span class="string">'127.0.0.1:51328'</span>, transpor<span class="variable">t:</span> <span class="string">'socket'</span></span><br><span class="line">反序列化对象成功Student1Entity&#123;studentName=<span class="string">'Kaleldo'</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="transient关键字及静态变量的序列化"><a href="#transient关键字及静态变量的序列化" class="headerlink" title="transient关键字及静态变量的序列化"></a>transient关键字及静态变量的序列化</h2><ol><li>通过实现Externalizable接口可以自定义序列化的属性，同样，关键字transient也可以达到相同的效果<br>但是两点区别</li></ol><ul><li>transient修饰的变量，即使使用private修饰也会被序列化</li><li>如果让private属性不被序列化，则使用Externalizable</li></ul><ol start="2"><li>静态变量不会被序列化</li></ol><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> studentNumber;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception, IOException &#123;</span><br><span class="line">        SerializeStudent();</span><br><span class="line">        StudentEntity.setStudentNumber(<span class="number">12</span>);</span><br><span class="line">        DeSerializeStudent();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//序列化方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> SerializeStudent() <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">        StudentEntity.setStudentNumber(<span class="number">13</span>);</span><br><span class="line">        StudentEntity studentEntity = <span class="keyword">new</span> StudentEntity();</span><br><span class="line">        studentEntity.setStudentName(<span class="string">"Kaleldo"</span>);</span><br><span class="line">        <span class="comment">//序列化对象到文件中</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"C://Test/Student1"</span>));</span><br><span class="line">        oos.writeObject(studentEntity);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"序列化对象成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反序列化方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> DeSerializeStudent() <span class="keyword">throws</span> FileNotFoundException, IOException&#123;</span><br><span class="line">        <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"C://Test/Student"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>));</span><br><span class="line">        StudentEntity studentEntity = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            studentEntity = (StudentEntity)ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"反序列化对象成功"</span>+studentEntity.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果:即使在序列化之前修改了值为13,但是还是输出12,反序列输出的静态变量值变化了：说明静态变量没有被序列化了。<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">序列化对象成功</span><br><span class="line">Disconnected from the target VM, <span class="string">address:</span> <span class="string">'127.0.0.1:52125'</span>, <span class="string">transport:</span> <span class="string">'socket'</span></span><br><span class="line">反序列化对象成功StudentEntity&#123;studentName=<span class="string">'Kaleldo'</span>studentNumber=<span class="string">'12'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>1.实现序列化有两种方式，一实现Serializable接口，二是实现Externalizable接口，Externalizable可以自定义序列化规则<br>2.static、transient修饰的字段不会被序列化<br>3.serialVersionUID相当于版本号,如果每次序列化的serialVersionUID不同,将会报序列化出错</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通常在写实体类时都默认继承Serializable接口,但是有什么用?今天就来深入了解下java序列化机制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;序列化、反序列化的概念&quot;&gt;&lt;a href=&quot;#序列化、反序列化的概念&quot; class=&quot;headerlink&quot; title=&quot;序列化、反序列化的概念&quot;&gt;&lt;/a&gt;序列化、反序列化的概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;序列化就是将java对象转化成二进制保存到磁盘中去，反序列化就是从磁盘中读取文件流然后转成java对象&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java序列化" scheme="//aha.me/categories/Java%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
      <category term="Java序列化" scheme="//aha.me/tags/Java%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JUC之花里胡哨Exchanger</title>
    <link href="//aha.me/2020/03/26/JUC%E4%B9%8B%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8Exchanger/"/>
    <id>//aha.me/2020/03/26/JUC之花里胡哨Exchanger/</id>
    <published>2020-03-26T02:41:36.000Z</published>
    <updated>2020-08-31T14:08:57.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JUC中的Exchanger允许成对的线程在指定的同步点上通过exchange方法来交换数据。如果第一个线程先执行exchange方法，它会一直等待第二个线程也 执行exchange方法，当两个线程都到达同步点时，这两个线程就可以交换数据，将当前线程生产 出来的数据传递给对方。</p><a id="more"></a><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>一般来说,辅助要跟着打野发育,抓人.但两个人不沟通的话,就只能靠爱情的默契.因此做为一名合格的打野/辅助,一定会分分钟钟发送消息,让对方了解,让对方感动💖.就像谈恋爱一样,甜死她💘!<br>下面模拟两个选手通过Exchanger交换数据的简单示例</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ExchangerTest</span> &#123;</span></span><br><span class="line">    public static <span class="literal">void</span> main(String[] args) &#123;</span><br><span class="line">        final Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread<span class="function"><span class="params">(() -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            System.out.println(<span class="string">"打野:全军出击"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                String exchange = exchanger.exchange(<span class="string">"嘤嘤怪,先过去反蓝"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                System.out.println(<span class="string">"嘤嘤怪辅助："</span> + exchange);</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                e.printStackTrace();</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">            System.out.println(<span class="string">"得到:蓝加成"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;, <span class="string">"thread1"</span>)</span>.<span class="title">start</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">new</span> <span class="title">Thread</span><span class="params">(() -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            System.out.println(<span class="string">"辅助:全军出击"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                String exchange = exchanger.exchange(<span class="string">"收到"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                System.out.println(<span class="string">"猛男打野："</span> + exchange);</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                e.printStackTrace();</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;, <span class="string">"thread2"</span>)</span>.<span class="title">start</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>在定义Exchanger的时候需要指定交换的数据类型，这里为String类型。exchange方法用于向另一个线程发送数据，方法的返回值为另一个线程发送过来的数据。<br><strong>只有</strong>当成对👩‍❤‍👨的线程都到达同步点的时候，才会执行数据交换操作.因此先让嘤嘤怪休眠5秒,后进行反野<br>上面例子输出如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">打野:全军出击</span></span><br><span class="line"><span class="section">辅助:全军出击</span></span><br><span class="line">猛男打野：嘤嘤怪,先过去反蓝</span><br><span class="line">嘤嘤怪辅助：收到</span><br><span class="line"><span class="section">得到:蓝加成</span></span><br></pre></td></tr></table></figure><h3 id="设置超时时间"><a href="#设置超时时间" class="headerlink" title="设置超时时间"></a>设置超时时间</h3><p>有时由于网络问题造成延迟,没有及时收到消息,因此为了打野的发育,放弃辅助一个人去反野</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ExchangerTest</span> &#123;</span></span><br><span class="line">    public static <span class="literal">void</span> main(String[] args) &#123;</span><br><span class="line">        final Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread<span class="function"><span class="params">(() -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            System.out.println(<span class="string">"打野:全军出击"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                String exchange = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                    exchange = exchanger.exchange(<span class="string">"嘤嘤怪,先过去反蓝"</span>,<span class="number">3</span>, TimeUnit.SECONDS);</span></span></span><br><span class="line"><span class="function"><span class="params">                    System.out.println(<span class="string">"嘤嘤怪辅助："</span> + exchange);</span></span></span><br><span class="line"><span class="function"><span class="params">                    System.out.println(<span class="string">"得到:蓝加成"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                    System.out.println(<span class="string">"打野被拿了一血"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                    e.printStackTrace();</span></span></span><br><span class="line"><span class="function"><span class="params">                &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                e.printStackTrace();</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;, <span class="string">"thread1"</span>)</span>.<span class="title">start</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">new</span> <span class="title">Thread</span><span class="params">(() -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            System.out.println(<span class="string">"辅助:全军出击"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                String exchange = exchanger.exchange(<span class="string">"收到"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                System.out.println(<span class="string">"猛男打野："</span> + exchange);</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                e.printStackTrace();</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;, <span class="string">"thread2"</span>)</span>.<span class="title">start</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>因为辅助要等到5秒才回复,打野只能等3秒,而打野在等待3秒后只身去反野,结果抛出TimeoutException异常了。5秒后由于没有线程再和辅助交换数据，所以辅助会一直等待：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">打野:全军出击</span><br><span class="line">辅助:全军出击</span><br><span class="line">打野被拿了一血</span><br><span class="line">java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.TimeoutException</span></span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.Exchanger</span><span class="selector-class">.exchange</span>(Exchanger<span class="selector-class">.java</span>:<span class="number">626</span>)</span><br><span class="line">at com<span class="selector-class">.kaleldo</span><span class="selector-class">.kaleldo</span><span class="selector-class">.threadTest</span><span class="selector-class">.ExchangerTest</span><span class="selector-class">.lambda</span><span class="variable">$main</span>$<span class="number">0</span>(ExchangerTest<span class="selector-class">.java</span>:<span class="number">16</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">748</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;JUC中的Exchanger允许成对的线程在指定的同步点上通过exchange方法来交换数据。如果第一个线程先执行exchange方法，它会一直等待第二个线程也 执行exchange方法，当两个线程都到达同步点时，这两个线程就可以交换数据，将当前线程生产 出来的数据传递给对方。&lt;/p&gt;
    
    </summary>
    
      <category term="Java多线程" scheme="//aha.me/categories/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="//aha.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JUC之花里胡哨CyclicBarrier</title>
    <link href="//aha.me/2020/03/25/JUC%E4%B9%8B%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8CyclicBarrier/"/>
    <id>//aha.me/2020/03/25/JUC之花里胡哨CyclicBarrier/</id>
    <published>2020-03-25T02:58:41.000Z</published>
    <updated>2020-08-31T14:08:57.811Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>CyclicBarrier的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。CyclicBarrier默认的构造方法是CyclicBarrier(int parties)，其参数表示屏障拦截的线程数量，每个线程调用await方法告诉CyclicBarrier我已经到达了屏障，然后当前线程被阻塞。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>需求:由于”开黑三排””时,老是人凑不齐,因此用CyclicBarrier来演示</p><a id="more"></a><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierTest</span> &#123;</span></span><br><span class="line">    public static <span class="literal">void</span> main(String[] args) &#123;</span><br><span class="line">        CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier<span class="function"><span class="params">(<span class="number">2</span>, <span class="keyword">new</span> Thread(() -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            System.out.println(<span class="string">"发车，嘟嘟嘟"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">"快上车来不及解释了"</span>)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">new</span> <span class="title">Thread</span><span class="params">(() -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                System.out.println(<span class="string">"小王已上车"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                barrier.await();</span></span></span><br><span class="line"><span class="function"><span class="params">                System.out.println(<span class="string">"所有人已上车，发车"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                e.printStackTrace();</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;, <span class="string">"小王"</span>)</span>.<span class="title">start</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">new</span> <span class="title">Thread</span><span class="params">(() -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                System.out.println(<span class="string">"小李已上车"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                barrier.await();</span></span></span><br><span class="line"><span class="function"><span class="params">                System.out.println(<span class="string">"所有人已上车，发车"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                e.printStackTrace();</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;, <span class="string">"小李"</span>)</span>.<span class="title">start</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>两个线程内部调用了await方法，让其阻塞等待，并告知CyclicBarrier我已经到达屏障了。只有当两个线程都执行到barrier.await()这一行时，屏障开启，线程才会继续往下执行。<br>CyclicBarrier的构造函数支持传入一个回调方法：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier<span class="function"><span class="params">(<span class="number">2</span>, <span class="keyword">new</span> Thread(() -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">       System.out.println(<span class="string">"发车，嘟嘟嘟"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">   &#125;))</span>;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">快上车来不及解释了</span><br><span class="line">小李已上车</span><br><span class="line">小王已上车</span><br><span class="line">发车，嘟嘟嘟</span><br><span class="line">所有人已上车，发车</span><br><span class="line">所有人已上车，发车</span><br></pre></td></tr></table></figure><h3 id="超时时间"><a href="#超时时间" class="headerlink" title="超时时间"></a>超时时间</h3><p>有位朋友因为先开局一分钟了.但是队友都在等他,也不能白白的等待吧,所以设置超时时间</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierTest</span> &#123;</span></span><br><span class="line">    public static <span class="literal">void</span> main(String[] args) &#123;</span><br><span class="line">        CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier<span class="function"><span class="params">(<span class="number">2</span>, <span class="keyword">new</span> Thread(() -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            System.out.println(<span class="string">"发车，嘟嘟嘟"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">"快上车来不及解释了"</span>)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">boolean</span> <span class="title">a</span> = <span class="title">false</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">new</span> <span class="title">Thread</span><span class="params">(() -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                System.out.println(<span class="string">"小王已上车"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                barrier.await();</span></span></span><br><span class="line"><span class="function"><span class="params">                System.out.println(<span class="string">"所有人已上车，发车"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                e.printStackTrace();</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;, <span class="string">"小王"</span>)</span>.<span class="title">start</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">new</span> <span class="title">Thread</span><span class="params">(() -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                System.out.println(<span class="string">"小李已上车"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                    barrier.await(<span class="number">1</span>, TimeUnit.SECONDS);</span></span></span><br><span class="line"><span class="function"><span class="params">                    System.out.println(<span class="string">"所有人已上车，发车"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                    System.out.println(<span class="string">"有人没上车,下车!"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                    e.printStackTrace();</span></span></span><br><span class="line"><span class="function"><span class="params">                &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                e.printStackTrace();</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;, <span class="string">"小李"</span>)</span>.<span class="title">start</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">快上车来不及解释了</span><br><span class="line">小李已上车</span><br><span class="line">有人没上车,下车!</span><br><span class="line">java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.TimeoutException</span></span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.CyclicBarrier</span><span class="selector-class">.dowait</span>(CyclicBarrier<span class="selector-class">.java</span>:<span class="number">257</span>)</span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.CyclicBarrier</span><span class="selector-class">.await</span>(CyclicBarrier<span class="selector-class">.java</span>:<span class="number">435</span>)</span><br><span class="line">at com<span class="selector-class">.kaleldo</span><span class="selector-class">.kaleldo</span><span class="selector-class">.threadTest</span><span class="selector-class">.CyclicBarrierTest</span><span class="selector-class">.lambda</span><span class="variable">$main</span>$<span class="number">2</span>(CyclicBarrierTest<span class="selector-class">.java</span>:<span class="number">32</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">748</span>)</span><br><span class="line">java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.BrokenBarrierException</span></span><br><span class="line">小王已上车</span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.CyclicBarrier</span><span class="selector-class">.dowait</span>(CyclicBarrier<span class="selector-class">.java</span>:<span class="number">207</span>)</span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.CyclicBarrier</span><span class="selector-class">.await</span>(CyclicBarrier<span class="selector-class">.java</span>:<span class="number">362</span>)</span><br><span class="line">at com<span class="selector-class">.kaleldo</span><span class="selector-class">.kaleldo</span><span class="selector-class">.threadTest</span><span class="selector-class">.CyclicBarrierTest</span><span class="selector-class">.lambda</span><span class="variable">$main</span>$<span class="number">1</span>(CyclicBarrierTest<span class="selector-class">.java</span>:<span class="number">20</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><h3 id="与CountDownLatch区别"><a href="#与CountDownLatch区别" class="headerlink" title="与CountDownLatch区别"></a>与CountDownLatch区别</h3><ol><li>CountDownLatch：一个线程(或者多个)，等待另外N个线程完成某个事情之后才能执行；CyclicBarrier：N个线程相互等待，任何一个线程完成之前，所有的线程都必须等待。</li></ol><ol start="2"><li>CountDownLatch：一次性的；CyclicBarrier：可以重复使用。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;CyclicBarrier的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。CyclicBarrier默认的构造方法是CyclicBarrier(int parties)，其参数表示屏障拦截的线程数量，每个线程调用await方法告诉CyclicBarrier我已经到达了屏障，然后当前线程被阻塞。&lt;/p&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;p&gt;需求:由于”开黑三排””时,老是人凑不齐,因此用CyclicBarrier来演示&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="Java多线程" scheme="//aha.me/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JUC之花里胡哨CountDownLatch</title>
    <link href="//aha.me/2020/03/24/JUC%E4%B9%8B%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8CountDownLatch/"/>
    <id>//aha.me/2020/03/24/JUC之花里胡哨CountDownLatch/</id>
    <published>2020-03-24T04:33:21.000Z</published>
    <updated>2020-08-31T14:08:57.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>CountDownLatch允许一个或多个线程等待其他线程完成操作。定义CountDownLatch的时候，需要传入一个正数来初始化计数器（虽然传入0也可以，但这样的话CountDownLatch没什么实际意义）。其countDown方法用于递减计数器，await方法会使当前线程阻塞，直到计数器递减为0。所以CountDownLatch常用于多个线程之间的协调工作。</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设我们现在有这样一个需求：<br>由于很多群友在技术群搞黄色🍋,群主想了个办法</p><ol><li>发布假资源,吸引🍋党的注意</li><li>统计名单</li><li><p>踢出群聊</p><a id="more"></a></li></ol><p>过程如下所示:</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class CountDownLatchTest &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService ExecutorService = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 1. 模拟从数据库获取数据</span></span><br><span class="line">        <span class="keyword">String</span>[] data = query();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"获取群友名单"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 数据处理</span></span><br><span class="line">        IntStream.range(<span class="number">0</span>, data.length).forEach(i -&gt; &#123;</span><br><span class="line">            ExecutorService.execute(() -&gt; &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (i==<span class="number">1</span>)&#123;</span><br><span class="line">                    data[i] = <span class="string">"Yellow"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">String</span> value = data[i];</span><br><span class="line">                System.out.<span class="built_in">println</span>(value+<span class="string">"群友上车成功"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"所有群友都处理完了"</span>);</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        ExecutorService.shutdown();</span><br><span class="line">        <span class="comment">// 3. 保存数据</span></span><br><span class="line">        <span class="built_in">save</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span>[] query() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"T"</span>, <span class="string">"B"</span>, <span class="string">"Y"</span>, <span class="string">"K"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">save</span>(<span class="keyword">String</span>[] data) &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"踢出群聊名单 - "</span> + Arrays.toString(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于线程获取CPU时间片的不确定性，所以有可能数据还没有处理完毕,导致没上勾就踢错</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">获取群友名单</span><br><span class="line">所有群友都处理完了</span><br><span class="line">踢出群聊名单 - [T, <span class="keyword">B, </span>Y, K]</span><br><span class="line">T群友上车成功</span><br><span class="line"><span class="keyword">B群友上车成功</span></span><br><span class="line"><span class="keyword">Y群友上车成功</span></span><br><span class="line"><span class="keyword">K群友上车成功</span></span><br></pre></td></tr></table></figure><p>CountDownLatch解决这个问题</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class CountDownLatchTest &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService ExecutorService = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 1. 模拟从数据库获取数据</span></span><br><span class="line">        <span class="keyword">String</span>[] data = query();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"获取群友名单"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 数据处理</span></span><br><span class="line">        IntStream.range(<span class="number">0</span>, data.length).forEach(i -&gt; &#123;</span><br><span class="line">            ExecutorService.execute(() -&gt; &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (i==<span class="number">1</span>)&#123;</span><br><span class="line">                    data[i] = <span class="string">"Yellow"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">String</span> value = data[i];</span><br><span class="line">                System.out.<span class="built_in">println</span>(value+<span class="string">"群友上车成功"</span>);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        latch.await(<span class="number">2</span>, TimeUnit.SECONDS); <span class="comment">// 最多等待 3秒</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"所有群友都处理完了"</span>);</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        ExecutorService.shutdown();</span><br><span class="line">        <span class="comment">// 3. 保存数据</span></span><br><span class="line">        <span class="built_in">save</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span>[] query() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"T"</span>, <span class="string">"B"</span>, <span class="string">"Y"</span>, <span class="string">"K"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">save</span>(<span class="keyword">String</span>[] data) &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"踢出群聊名单 - "</span> + Arrays.toString(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个CountDownLatch,计数器值为4,在每个线程执行完毕的时候调用countDown方法，让计数器减1。<br>main方法调用await方法让main线程阻塞等待，直到计数器被减为0。所以这就保证了只有当所有数据加工完毕才执行保存数据操作。<br>await有重载方法：await(long timeout, TimeUnit unit)，设置最大等待时间，超过这个时间程序将继续执行不再被阻塞</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">获取群友名单</span><br><span class="line">T群友上车成功</span><br><span class="line">Y群友上车成功</span><br><span class="line"><span class="keyword">K</span>群友上车成功</span><br><span class="line"><span class="keyword">Yellow</span>群友上车成功</span><br><span class="line">所有群友都处理完了</span><br><span class="line">踢出群聊名单 - [T, <span class="keyword">Yellow</span>, Y, <span class="keyword">K</span>]</span><br></pre></td></tr></table></figure><p>ok,群主的钓鱼执法成功!🌰</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CountDownLatch允许一个或多个线程等待其他线程完成操作。定义CountDownLatch的时候，需要传入一个正数来初始化计数器（虽然传入0也可以，但这样的话CountDownLatch没什么实际意义）。其countDown方法用于递减计数器，await方法会使当前线程阻塞，直到计数器递减为0。所以CountDownLatch常用于多个线程之间的协调工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;p&gt;假设我们现在有这样一个需求：&lt;br&gt;由于很多群友在技术群搞黄色🍋,群主想了个办法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发布假资源,吸引🍋党的注意&lt;/li&gt;
&lt;li&gt;统计名单&lt;/li&gt;
&lt;li&gt;&lt;p&gt;踢出群聊&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="Java多线程" scheme="//aha.me/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java花里胡哨的内存模型</title>
    <link href="//aha.me/2020/03/24/Java%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E7%9A%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>//aha.me/2020/03/24/Java花里胡哨的内存模型/</id>
    <published>2020-03-24T01:58:49.000Z</published>
    <updated>2020-08-31T14:08:57.718Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>由于Java内存模型，是(JVM内存结构、Java内存模型以及Java对象模型)知识点当中最晦涩难懂的一个，而且涉及到很多背景知识和相关知识。<br>在《深入理解Java虚拟机》和《Java并发编程的艺术》等书中也都有关于这个知识点的介绍。但是，自己读完之后还是搞不清楚。就来整体的介绍一下Java内存模型<br><a id="more"></a><br>JMM规定Java线程间的通信采用共享内存的方式。在Java中，所有成员变量、静态变量和数组元素都存储在堆内存中，堆内存在线程之间共享，所以它们通常也称为共享变量。JMM定义了线程和主内存之间的抽<br>象关系：线程之间的共享变量存储在主内存（Main Memory）中，每个线程都有一个私有的本地内存（Local<br>Memory，或者也可以称为工作内存 Work<br>Memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。<br><a href="https://mrbird.cc/Java-Memory-model.html" target="_blank" rel="noopener">摘抄于小黄人</a><br><img src="https://img-blog.csdnimg.cn/20200323224716658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当程序在运行过程中，会将运算需要的数据从主存复制一份到CPU的高速缓存当中，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。</p></blockquote><h3 id="内存间交互协议"><a href="#内存间交互协议" class="headerlink" title="内存间交互协议"></a>内存间交互协议</h3><p>JMM规定了主内存和工作内存间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之间的实现细节，这主要包含了下面8个步骤：<br><img src="https://img-blog.csdnimg.cn/20200323225411948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>Java内存模型规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存，线程的工作内存中保存了该线程中是用到的变量的主内存副本拷贝，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量的传递均需要自己的工作内存和主存之间进行数据同步进行。</p></blockquote><ul><li>lock（锁定）：作用于主内存的X变量，把X变量标识为一条线程独占状态。</li></ul><ul><li><p>unlock（解锁）：作用于主内存X变量，把一个处于锁定状态的X变量释放出来，释放后的X变量才可以被其他线程锁定。</p></li><li><p>read（读取）：作用于主内存X变量，把X变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</p></li><li><p>load（载入）：作用于工作内存的X变量，它把read操作从主内存中得到的X变量值放入工作内存的X变量副本中。</p></li><li><p>use（使用）：作用于工作内存的X变量，把工作内存中的X变量值传递给执行引擎，每当虚拟机遇到一个需要使用X变量的值的字节码指令时将会执行这个操作。</p></li><li><p>assign（赋值）：作用于工作内存的X变量，它把一个从执行引擎接收到的值赋值给工作内存的X变量，每当虚拟机遇到一个给X变量赋值的字节码指令时执行这个操作。</p></li><li><p>store（存储）：作用于工作内存的X变量，把工作内存中的X变量的值传送到主内存中，以便随后的write的操作。</p></li><li><p>write（写入）：作用于主内存的X变量，它把store操作从工作内存中X变量的值传送到主内存的X变量中。</p></li></ul><h3 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h3><p>在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排序。从Java源代码到最终实际执行的指令序列，会分别经历下面3种重排序:</p><ul><li><p>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</p></li><li><p>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-LevelParallelism，ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</p></li><li><p>内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</p></li></ul><p>如果两个操作访问同一个变量，其中一个为写操作，此时这两个操作之间存在数据依赖性。 编译器和处理器不会改变存在数据依赖性关系的两个操作的执行顺序，即不会重排序。不管怎么重排序，单线程下的执行结果不能被改变，编译器、runtime和处理器都必须遵守as-if-serial语义。<br>JMM是一种规范，目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代码乱序执行等带来的问题。</p><h3 id="Java内存模型的实现"><a href="#Java内存模型的实现" class="headerlink" title="Java内存模型的实现"></a>Java内存模型的实现</h3><ol><li>原子性<br>为了保证原子性，提供了两个高级的字节码指令monitorenter和monitorexit。在Java中对应的关键字就是synchronized</li><li>可见性<br>Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值的这种依赖主内存作为传递媒介的方式来实现的。<br>Java中的volatile关键字提供了一个功能，那就是被其修饰的变量在被修改后可以立即同步到主内存，被其修饰的变量在每次是用之前都从主内存刷新。因此，可以使用volatile来保证多线程操作时变量的可见性。<br>除了volatile，Java中的synchronized和final两个关键字也可以实现可见性。</li><li>有序性<br>在Java中，可以使用synchronized和volatile来保证多线程之间操作的有序性。<br>volatile关键字会禁止指令重排。synchronized关键字保证同一时刻只允许一条线程操作。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;由于Java内存模型，是(JVM内存结构、Java内存模型以及Java对象模型)知识点当中最晦涩难懂的一个，而且涉及到很多背景知识和相关知识。&lt;br&gt;在《深入理解Java虚拟机》和《Java并发编程的艺术》等书中也都有关于这个知识点的介绍。但是，自己读完之后还是搞不清楚。就来整体的介绍一下Java内存模型&lt;br&gt;
    
    </summary>
    
      <category term="内存模型" scheme="//aha.me/categories/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
    
      <category term="多线程" scheme="//aha.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudDemo使用说明</title>
    <link href="//aha.me/2020/03/12/SpringCloudDemo%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>//aha.me/2020/03/12/SpringCloudDemo使用说明/</id>
    <published>2020-03-12T01:57:55.000Z</published>
    <updated>2020-08-31T14:08:57.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><blockquote><p>基于SpringCloud(Greenwich.SR1) + SpringBoot(2.1.6.RELEASE)<br>的微服务脚手架，具备用户管理、资源权限管理、网关统一鉴权、自动代码生成、等多个模块，支持多业务系统并行开发，<br>支持多服务并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰。核心技术采用Eureka、Fegin、Ribbon、Zuul、Hystrix、Sentinel、Spring、SpringSecurity、Mybatis、SpringBoot、Redis等主要框架和中间件。</p></blockquote><a id="more"></a><p>项目地址:<a href="https://github.com/zch2017lrf/SpringCloudDemo" target="_blank" rel="noopener">github</a></p><h2 id="导入准备"><a href="#导入准备" class="headerlink" title="导入准备"></a>导入准备</h2><blockquote><p>导入示例是在Windows10操作系统（内存16GB）下完成的，编辑器使用IntelliJ IDEA 2019.2</p></blockquote><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>因为项目用到了JDK 8的一些特性，所以JDK最低版本不能低于8。</p><p>JDK 8官方下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads。" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads。</a></p><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><p>项目缓存数据库使用的是Redis，所以在导入项目前需先安装Redis。</p><p>Redis Windows版本下载地址：<a href="https://github.com/MicrosoftArchive/redis/releases。直接下载zip版本解压到任意目录即可。" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases。直接下载zip版本解压到任意目录即可。</a></p><p>下载后，使用cmd命令切换到Redis根目录，然后运行redis-server.exe redis.windows.conf启动即可</p><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>项目数据库采用MySQL社区版，版本为5.7.x。<br>MySQL root用户密码为123456。</p><h2 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h2><p>直接在桌面上通过git bash克隆后端项目：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/zch2017lrf/SpringCloudDemo</span><br></pre></td></tr></table></figure></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├─Kaleldo-Auth                       <span class="comment">------ 微服务认证服务器</span></span><br><span class="line">├─hello-spring-cloud                      <span class="comment">------ 整个项目的父模块</span></span><br><span class="line">├─SpringCloud-Common                     <span class="comment">------ 通用模块</span></span><br><span class="line">├─Kaleldo-Gateway                    <span class="comment">------ 微服务网关</span></span><br><span class="line">├─SpringCloud-Monitor                   <span class="comment">------ 微服务监控父模块</span></span><br><span class="line">│  ├─SpringCloud-Monitor-Admin           <span class="comment">------ 微服务监控中心</span></span><br><span class="line">├─Server-System           <span class="comment">------- 资源服务器系统模块</span></span><br><span class="line">└─Server-Test             <span class="comment">------ 资源服务器demo，演示如何整合自己的微服务系统</span></span><br></pre></td></tr></table></figure><h3 id="导入sql文件"><a href="#导入sql文件" class="headerlink" title="导入sql文件"></a>导入sql文件</h3><p><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c87ea196afdc2?w=326&amp;h=164&amp;f=png&amp;s=6940" alt="在这里插入图片描述"><br>将common下的SQL文件导入数据库中</p><h3 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h3><p><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c87ea1a2958ee?w=339&amp;h=179&amp;f=png&amp;s=8990" alt="在这里插入图片描述"></p><blockquote><p>1.RegisterApplication-&gt;2.SpringcloudMonitorAdminApplication-&gt;3.AuthApplication-&gt;4.SpringCloudGatewayApplication-&gt;5.SystemApplication-&gt;6.TestApplication</p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动成功后效果图</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c87ea1b8105a3?w=438&amp;h=168&amp;f=png&amp;s=13722" alt="在这里插入图片描述"></p><ol><li>取验证码<br><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c87ea1ca96c36?w=481&amp;h=36&amp;f=png&amp;s=3428" alt="在这里插入图片描述"><br><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c87ea22b380b7?w=218&amp;h=107&amp;f=png&amp;s=4449" alt="在这里插入图片描述"><br>2.api请求令牌</li></ol><p><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c87ea25661fd4?w=925&amp;h=154&amp;f=png&amp;s=12945" alt="在这里插入图片描述"></p><blockquote><p>请求头部 将kaleldo:123456  base64加密后，格式为Basic a2FsZWxkbzoxMjM0NTY=</p></blockquote><p>base地址:<a href="https://tool.oschina.net/encrypt?type=3" target="_blank" rel="noopener">base64</a><br><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c87ea46aec2f6?w=922&amp;h=214&amp;f=png&amp;s=21700" alt="在这里插入图片描述"><br>填写用户名及密码，验证码<br><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c88053bf0bfe7?w=883&amp;h=563&amp;f=png&amp;s=69434" alt><br>请求结果,拿到了token<br><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c87ea4d10dee7?w=534&amp;h=125&amp;f=png&amp;s=8939" alt="在这里插入图片描述"></p><h3 id="测试访问api"><a href="#测试访问api" class="headerlink" title="测试访问api"></a>测试访问api</h3><p>填写token</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c880fd944e877?w=770&amp;h=114&amp;f=png&amp;s=8759" alt><br><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c87ea53e085a6?w=918&amp;h=785&amp;f=png&amp;s=89549" alt="在这里插入图片描述"><br>获取到了该用户信息</p><h3 id="获取system提供的服务"><a href="#获取system提供的服务" class="headerlink" title="获取system提供的服务"></a>获取system提供的服务</h3><p><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c87ea5601c06b?w=952&amp;h=438&amp;f=png&amp;s=48918" alt="在这里插入图片描述"></p><h3 id="服务状态监控"><a href="#服务状态监控" class="headerlink" title="服务状态监控"></a>服务状态监控</h3><p><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c87ea790de2f1?w=958&amp;h=927&amp;f=png&amp;s=90436" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;基于SpringCloud(Greenwich.SR1) + SpringBoot(2.1.6.RELEASE)&lt;br&gt;的微服务脚手架，具备用户管理、资源权限管理、网关统一鉴权、自动代码生成、等多个模块，支持多业务系统并行开发，&lt;br&gt;支持多服务并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰。核心技术采用Eureka、Fegin、Ribbon、Zuul、Hystrix、Sentinel、Spring、SpringSecurity、Mybatis、SpringBoot、Redis等主要框架和中间件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="springCloud" scheme="//aha.me/categories/springCloud/"/>
    
      <category term="微服务" scheme="//aha.me/categories/springCloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="开源项目" scheme="//aha.me/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>IDEA简单将hexo打包为可运行镜像</title>
    <link href="//aha.me/2020/03/06/IDEA%E7%AE%80%E5%8D%95%E5%B0%86hexo%E6%89%93%E5%8C%85%E4%B8%BA%E5%8F%AF%E8%BF%90%E8%A1%8C%E9%95%9C%E5%83%8F/"/>
    <id>//aha.me/2020/03/06/IDEA简单将hexo打包为可运行镜像/</id>
    <published>2020-03-06T01:55:11.000Z</published>
    <updated>2020-03-23T15:12:54.556Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于GitHub在国内访问时，速度感人，所以放在GitHub上的hexo改放在服务器，但又不想花时间在搭建环境上，因此有了这篇花里胡哨的文章了。</p></blockquote><h2 id="idea安装docker插件"><a href="#idea安装docker插件" class="headerlink" title="idea安装docker插件"></a>idea安装docker插件</h2><p>可参考上篇文章<a href="https://blog.csdn.net/weixin_43647224/article/details/103701575" target="_blank" rel="noopener">IDEA中花里胡哨地使用Docker</a></p><a id="more"></a><h2 id="编写dockerfile"><a href="#编写dockerfile" class="headerlink" title="编写dockerfile"></a>编写dockerfile</h2><p>在你的hexo项目下新建一个dockerfile和docker-compose<br><img src="https://img-blog.csdnimg.cn/20200306094456350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="dockerfile内容"><a href="#dockerfile内容" class="headerlink" title="dockerfile内容"></a>dockerfile内容</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">8</span>-alpine as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /project</span></span><br><span class="line"><span class="bash">COPY . /project/</span></span><br><span class="line"><span class="bash">RUN yarn \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yarn global add hexo-cli \</span></span><br><span class="line"><span class="bash">    &amp;&amp; hexo g</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">FROM nginx:alpine</span></span><br><span class="line"><span class="bash">COPY --from=builder /project/public /usr/share/nginx/html</span></span><br><span class="line"><span class="bash">RUN apk add --no-cache bash</span></span><br></pre></td></tr></table></figure><ul><li>将hexo生成的public文件打进nginx的html目录中<h3 id="docker-compose内容"><a href="#docker-compose内容" class="headerlink" title="docker-compose内容"></a>docker-compose内容</h3></li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># /docker-compose.yml</span></span><br><span class="line"><span class="symbol">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  app:</span></span><br><span class="line"><span class="symbol">    container_name:</span> blog</span><br><span class="line"><span class="symbol">    build:</span></span><br><span class="line"><span class="symbol">      context:</span> ./</span><br><span class="line"><span class="symbol">      dockerfile:</span> Dockerfile</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">    - <span class="string">"8080:80"</span></span><br><span class="line"><span class="symbol">    restart:</span> on-failure</span><br></pre></td></tr></table></figure><p>使用docker-compose运行，并将宿主的8080映射到容器80端口上</p><h3 id="运行docker-compose"><a href="#运行docker-compose" class="headerlink" title="运行docker-compose"></a>运行docker-compose</h3><p><img src="https://img-blog.csdnimg.cn/202003060949112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="成功的标志"><a href="#成功的标志" class="headerlink" title="成功的标志"></a>成功的标志</h3><p><img src="https://img-blog.csdnimg.cn/20200306095005933.png" alt="在这里插入图片描述"><br>可看到正在运行的blog容器和镜像<br>ps:如果你第一次运行时，可能下载node和nginx时间较慢，稍微等待下即可</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于GitHub在国内访问时，速度感人，所以放在GitHub上的hexo改放在服务器，但又不想花时间在搭建环境上，因此有了这篇花里胡哨的文章了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;idea安装docker插件&quot;&gt;&lt;a href=&quot;#idea安装docker插件&quot; class=&quot;headerlink&quot; title=&quot;idea安装docker插件&quot;&gt;&lt;/a&gt;idea安装docker插件&lt;/h2&gt;&lt;p&gt;可参考上篇文章&lt;a href=&quot;https://blog.csdn.net/weixin_43647224/article/details/103701575&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IDEA中花里胡哨地使用Docker&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="项目小结" scheme="//aha.me/categories/%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="Docker" scheme="//aha.me/tags/Docker/"/>
    
      <category term="hexo" scheme="//aha.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mysql常用命令</title>
    <link href="//aha.me/2020/02/25/Mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>//aha.me/2020/02/25/Mysql常用命令/</id>
    <published>2020-02-25T09:47:56.000Z</published>
    <updated>2020-03-23T15:12:54.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql常用命令"><a href="#Mysql常用命令" class="headerlink" title="Mysql常用命令"></a>Mysql常用命令</h1><h2 id="数据定义语句-DDL"><a href="#数据定义语句-DDL" class="headerlink" title="数据定义语句(DDL)"></a>数据定义语句(DDL)</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><ul><li>登录数据库：mysql -uroot -proot</li><li>创建数据库：create database test</li><li>查看所有数据库：show databases</li><li>使用数据库：use test</li><li>查看所有数据表：show tables</li><li>删除数据库：drop database test</li></ul><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><a id="more"></a><ul><li>创建表：create table emp(ename varchar(10),hiredate date,sal decimal(10,2),deptno int(2))  <pre><code>create table dept(deptno int(2),deptname varchar(10))</code></pre></li><li>查看表的定义：desc emp</li><li>查看表定义（详细）：show create table emp \G</li><li>删除表：drop table emp</li><li>修改表字段：alter table emp modify ename varchar(20)</li><li>添加表字段：alter table emp add column age int(3)</li><li>删除表字段：alter table emp drop column age</li><li>字段改名；alter table emp change age age1 int(4)</li><li>修改表名：alter table emp rename emp1</li></ul><h2 id="数据操纵语句-DML"><a href="#数据操纵语句-DML" class="headerlink" title="数据操纵语句(DML)"></a>数据操纵语句(DML)</h2><h3 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h3><ul><li>指定名称插入：insert into emp (ename,hiredate,sal,deptno) values (‘zhangsan’,’2018-01-01’,’2000’,1)</li><li>不指定名称插入：insert into emp values (‘lisi’,’2018-01-01’,’2000’,1)</li><li>批量插入数据：insert into dept values(1,’dept1’),(2,’dept2’)</li></ul><h3 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h3><p>update emp set sal=’4000’,deptno=2 where ename=’zhangsan’</p><h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><p>delete from emp where ename=’zhangsan’</p><h3 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h3><ul><li>查询所有记录：select * from emp</li><li>查询不重复的记录：select distinct deptno from emp</li><li>条件查询：select * from emp where deptno=1 and sal&lt;3000</li><li>排序和限制：select * from emp order by deptno desc limit 2</li><li>聚合(查询部门人数大于1的部门编号)：select deptno,count(1) from emp group by deptno having count(1) &gt; 1</li><li>连接查询：select * from emp e left join dept d on e.deptno=d.deptno</li><li>子查询：select * from emp where deptno in (select deptno from dept)</li><li>记录联合：select deptno from emp union select deptno from dept</li></ul><h2 id="数据控制语句-DCL"><a href="#数据控制语句-DCL" class="headerlink" title="数据控制语句(DCL)"></a>数据控制语句(DCL)</h2><ul><li>授予操作权限：grant select,insert on test.* to ‘test‘@’localhost’ identified by ‘123’</li><li>收回操作权限：revoke insert on test.* from ‘test‘@’localhost’</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="字符集相关"><a href="#字符集相关" class="headerlink" title="字符集相关"></a>字符集相关</h3><ul><li>查看字符集：show variables like ‘character%’</li><li>创建数据库时指定字符集：create database mall character set utf8</li></ul><h3 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h3><ul><li>修改mysql全局时区为北京时间，即我们所在的东8区：set global time_zone = ‘+8:00’;</li><li>修改当前会话时区：set time_zone = ‘+8:00’</li><li>立即生效：flush privileges</li></ul><h3 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h3><ul><li>授予所有数据库的所有权限：grant all privileges on <em>.</em> to z1@localhost identified by ‘123’</li><li>授予所有数据库的所有权限(包括grant)：grant all privileges on <em>.</em> to z1@localhost with grant option</li><li>授予SUPER PROCESS FILE权限：grant super,process,file on <em>.</em> to z3@localhost</li><li>只授予登录权限：grant usage on <em>.</em> to z4@localhost</li><li>查看账号权限：show grants for z1@localhost</li><li>修改自己的密码：set password = password(‘123’)</li><li>管理员修改他人密码：set password for ‘z1‘@’localhost’ = password(‘123’)</li><li>删除账号：drop user z2@localhost</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mysql常用命令&quot;&gt;&lt;a href=&quot;#Mysql常用命令&quot; class=&quot;headerlink&quot; title=&quot;Mysql常用命令&quot;&gt;&lt;/a&gt;Mysql常用命令&lt;/h1&gt;&lt;h2 id=&quot;数据定义语句-DDL&quot;&gt;&lt;a href=&quot;#数据定义语句-DDL&quot; class=&quot;headerlink&quot; title=&quot;数据定义语句(DDL)&quot;&gt;&lt;/a&gt;数据定义语句(DDL)&lt;/h2&gt;&lt;h3 id=&quot;数据库操作&quot;&gt;&lt;a href=&quot;#数据库操作&quot; class=&quot;headerlink&quot; title=&quot;数据库操作&quot;&gt;&lt;/a&gt;数据库操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;登录数据库：mysql -uroot -proot&lt;/li&gt;
&lt;li&gt;创建数据库：create database test&lt;/li&gt;
&lt;li&gt;查看所有数据库：show databases&lt;/li&gt;
&lt;li&gt;使用数据库：use test&lt;/li&gt;
&lt;li&gt;查看所有数据表：show tables&lt;/li&gt;
&lt;li&gt;删除数据库：drop database test&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;表操作&quot;&gt;&lt;a href=&quot;#表操作&quot; class=&quot;headerlink&quot; title=&quot;表操作&quot;&gt;&lt;/a&gt;表操作&lt;/h3&gt;
    
    </summary>
    
      <category term="项目小结" scheme="//aha.me/categories/%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="项目总结" scheme="//aha.me/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
      <category term="Mysql常用命令" scheme="//aha.me/tags/Mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="//aha.me/2020/02/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>//aha.me/2020/02/25/Linux常用命令/</id>
    <published>2020-02-25T09:47:05.000Z</published>
    <updated>2020-03-23T15:12:54.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="系统服务管理"><a href="#系统服务管理" class="headerlink" title="系统服务管理"></a>系统服务管理</h2><h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><ul><li>启动服务：systemctl start httpd.service</li><li>关闭服务：systemctl stop httpd.service</li><li>重启服务（不管是否在运行）：systemctl restart httpd.service</li><li>重新载入配置（不中断服务）：systemctl reload httpd.service</li><li>查看运行状态：systemctl status httpd.service</li><li>设置开机启动：systemctl enable httpd.service</li><li>禁止开机启动：systemctl disable httpd.service</li><li>查看系统安装的服务：systemctl list-units –type=service</li></ul><a id="more"></a><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>列出/home目录下的子目录：ls -l /home<br>列出当前文件夹下所有文件夹及文件大小：ls -lht </p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>显示当前工作目录</p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>切换目录： cd /usr/local</p><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>以指定格式显示日期；date ‘+date:%x time:%X’</p><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><p>修改root密码：passwd root</p><h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><p>普通用户切换到超级用户：su -</p><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>清除屏幕信息</p><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p>查看ls命令的帮助信息：man ls</p><h3 id="who"><a href="#who" class="headerlink" title="who"></a>who</h3><ul><li>查看当前运行级别：who -r</li><li>显示用的登录详情：who -buT</li></ul><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>以MB显示内存使用状态：free -m</p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>查看系统所有进程：ps -ef<br>查看运行的java进程： ps -ef | grep java</p><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>查看系统当前活跃进程信息</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>创建目录</p><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>分页查看<br>每10行显示一屏查看：more -c -10 </p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>查看config文件：cat -Ab config</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><ul><li>删除文件：rm a.txt</li><li>删除文件夹： rm -rf a/</li></ul><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>创建一个文件：touch a.txt</p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>将目录a的文件拷贝到目录b: cp -r /home/a /home/b</p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>移动或覆盖文件：mv a.txt b.txt</p><h2 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h2><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><ul><li>打包文件夹到单独的文件：tar -cvf /opt/etc.tar /etc</li><li>压缩文件夹到压缩文件（gzip）：tar -zcvf /opt/etc.tar.gz /etc</li><li>压缩文件夹到压缩文件（bzip2）：tar -jcvf /opt/etc.tar.bz2 /etc</li><li>查阅压缩包中内容（gzip）：tar -ztvf /opt/etc.tar.gz /etc</li><li>解压文件到当前目录（gzip）：tar -zxvf /opt/etc.tar.gz</li></ul><h2 id="磁盘和网络管理"><a href="#磁盘和网络管理" class="headerlink" title="磁盘和网络管理"></a>磁盘和网络管理</h2><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>查看磁盘占用情况：df -hT</p><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><p>查看当前网络接口状态</p><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><ul><li>查看路由信息：netstat -rn</li><li>查看所有有效TCP连接：netstat -an</li><li>查看系统中启动的监听服务：netstat -tulnp</li><li>查看处于连接状态的系统资源信息：netstat -atunp</li></ul><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p>从网络上下载软件</p><h2 id="软件的安装与管理"><a href="#软件的安装与管理" class="headerlink" title="软件的安装与管理"></a>软件的安装与管理</h2><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><ul><li>安装软件包：rpm -ivh nginx-1.12.2-2.el7.x86_64.rpm</li><li>模糊搜索软件包：rpm -qa | grep nginx</li><li>精确查找软件包：rpm -qa nginx</li><li>查询软件包的安装路径：rpm -ql nginx-1.12.2-2.el7.x86_64</li><li>查看软件包的概要信息：rpm -qi nginx-1.12.2-2.el7.x86_64</li><li>验证软件包内容和安装文件是否一致：rpm -V nginx-1.12.2-2.el7.x86_64</li><li>更新软件包：rpm -Uvh nginx-1.12.2-2.el7.x86_64</li><li>删除软件包：rpm -e nginx-1.12.2-2.el7.x86_64</li></ul><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><ul><li>安装软件包： yum install nginx</li><li>检查可以更新的软件包：yum check-update</li><li>更新指定的软件包：yum update nginx</li><li>在资源库中查找软件包信息：yum info nginx*</li><li>列出已经安装的所有软件包：yum info installed</li><li>列出软件包名称：yum list redis*</li><li>模糊搜索软件包：yum search redis</li></ul><h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h3><ul><li>开启防火墙：systemctl start iptables.service</li><li>关闭防火墙：systemctl stop iptables.service</li><li>查看防火墙状态：systemctl status iptables.service</li><li>设置开机启动：systemctl enable iptables.service</li><li>禁用开机启动：systemctl disable iptables.service</li><li>查看filter表的链信息：iptables -L -n</li><li>查看NAT表的链信息：iptables -t nat -L -n</li><li>清除防火墙所有规则：iptables -F;iptables -X;iptables -Z;</li><li>添加过滤规则（开发80端口）：iptables -I INPUT -p tcp –dport 80 -j ACCEPT</li><li>查找规则所做行号：iptables -L INPUT –line-numbers -n</li><li>根据行号删除过滤规则：iptables -D INPUT 1</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h1&gt;&lt;h2 id=&quot;系统服务管理&quot;&gt;&lt;a href=&quot;#系统服务管理&quot; class=&quot;headerlink&quot; title=&quot;系统服务管理&quot;&gt;&lt;/a&gt;系统服务管理&lt;/h2&gt;&lt;h3 id=&quot;systemctl&quot;&gt;&lt;a href=&quot;#systemctl&quot; class=&quot;headerlink&quot; title=&quot;systemctl&quot;&gt;&lt;/a&gt;systemctl&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;启动服务：systemctl start httpd.service&lt;/li&gt;
&lt;li&gt;关闭服务：systemctl stop httpd.service&lt;/li&gt;
&lt;li&gt;重启服务（不管是否在运行）：systemctl restart httpd.service&lt;/li&gt;
&lt;li&gt;重新载入配置（不中断服务）：systemctl reload httpd.service&lt;/li&gt;
&lt;li&gt;查看运行状态：systemctl status httpd.service&lt;/li&gt;
&lt;li&gt;设置开机启动：systemctl enable httpd.service&lt;/li&gt;
&lt;li&gt;禁止开机启动：systemctl disable httpd.service&lt;/li&gt;
&lt;li&gt;查看系统安装的服务：systemctl list-units –type=service&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="项目小结" scheme="//aha.me/categories/%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="项目总结" scheme="//aha.me/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
      <category term="Linux常用命令" scheme="//aha.me/tags/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门手册</title>
    <link href="//aha.me/2020/02/25/Docker%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/"/>
    <id>//aha.me/2020/02/25/Docker入门手册/</id>
    <published>2020-02-25T09:46:02.000Z</published>
    <updated>2020-03-23T15:12:54.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker入门手册"><a href="#Docker入门手册" class="headerlink" title="Docker入门手册"></a>Docker入门手册</h1><h2 id="Docker-镜像常用命令"><a href="#Docker-镜像常用命令" class="headerlink" title="Docker 镜像常用命令"></a>Docker 镜像常用命令</h2><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker search java</span></span><br></pre></td></tr></table></figure><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- docker pull <span class="symbol">java:</span><span class="number">8</span></span><br><span class="line">- docker pull <span class="function"><span class="keyword">macro</span><span class="title">/</span></span>eureka-<span class="symbol">server:</span><span class="number">0.0</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><p>docker images</p><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> docker rmi java</span></span><br><span class="line"><span class="ruby">- docker rmi -f java </span></span><br><span class="line"><span class="ruby">- docker rmi -f $(docker images)</span></span><br></pre></td></tr></table></figure><h2 id="Docker-容器常用命令"><a href="#Docker-容器常用命令" class="headerlink" title="Docker 容器常用命令"></a>Docker 容器常用命令</h2><h3 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d -p 91:80 nginx</span></span><br></pre></td></tr></table></figure><h3 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> stop <span class="variable">$ContainerId</span></span><br></pre></td></tr></table></figure><h3 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> <span class="variable">$ContainerId</span></span><br></pre></td></tr></table></figure><h3 id="启动已停止的容器"><a href="#启动已停止的容器" class="headerlink" title="启动已停止的容器"></a>启动已停止的容器</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> start <span class="variable">$ContainerId</span></span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- docker inspect <span class="params">--format</span> <span class="string">"&#123;&#123;.State.Pid&#125;&#125;"</span> $ContainerId</span><br><span class="line">- nsenter <span class="params">--target</span> <span class="string">"$pid"</span> <span class="params">--mount</span> <span class="params">--uts</span> <span class="params">--ipc</span> <span class="params">--net</span> <span class="params">--pid</span></span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> docker rm $ContainerId</span></span><br><span class="line"><span class="ruby">- docker rm -f $(docker ps -a -q)</span></span><br></pre></td></tr></table></figure><h3 id="查看启动错误日志"><a href="#查看启动错误日志" class="headerlink" title="查看启动错误日志"></a>查看启动错误日志</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> logs <span class="variable">$ContainerIdName</span>(或者<span class="variable">$ContainerId</span>)</span><br></pre></td></tr></table></figure><h3 id="查看容器的IP地址（172-17-0-）"><a href="#查看容器的IP地址（172-17-0-）" class="headerlink" title="查看容器的IP地址（172.17.0.*）"></a>查看容器的IP地址（172.17.0.*）</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --<span class="keyword">format</span> <span class="string">'&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;'</span> $ContainerId</span><br></pre></td></tr></table></figure><h3 id="同步宿主机时间到容器"><a href="#同步宿主机时间到容器" class="headerlink" title="同步宿主机时间到容器"></a>同步宿主机时间到容器</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /etc/localtime <span class="variable">$ContainerName</span><span class="symbol">:/etc/</span></span><br></pre></td></tr></table></figure><h3 id="在宿主机查看docker使用cpu、内存、网络、io情况"><a href="#在宿主机查看docker使用cpu、内存、网络、io情况" class="headerlink" title="在宿主机查看docker使用cpu、内存、网络、io情况"></a>在宿主机查看docker使用cpu、内存、网络、io情况</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 查看指定容器情况：docker stats $ContainerName</span></span><br><span class="line"><span class="ruby">- 查看所有容器情况：docker stats -a</span></span><br></pre></td></tr></table></figure><h3 id="进入docker内部的bash"><a href="#进入docker内部的bash" class="headerlink" title="进入docker内部的bash"></a>进入docker内部的bash</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it <span class="variable">$ContainerName</span> <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure><h2 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h2><h3 id="Docker-Registry-2-0搭建"><a href="#Docker-Registry-2-0搭建" class="headerlink" title="Docker Registry 2.0搭建"></a>Docker Registry 2.0搭建</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d -p 5000:5000 <span class="attribute">--restart</span>=always --name registry2 registry:2</span><br></pre></td></tr></table></figure><h3 id="推送到私有仓库"><a href="#推送到私有仓库" class="headerlink" title="推送到私有仓库"></a>推送到私有仓库</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push <span class="symbol">localhost:</span><span class="number">5000</span>/<span class="function"><span class="keyword">macro</span><span class="title">/</span></span>eureka-<span class="symbol">server:</span><span class="number">0.0</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="修改镜像标签"><a href="#修改镜像标签" class="headerlink" title="修改镜像标签"></a>修改镜像标签</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag <span class="function"><span class="keyword">macro</span><span class="title">/</span></span>eureka-<span class="symbol">server:</span><span class="number">0.0</span>.<span class="number">1</span> <span class="symbol">localhost:</span><span class="number">5000</span>/<span class="function"><span class="keyword">macro</span><span class="title">/</span></span>eureka-<span class="symbol">server:</span><span class="number">0.0</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="使用maven构建Docker镜像"><a href="#使用maven构建Docker镜像" class="headerlink" title="使用maven构建Docker镜像"></a>使用maven构建Docker镜像</h2><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- command：mvn clean package <span class="symbol">docker:</span>build</span><br><span class="line">- tip：</span><br><span class="line">    Linux服务器需要开启远程<span class="symbol">api:</span>vi /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">docker</span>.<span class="title">service</span></span></span><br><span class="line">    修改为：ExecStart=<span class="regexp">/usr/bin</span><span class="regexp">/dockerd -H tcp:/</span><span class="regexp">/0.0.0.0:2375 -H unix:/</span><span class="regexp">/var/run</span><span class="regexp">/docker.sock</span></span><br></pre></td></tr></table></figure><h3 id="推送镜像到私有仓库"><a href="#推送镜像到私有仓库" class="headerlink" title="推送镜像到私有仓库"></a>推送镜像到私有仓库</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- command：mvn clean package <span class="symbol">docker:</span>build -DpushImage</span><br><span class="line">- tip：</span><br><span class="line">    pom.xml修改&lt;imageName&gt;<span class="number">192.168</span>.<span class="number">1.71</span>:<span class="number">5000</span>/<span class="function"><span class="keyword">macro</span><span class="title">/</span></span>$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;<span class="regexp">/imageName&gt;</span></span><br><span class="line"><span class="regexp">- tip：</span></span><br><span class="line"><span class="regexp">    docker要支持http:echo '&#123; "insecure-registries":["39.98.190.128:5000"] &#125;' &gt; /etc</span><span class="regexp">/docker/daemon</span>.json</span><br></pre></td></tr></table></figure><h3 id="修改Docker镜像存放位置"><a href="#修改Docker镜像存放位置" class="headerlink" title="修改Docker镜像存放位置"></a>修改Docker镜像存放位置</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 查看Docker的存放位置：docker info | grep <span class="string">"Docker Root Dir"</span>（默认为/var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>）</span></span><br><span class="line"><span class="number">2</span>. 关闭Docker服务：systemctl stop docker</span><br><span class="line"><span class="number">3</span>. 移动目录到目标路径：mv /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span> /<span class="title">root</span>/<span class="title">data</span>/<span class="title">docker</span></span></span><br><span class="line"><span class="number">4</span>. 建立软连接：ln -s /root/data/docker /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></span><br></pre></td></tr></table></figure><h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker compose"></a>Docker compose</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 下载地址：<span class="string">https:</span><span class="comment">//github.com/docker/compose/releases</span></span><br><span class="line"><span class="number">2.</span> 安装地址：<span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line"><span class="number">3.</span> 设置为可执行：sudo chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line"><span class="number">4.</span> 测试是否安装成功：docker-compose --version</span><br></pre></td></tr></table></figure><h3 id="安装命令补全工具"><a href="#安装命令补全工具" class="headerlink" title="安装命令补全工具"></a>安装命令补全工具</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/docker/</span>compose<span class="regexp">/1.22.0/</span>contrib<span class="regexp">/completion/</span>bash<span class="regexp">/docker-compose -o /</span>etc<span class="regexp">/bash_completion.d/</span>docker-compose</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>构建、创建、启动相关容器：docker-compose up</span><br><span class="line"><span class="bullet">- </span>列出所有容器：docker-compose ps</span><br><span class="line"><span class="bullet">- </span>删除指定服务的容器：docker-compose rm eureka</span><br><span class="line"><span class="bullet">- </span>对容器进行动态扩容：docker-compose scale eureka=3</span><br><span class="line"><span class="bullet">- </span>停止相关容器：docker-compose stop eureka</span><br><span class="line"><span class="bullet">- </span>启动相关容器：docker-compose start eureka</span><br></pre></td></tr></table></figure><h3 id="编排SpringCloud微服务"><a href="#编排SpringCloud微服务" class="headerlink" title="编排SpringCloud微服务"></a>编排SpringCloud微服务</h3><h4 id="所使用到的工程"><a href="#所使用到的工程" class="headerlink" title="所使用到的工程"></a>所使用到的工程</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>eureka-server</span><br><span class="line"><span class="bullet">- </span>hello-service</span><br><span class="line"><span class="bullet">- </span>feign-consumer</span><br><span class="line"><span class="bullet">- </span>api-gateway</span><br></pre></td></tr></table></figure><h4 id="编排模式"><a href="#编排模式" class="headerlink" title="编排模式"></a>编排模式</h4><ol><li>编排SpringCloud微服务：见eureka-server/docker-res/docker-compose.yml</li><li>简化SpringCloud微服务编排：见eureka-server/docker-res/docker-compose-simple.yml</li><li>编排高可用的注册中心：见eureka-server/docker-res/docker-compose-eureka.yml</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker入门手册&quot;&gt;&lt;a href=&quot;#Docker入门手册&quot; class=&quot;headerlink&quot; title=&quot;Docker入门手册&quot;&gt;&lt;/a&gt;Docker入门手册&lt;/h1&gt;&lt;h2 id=&quot;Docker-镜像常用命令&quot;&gt;&lt;a href=&quot;#Docker-镜像常用命令&quot; class=&quot;headerlink&quot; title=&quot;Docker 镜像常用命令&quot;&gt;&lt;/a&gt;Docker 镜像常用命令&lt;/h2&gt;&lt;h3 id=&quot;搜索镜像&quot;&gt;&lt;a href=&quot;#搜索镜像&quot; class=&quot;headerlink&quot; title=&quot;搜索镜像&quot;&gt;&lt;/a&gt;搜索镜像&lt;/h3&gt;&lt;figure class=&quot;highlight ebnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;docker search java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;下载镜像&quot;&gt;&lt;a href=&quot;#下载镜像&quot; class=&quot;headerlink&quot; title=&quot;下载镜像&quot;&gt;&lt;/a&gt;下载镜像&lt;/h3&gt;&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- docker pull &lt;span class=&quot;symbol&quot;&gt;java:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- docker pull &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;macro&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;/&lt;/span&gt;&lt;/span&gt;eureka-&lt;span class=&quot;symbol&quot;&gt;server:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="项目小结" scheme="//aha.me/categories/%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="项目总结" scheme="//aha.me/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>IDEA花里胡哨地安全连接到Docker(CA认证方式防止挖矿程序xmrig入侵)</title>
    <link href="//aha.me/2019/12/29/IDEA%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E5%9C%B0%E5%AE%89%E5%85%A8%E8%BF%9E%E6%8E%A5%E5%88%B0Docker-CA%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F%E9%98%B2%E6%AD%A2%E6%8C%96%E7%9F%BF%E7%A8%8B%E5%BA%8Fxmrig%E5%85%A5%E4%BE%B5/"/>
    <id>//aha.me/2019/12/29/IDEA花里胡哨地安全连接到Docker-CA认证方式防止挖矿程序xmrig入侵/</id>
    <published>2019-12-29T14:16:00.000Z</published>
    <updated>2019-12-29T14:16:58.468Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2019/12/29/16f51b28af3b1d47?w=1920&amp;h=1080&amp;f=jpeg&amp;s=199057" alt="在这里插入图片描述"></p><blockquote><p> 在上一篇文章(<a href="https://editor.csdn.net/md/?articleId=103701575" target="_blank" rel="noopener">IDEA中花里胡哨地使用Docker</a>)中使用的是适合内网的方式让IDEA操作docker,嗯.然后如果想让暴露在外网的docker.如何被idea安全连接呢?如何避免被植入矿机?如:xmrig.看来又是篇花里胡哨的文章了</p></blockquote><a id="more"></a><h2 id="配置ca认证"><a href="#配置ca认证" class="headerlink" title="配置ca认证"></a>配置ca认证</h2><p>参考地址(官方):<a href="https://docs.docker.com/engine/security/https/#create-a-ca-server-and-client-keys-with-openssl" target="_blank" rel="noopener">https://docs.docker.com/engine/security/https/#create-a-ca-server-and-client-keys-with-openssl</a></p><blockquote><p>比如我们在腾讯云租了个便宜centos的服务器.并且安装了docker+docker-compose,那么按照下面步骤操作</p></blockquote><ol><li>先在/usr/local目录下创建个文件夹,这里取名叫ca,然后进入ca文件夹中</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> -p /usr/<span class="keyword">local</span>/<span class="keyword">ca</span></span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/<span class="keyword">ca</span></span><br></pre></td></tr></table></figure><ol start="2"><li>依次执行下面的命令,需要输入密码,自由指定,两次输入保持一致并记住即可.因为等下我们要用</li></ol><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -aes256 -out ca-<span class="type">key</span>.pem <span class="number">4096</span></span><br></pre></td></tr></table></figure><ol start="3"><li>先输入上面设置的密码,然后根据提示分别输入国家,省份,城市,组织,等一系列信息</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -<span class="keyword">new</span> -x509 -days <span class="number">365</span> -key <span class="keyword">ca</span>-key.pem -<span class="built_in">sha256</span> -out <span class="keyword">ca</span>.pem</span><br></pre></td></tr></table></figure><ol start="4"><li>生成server-key.pem</li></ol><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out server-<span class="type">key</span>.pem <span class="number">4096</span></span><br></pre></td></tr></table></figure><ol start="5"><li>把下面的$Host换成你自己服务器<strong>外网的IP或者域名</strong>:比如:openssl req -subj “/CN=192.168.1.195” -sha256…,我用的是IP</li></ol><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -subj <span class="string">"/CN=192.168.1.195"</span> -sha256 -<span class="keyword">new</span> -key <span class="keyword">server</span>-key.pem -out <span class="keyword">server</span>.csr</span><br></pre></td></tr></table></figure><ol start="6"><li><p>配置白名单,允许哪些ip(以逗号分隔开)可以连接到服务器的docker(条件:只有拥有证书的才可以连接成功),这样配置好之后其他IP也可以访问到.因为不想设置限制IP,所以0.0.0.0(<strong>注意如果用域名话就把 IP:192.168.1.195替换成DNS:域名</strong>)</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo subjectAltName = <span class="built_in">IP</span>:<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.195</span>,<span class="built_in">IP</span>:<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span> &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure></li><li><p>执行下面语句</p></li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo extendedKeyUsage = serverAuth <span class="meta">&gt;&gt; </span>extfile.cnf</span><br></pre></td></tr></table></figure><ol start="8"><li>生成ca-key</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days <span class="number">365</span> -sha256 -<span class="keyword">in</span> server<span class="selector-class">.csr</span> -CA ca<span class="selector-class">.pem</span> -CAkey ca-key<span class="selector-class">.pem</span> \-CAcreateserial -out server-cert<span class="selector-class">.pem</span> -extfile extfile.cnf</span><br></pre></td></tr></table></figure><ol start="9"><li><p>生成客户端所需的key.pem</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out <span class="type">key</span>.pem <span class="number">4096</span></span><br></pre></td></tr></table></figure></li><li><p>执行下面命令</p></li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -subj <span class="string">'/CN=client'</span> -<span class="keyword">new</span> -<span class="built_in">key</span> <span class="built_in">key</span>.pem -out client.csr</span><br></pre></td></tr></table></figure><ol start="11"><li>执行下面命令</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo extendedKeyUsage = clientAuth <span class="meta">&gt;&gt; </span>extfile.cnf</span><br></pre></td></tr></table></figure><ol start="12"><li>生成cert.pem</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days <span class="number">365</span> -sha256 -<span class="keyword">in</span> client<span class="selector-class">.csr</span> -CA ca<span class="selector-class">.pem</span> -CAkey ca-key<span class="selector-class">.pem</span> \-CAcreateserial -out cert<span class="selector-class">.pem</span> -extfile extfile.cnf</span><br></pre></td></tr></table></figure><ol start="13"><li>修改权限</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod -v <span class="number">0400</span> ca-key<span class="selector-class">.pem</span> key<span class="selector-class">.pem</span> server-key.pem</span><br><span class="line">chmod -v <span class="number">0444</span> ca<span class="selector-class">.pem</span> server-cert<span class="selector-class">.pem</span> cert.pem</span><br></pre></td></tr></table></figure><ol start="14"><li>复制到docker目录下</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cp server-*<span class="selector-class">.pem</span>  /etc/docker/</span><br><span class="line">cp ca<span class="selector-class">.pem</span> /etc/docker/</span><br></pre></td></tr></table></figure><ol start="15"><li>修改docker配置文件</li></ol><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim  /<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">docker</span>.<span class="title">service</span></span></span><br></pre></td></tr></table></figure><ol start="16"><li>将ExecStart替换成</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ExecStart=<span class="regexp">/usr/</span>bin<span class="regexp">/dockerd --tlsverify --tlscacert=/</span>etc<span class="regexp">/docker/</span>ca.pem --tlscert=<span class="regexp">/etc/</span>docker<span class="regexp">/server-cert.pem --tlskey=/</span>etc<span class="regexp">/docker/</span>server-key.pem -H tcp:<span class="regexp">//</span><span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2376</span> -H unix:<span class="regexp">//</span><span class="regexp">/var/</span>run<span class="regexp">/docker.sock</span></span><br></pre></td></tr></table></figure><ol start="17"><li>重新加载daemon</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl daemon-reload</span></span><br><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure><ol start="18"><li><p>开放2376端口</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/sbin/iptables</span> -I INPUT -p tcp <span class="params">--dport</span> 2376 -j ACCEPT</span><br><span class="line">iptables-save</span><br></pre></td></tr></table></figure></li><li><p>重启</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service docker restart</span></span><br></pre></td></tr></table></figure></li><li><p>腾讯云安全组放开2376端口<br><img src="https://user-gold-cdn.xitu.io/2019/12/29/16f51b28b199aba5?w=457&amp;h=47&amp;f=png&amp;s=2169" alt="在这里插入图片描述"></p></li><li>然后通过FileZilla Client或者FinalShell将/usr/local/ca文件夹里的拷贝到你本地电脑<br><img src="https://user-gold-cdn.xitu.io/2019/12/29/16f51b28b178f9fa?w=831&amp;h=189&amp;f=png&amp;s=37401" alt="在这里插入图片描述"></li><li>配置IDEA <strong>注意是https</strong><br><img src="https://user-gold-cdn.xitu.io/2019/12/29/16f51b28b1ca12d8?w=685&amp;h=216&amp;f=png&amp;s=20737" alt="在这里插入图片描述"><br><img src="https://user-gold-cdn.xitu.io/2019/12/29/16f51b28b39858ed?w=163&amp;h=91&amp;f=png&amp;s=1536" alt="在这里插入图片描述"><br>ok,欧耶,妈妈再也不担心服务器被当成矿机了.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/12/29/16f51b28af3b1d47?w=1920&amp;amp;h=1080&amp;amp;f=jpeg&amp;amp;s=199057&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 在上一篇文章(&lt;a href=&quot;https://editor.csdn.net/md/?articleId=103701575&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IDEA中花里胡哨地使用Docker&lt;/a&gt;)中使用的是适合内网的方式让IDEA操作docker,嗯.然后如果想让暴露在外网的docker.如何被idea安全连接呢?如何避免被植入矿机?如:xmrig.看来又是篇花里胡哨的文章了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="//aha.me/categories/docker/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="Docker" scheme="//aha.me/tags/Docker/"/>
    
      <category term="IDEA" scheme="//aha.me/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>vue基础</title>
    <link href="//aha.me/2019/12/27/vue%E5%9F%BA%E7%A1%80/"/>
    <id>//aha.me/2019/12/27/vue基础/</id>
    <published>2019-12-27T07:21:22.000Z</published>
    <updated>2020-03-23T15:12:54.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"vue"</span>&gt;</span><br><span class="line">    &lt;button v-<span class="keyword">on</span>:click=<span class="string">"sayHi"</span>&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>也可以这样</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sayHi"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在这里我们使用了 v-on 绑定了 click 事件，并指定了名为 sayHi 的方法</p></blockquote><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>方法必须定义在 Vue 实例的 methods 对象中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#vue'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="actionscript">            message: <span class="string">'Hello World'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 在 `methods` 对象中定义方法</span></span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="actionscript">            sayHi: <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// `this` 在方法里指向当前 Vue 实例</span></span></span><br><span class="line"><span class="actionscript">                alert(<span class="keyword">this</span>.message);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单输入"><a href="#表单输入" class="headerlink" title="表单输入"></a>表单输入</h2><h3 id="什么是双向数据绑定"><a href="#什么是双向数据绑定" class="headerlink" title="什么是双向数据绑定"></a>什么是双向数据绑定</h3><p>Vue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p><h3 id="为什么要实现数据的双向绑定"><a href="#为什么要实现数据的双向绑定" class="headerlink" title="为什么要实现数据的双向绑定"></a>为什么要实现数据的双向绑定</h3><p>在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p><h3 id="在表单中使用双向数据绑定"><a href="#在表单中使用双向数据绑定" class="headerlink" title="在表单中使用双向数据绑定"></a>在表单中使用双向数据绑定</h3><p>你可以用 v-model 指令在表单 <input>、<textarea> 及 </textarea><select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</select></p><blockquote><p>注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue<br>实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p></blockquote><h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    单行文本：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> /&gt;</span>&amp;nbsp;&amp;nbsp;单行文本是：</span><span class="template-variable">&#123;&#123;message&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#vue'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="actionscript">            message: <span class="string">"Hello Vue"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    多行文本：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>&amp;nbsp;&amp;nbsp;多行文本是：</span><span class="template-variable">&#123;&#123;message&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#vue'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="actionscript">            message: <span class="string">"Hello Textarea"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单复选框"><a href="#单复选框" class="headerlink" title="单复选框"></a>单复选框</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    单复选框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span>&amp;nbsp;&amp;nbsp;<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span></span><span class="template-variable">&#123;&#123; checked &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#vue'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="actionscript">            checked: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多复选框"><a href="#多复选框" class="headerlink" title="多复选框"></a>多复选框</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"vue"</span>&gt;</span><br><span class="line">    多复选框：</span><br><span class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"checkbox"</span> id=<span class="string">"jack"</span> value=<span class="string">"Jack"</span> v-model=<span class="string">"checkedNames"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"jack"</span>&gt;Jack&lt;/label&gt;</span><br><span class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"checkbox"</span> id=<span class="string">"john"</span> value=<span class="string">"John"</span> v-model=<span class="string">"checkedNames"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"john"</span>&gt;John&lt;/label&gt;</span><br><span class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"checkbox"</span> id=<span class="string">"mike"</span> value=<span class="string">"Mike"</span> v-model=<span class="string">"checkedNames"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"mike"</span>&gt;Mike&lt;/label&gt;</span><br><span class="line">    &lt;span&gt;选中的值: &#123;&#123; checkedNames &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#vue'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            checkedNames: []</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"vue"</span>&gt;</span><br><span class="line">    单选按钮：</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"radio"</span> id=<span class="string">"one"</span> value=<span class="string">"One"</span> v-model=<span class="string">"picked"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"one"</span>&gt;<span class="keyword">One</span>&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"radio"</span> id=<span class="string">"two"</span> value=<span class="string">"Two"</span> v-model=<span class="string">"picked"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"two"</span>&gt;<span class="keyword">Two</span>&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;span&gt;选中的值: &#123;&#123; picked &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#vue'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="actionscript">            picked: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    下拉框：</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>选中的值: </span><span class="template-variable">&#123;&#123; selected &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#vue'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="actionscript">            selected: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果 v-model 表达式的初始值未能匹配任何选项，<select> 元素将被渲染为“未选中”状态。在 iOS<br>中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</select></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;监听事件&quot;&gt;&lt;a href=&quot;#监听事件&quot; class=&quot;headerlink&quot; title=&quot;监听事件&quot;&gt;&lt;/a&gt;监听事件&lt;/h2&gt;&lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vue&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;button v-&lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;:click=&lt;span class=&quot;string&quot;&gt;&quot;sayHi&quot;&lt;/span&gt;&amp;gt;点我&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以这样&lt;/p&gt;
    
    </summary>
    
      <category term="项目小结" scheme="//aha.me/categories/%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="vue" scheme="//aha.me/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JSON.stringify()和JSON.parse()的作用</title>
    <link href="//aha.me/2019/12/27/JSON-stringify-%E5%92%8CJSON-parse-%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>//aha.me/2019/12/27/JSON-stringify-和JSON-parse-的作用/</id>
    <published>2019-12-27T07:20:16.000Z</published>
    <updated>2020-03-23T15:12:54.411Z</updated>
    
    <content type="html"><![CDATA[<p>(1)JSON.stringify() 从一个对象中解析出字符串</p><p>JSON.stringify({“a”:”1”,”b”:”2”})</p><a id="more"></a><p>结果是：”{“a”:”1”,”b”:”2”}”</p><p>(2)JSON.parse()从一个字符串中解析出JSON对象</p><p>var str = ‘{“a”:”1”,”b”:”2”}’;</p><p>JSON.parse(str);</p><p>结果是：Object{a:”1”,b:”2”}</p><p>应用场景:</p><p>针对(1)，比如后台Java对应的RequestMapping参数列表中的参数为一个对象时，前台多个传输需要经过JSON.stringify()处理，否则会出现参数解析异常。</p><p>针对(2)，比如向后台请求，后台返回一大堆字符串，这时前台页面渲染需要将其以对象的形式展现，这时可以用到JSON.parse()。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(1)JSON.stringify() 从一个对象中解析出字符串&lt;/p&gt;
&lt;p&gt;JSON.stringify({“a”:”1”,”b”:”2”})&lt;/p&gt;
    
    </summary>
    
      <category term="项目小结" scheme="//aha.me/categories/%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="js" scheme="//aha.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云通信im服务端花里胡哨实战</title>
    <link href="//aha.me/2019/12/27/%E8%85%BE%E8%AE%AF%E4%BA%91%E9%80%9A%E4%BF%A1im%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E5%AE%9E%E6%88%98/"/>
    <id>//aha.me/2019/12/27/腾讯云通信im服务端花里胡哨实战/</id>
    <published>2019-12-27T07:18:56.000Z</published>
    <updated>2020-03-23T15:12:54.485Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为公司业务需求要接入腾讯云通信的im服务，做完基础版后有点闲暇时间想总结下。<br><strong>动手集成到自己项目的时候需要注意以下几个点：</strong></p><a id="more"></a><h2 id="1-先根据官方文档调通基本配置的demo，再进行业务代码的开发，例如回调那些也是一样的道理。"><a href="#1-先根据官方文档调通基本配置的demo，再进行业务代码的开发，例如回调那些也是一样的道理。" class="headerlink" title="1.先根据官方文档调通基本配置的demo，再进行业务代码的开发，例如回调那些也是一样的道理。"></a>1.先根据官方文档调通基本配置的demo，再进行业务代码的开发，例如回调那些也是一样的道理。</h2><h2 id="2-文档一定要先过一遍，至少要知道腾讯IM那边能给你提供什么，哪些东西又需要你来处理，用最少的功夫做更多的事。"><a href="#2-文档一定要先过一遍，至少要知道腾讯IM那边能给你提供什么，哪些东西又需要你来处理，用最少的功夫做更多的事。" class="headerlink" title="2.文档一定要先过一遍，至少要知道腾讯IM那边能给你提供什么，哪些东西又需要你来处理，用最少的功夫做更多的事。"></a>2.文档一定要先过一遍，至少要知道腾讯IM那边能给你提供什么，哪些东西又需要你来处理，用最少的功夫做更多的事。</h2><p><strong>服务端用的语言是：java</strong><br>1.磨刀不误砍柴功，先从文档入手，了解清楚要准备什么再开始<a href="https://cloud.tencent.com/document/product/269/37176" target="_blank" rel="noopener">开始使用云通讯</a><br>2.根据文档步骤，新建应用，设置账号，注意集成模式要设置为独立模式<br><img src="https://img-blog.csdnimg.cn/20191116151926926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-生成-UserSig（签名）："><a href="#3-生成-UserSig（签名）：" class="headerlink" title="3.生成 UserSig（签名）："></a>3.生成 UserSig（签名）：</h2><p>这一步主要是根据用户id还有私钥生成 UserSig签名。</p><p>生成 UserSig主要有两种途径：托管生成，服务器生成 UserSig。</p><p>一般都是通过服务器生成，就不累述托管模式了。<br><a href="https://github.com/tencentyun/tls-sig-api-java" target="_blank" rel="noopener">Java版服务端生成源码地址</a></p><p>以maven为例，引入jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tencentyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tls-sig-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用方法生成（这个方法生成的签名默认有效期为180天，也可指定有效期，自己去源码地址的文档翻翻）：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GenTLSSignatureResult <span class="literal">result</span> = tls_sigature.genSig(<span class="number">140000000</span>, <span class="string">"xiaojun"</span>, priKeyContent)</span><br></pre></td></tr></table></figure><p>方法第一个参数是：sdkAppid</p><p>第二个参数：用户id</p><p>第三个参数：密钥内容（自行在控制台下载）</p><blockquote><p> 注意保存好用户id和回调返回的签名，还有签名的有效期，签名过期时及时刷新用户签名并保存。生成签名时jar内报错的话，一般可能是jar包冲突（两个不同版本的jar），需要通过“<exclusions>”屏蔽其中一个。</exclusions></p></blockquote><h2 id="4-导入账号"><a href="#4-导入账号" class="headerlink" title="4.导入账号"></a>4.导入账号</h2><p>生成完UserSig（签名）后便可以调用导入账号接口了，我用的是“单个帐号导入接口”。<br>api的调用没啥好说的，跟着文档的规范定义入参和返参进行调用就好了。<br>码代码前可以先通过这个官网的“ <a href="https://avc.qcloud.com/im/APITester/APITester.html#v4/openim/sendmsg" target="_blank" rel="noopener">REST API在线调试</a>工具调试下。<br>发现其它API的调用逻辑都差不多就不做累述了。</p><h2 id="5-第三方回调"><a href="#5-第三方回调" class="headerlink" title="5.第三方回调"></a>5.第三方回调</h2><p>先贴一张群聊的回调业务流程图（官方的）：<br><img src="https://img-blog.csdnimg.cn/2019111615235660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>回调主要要做的是提供一个回调接口地址，然后把它配置到腾讯云通讯的–&gt;应用列表–&gt;应用配置–&gt;回调配置–&gt;回调URL</p><p>配置好后触发下回调试试回调是否通了，通了的话就可以进行自己聊天记录的储存，脏字过滤，文件储存等回调功能的开发了~</p><blockquote><p>需要注意的是腾讯云通讯的所有事件回调都是调用同一个回调地址，所以需要你自己对不同的回调事件进行区分（可通过回调的“CallbackCommand”字段进行区分）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因为公司业务需求要接入腾讯云通信的im服务，做完基础版后有点闲暇时间想总结下。&lt;br&gt;&lt;strong&gt;动手集成到自己项目的时候需要注意以下几个点：&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术总结" scheme="//aha.me/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="IM" scheme="//aha.me/tags/IM/"/>
    
      <category term="腾讯云" scheme="//aha.me/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>花里胡哨操作maven私服</title>
    <link href="//aha.me/2019/12/27/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E6%93%8D%E4%BD%9Cmaven%E7%A7%81%E6%9C%8D/"/>
    <id>//aha.me/2019/12/27/花里胡哨操作maven私服/</id>
    <published>2019-12-27T07:17:47.000Z</published>
    <updated>2020-03-23T15:12:54.515Z</updated>
    
    <content type="html"><![CDATA[<p>上传maven私服之前我们先，创建个仓库<br><img src="https://img-blog.csdnimg.cn/20191223172416922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><p>创建用户：<br><img src="https://img-blog.csdnimg.cn/20191223172941449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>创建好账户后就可以在右上角切换账户了。</p><p>接着就是配置本地 maven &gt; conf 了，找到自己本机的 maven conf 下的 setting.xml 文件，添加如下信息：<br><img src="https://img-blog.csdnimg.cn/20191223173326851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>kaleldo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">username</span>&gt;</span>kaleldo<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">password</span>&gt;</span>kaleldo<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何将架包上传到maven私服"><a href="#如何将架包上传到maven私服" class="headerlink" title="如何将架包上传到maven私服"></a>如何将架包上传到maven私服</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意限定版本一定为RELEASE,因为上传的对应仓库的存储类型为RELEASE --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定仓库地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此名称要和.m2/settings.xml中设置的ID一致 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>kaleldo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://ip:8081/repository/kaleldo-release/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--发布代码Jar插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--发布源码插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目命令行中执行如下指令<br><img src="https://img-blog.csdnimg.cn/20191223173559381.png" alt="在这里插入图片描述"><br>发布成功后，如何搜索呢？如下图<br><img src="https://img-blog.csdnimg.cn/20191223173622148.png" alt="在这里插入图片描述"><br>发布后如何使用呢，相信很多小伙伴肯定用过阿里云的私服，一样的道理啦：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>club.sscai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ttyy-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ttyy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.10.130:8081/repository/ttyy-release/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上传maven私服之前我们先，创建个仓库&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191223172416922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术总结" scheme="//aha.me/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Docker" scheme="//aha.me/tags/Docker/"/>
    
      <category term="IDEA" scheme="//aha.me/tags/IDEA/"/>
    
      <category term="maven" scheme="//aha.me/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Spring 花里胡哨的@Import用法</title>
    <link href="//aha.me/2019/12/27/Spring-%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E7%9A%84-Import%E7%94%A8%E6%B3%95/"/>
    <id>//aha.me/2019/12/27/Spring-花里胡哨的-Import用法/</id>
    <published>2019-12-27T06:38:15.000Z</published>
    <updated>2019-12-29T14:12:46.634Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2019/12/27/16f4554ef1d622fe?w=1920&amp;h=1080&amp;f=jpeg&amp;s=955492" alt="在这里插入图片描述"></p><h2 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h2><p>@Import 注解支持导入普通 java 类，并将其声明成一个bean。主要用于将多个分散的 java config 配置类融合成一个更大的 config 类。</p><ul><li>@Import 注解在 4.2 之前只支持导入配置类。</li><li>在4.2之后 @Import 注解支持导入普通的 java 类,并将其声明成一个 bean。</li></ul><a id="more"></a><p><strong>@Import 三种使用方式</strong></p><ul><li>直接导入普通的 Java 类。</li><li>配合自定义的 ImportSelector 使用。</li><li>配合 ImportBeanDefinitionRegistrar 使用。</li></ul><p><a href="https://mp.weixin.qq.com/s/e0tO2zogV-L6mXLfaiFCfw" target="_blank" rel="noopener">灵感来源于</a><br><a href="https://github.com/zch2017lrf/springbootTest/tree/48dd1dd7db47cd1248d1666d00f7ad3699b01455" target="_blank" rel="noopener">源码地址</a></p><blockquote><p>假如我们已经建好了一个简单springboot项目</p></blockquote><h3 id="Configuration方式"><a href="#Configuration方式" class="headerlink" title="Configuration方式"></a>Configuration方式</h3><ol><li>创建一个普通的 Circle类</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Circle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个配置类，里面没有显式声明任何的 Bean，然后将刚才创建的 Circle 导入</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@Import</span>(&#123;Circle.class&#125;)</span><br><span class="line"><span class="variable">@Configuration</span></span><br><span class="line">public class MainConfig &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建controller</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Circle circle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/index"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String hello() &#123;</span><br><span class="line">    circle.sayHi();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我真帅"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>访问<a href="http://127.0.0.1:8080/index" target="_blank" rel="noopener">http://127.0.0.1:8080/index</a><br>控制打印出</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Circle</span></span><br></pre></td></tr></table></figure><h3 id="annotation方式"><a href="#annotation方式" class="headerlink" title="annotation方式"></a>annotation方式</h3><ol><li>创建TUserRole</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TUserRole</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"----------TUserRole---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建EnableTUserTRole<br>要让该配置类生效，我们可以定义一个@Enable注解来驱动它。</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@Documented</span></span><br><span class="line"><span class="variable">@Import</span>(&#123;TUserRole.class&#125;)</span><br><span class="line">public <span class="variable">@interface</span> EnableTUserTRole &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>将注解加到main</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@EnableTUserTRole</span></span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line">public class KaleldoApplication &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(KaleldoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>添加到控制器</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TUserRole tUserRole;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Circle circle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/index"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String hello() &#123;</span><br><span class="line">        tUserRole.sayHi();</span><br><span class="line">        circle.sayHi();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我真帅"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>访问<a href="http://127.0.0.1:8080/index" target="_blank" rel="noopener">http://127.0.0.1:8080/index</a><br>打印出</li></ol><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">TUserRole</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="comment">Circle</span></span><br></pre></td></tr></table></figure><h3 id="ImportSelector"><a href="#ImportSelector" class="headerlink" title="ImportSelector"></a>ImportSelector</h3><p>如果定义太多注解,那么在main方法上要添加太多注解….因此使用ImportSelector<br>ImportSelector 是一个接口，该接口中只有一个 selectImports 方法，用于返回全类名数组。所以利用该特性我们可以给容器动态导入 N 个 Bean。<br>因为这两个bean都是通过@Enable类型注解来将配置类注册到IOC容器中，所以我们现在要做的就是将这两个bean一次性都注册到IOC容器中。在Spring中，要将多个类进行注册，可以使用selector的方式。</p><ol><li>创建TRole,TUser</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TUser</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-------------TUser-------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TRole</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"------------TRole------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建ApplicationSelector</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ApplicationSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="built_in">String</span>[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">String</span>[]&#123;</span><br><span class="line">                TRole.<span class="keyword">class</span>.getName(),</span><br><span class="line">                TUser.<span class="keyword">class</span>.getName()</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建EnableApplicationSelector</li></ol><p>通过selectImports方法，我们一次性导入了TRole、TUser这两个类。<br>要让上面的代码生效，我们还需将ApplicationSelector 注册到IOC容器中。同之前的做法，我们可以通过注解的方式来实现。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@Documented</span></span><br><span class="line"><span class="variable">@Import</span>(&#123;ApplicationSelector.class&#125;)</span><br><span class="line">public <span class="variable">@interface</span> EnableApplicationSelector &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>试验<br>添加到main</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@EnableApplicationSelector</span></span><br><span class="line"><span class="variable">@EnableTUserTRole</span></span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line">public class KaleldoApplication &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(KaleldoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TUserRole tUserRole;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TUser tUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TRole tRole;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Circle circle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/index"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String hello() &#123;</span><br><span class="line">        tUserRole.sayHi();</span><br><span class="line">        tUser.sayHi();</span><br><span class="line">        tRole.sayHi();</span><br><span class="line">        circle.sayHi();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我真帅"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问<a href="http://127.0.0.1:8080/index" target="_blank" rel="noopener">http://127.0.0.1:8080/index</a><br>打印</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">TUserRole</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">TUser</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">TRole</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="comment">Circle</span></span><br></pre></td></tr></table></figure><h3 id="ImportBeanDefinitionRegistrar"><a href="#ImportBeanDefinitionRegistrar" class="headerlink" title="ImportBeanDefinitionRegistrar"></a>ImportBeanDefinitionRegistrar</h3><p>ImportBeanDefinitionRegistrar 是一个接口，它可以手动注册bean到容器中，从而可以对类进行个性化的定制。</p><ol><li>创建TMenu</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TMenu</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----------Kaleldo太帅了---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建EImportBeanDefinitionRegistrar</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> registerBeanDefinitions(AnnotationMetadata annotationMetadata, BeanDefinitionRegistry beanDefinitionRegistry) &#123;</span><br><span class="line"></span><br><span class="line">        RootBeanDefinition rootBeanDefinition = <span class="keyword">new</span> RootBeanDefinition(TMenu.<span class="keyword">class</span>);</span><br><span class="line">            <span class="comment">// 注册一个名字叫做 kaleldo 的 bean</span></span><br><span class="line">        beanDefinitionRegistry.registerBeanDefinition(<span class="string">"kaleldo"</span>, rootBeanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>注入ioc</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">@Import</span>(&#123;Circle.class, EImportBeanDefinitionRegistrar.class&#125;)</span><br><span class="line"><span class="variable">@Configuration</span></span><br><span class="line">public class MainConfig &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>试验</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TUserRole tUserRole;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TUser tUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TRole tRole;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Circle circle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = <span class="meta-string">"kaleldo"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> TMenu tMenu;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/index"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String hello() &#123;</span><br><span class="line"></span><br><span class="line">        tUserRole.sayHi();</span><br><span class="line">        tUser.sayHi();</span><br><span class="line">        tRole.sayHi();</span><br><span class="line">        circle.sayHi();</span><br><span class="line">        tMenu.sayHi();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我真帅"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<a href="http://127.0.0.1:8080/index" target="_blank" rel="noopener">http://127.0.0.1:8080/index</a></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">TUserRole</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">TUser</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">TRole</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="comment">Circle</span></span><br><span class="line"><span class="comment"></span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">Kaleldo太帅了</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br></pre></td></tr></table></figure><blockquote><p>欧耶</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/12/27/16f4554ef1d622fe?w=1920&amp;amp;h=1080&amp;amp;f=jpeg&amp;amp;s=955492&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Import&quot;&gt;&lt;a href=&quot;#Import&quot; class=&quot;headerlink&quot; title=&quot;@Import&quot;&gt;&lt;/a&gt;@Import&lt;/h2&gt;&lt;p&gt;@Import 注解支持导入普通 java 类，并将其声明成一个bean。主要用于将多个分散的 java config 配置类融合成一个更大的 config 类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@Import 注解在 4.2 之前只支持导入配置类。&lt;/li&gt;
&lt;li&gt;在4.2之后 @Import 注解支持导入普通的 java 类,并将其声明成一个 bean。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术总结" scheme="//aha.me/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="IDEA" scheme="//aha.me/tags/IDEA/"/>
    
      <category term="spring4" scheme="//aha.me/tags/spring4/"/>
    
  </entry>
  
  <entry>
    <title>spring boot 花里胡哨的热部署(DevTools)</title>
    <link href="//aha.me/2019/12/27/spring-boot-%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E7%9A%84%E7%83%AD%E9%83%A8%E7%BD%B2-DevTools/"/>
    <id>//aha.me/2019/12/27/spring-boot-花里胡哨的热部署-DevTools/</id>
    <published>2019-12-27T06:37:03.000Z</published>
    <updated>2019-12-29T14:12:46.644Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>平日里开发项目中，修改了Java代码或者配置文件的时候，必须手动重启项目才能生效。所谓的热部署就是在你修改了后端代码后不需要手动重启，工具会帮你快速的自动重启是修改生效。原理就是重启项目，但比手动重启快多了,其深层原理是使用了两个ClassLoader，一个Classloader加载那些不会改变的类（第三方Jar包），另一个ClassLoader加载会更改的类，称为restart<br>ClassLoader，这样在有代码更改的时候，原来的restart ClassLoader 被丢弃，重新创建一个restart<br>ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间。<br><a href="http://blog.csdn.net/isea533/article/details/70495714" target="_blank" rel="noopener">灵感来源于1948</a></p></blockquote><a id="more"></a><h2 id="引入Devtools"><a href="#引入Devtools" class="headerlink" title="引入Devtools"></a>引入Devtools</h2><blockquote><p>假如我们已经搭建一个简单的Spring Boot项目，然后引入Spring-Boot-devtools：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机），因为其采用的虚拟机机制，该项重启是很快的。<br>在IDEA中生效还需要修改spring-boot-maven-plugin插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h2><p>使用spring-boot-devtools的应用程序在类路径更改时自动重新启动。当在IDE中工作时，这可能是一个有用的特性，因为它为代码更改提供了非常快速的反馈循环。默认情况下，指向一个文件夹的类路径上的任何条目都会被监控以进行更改。请注意，某些资源(如静态资产和视图模板)不需要重新启动应用程序<br>实际开发中不可能每次改动后都手动Build，因此需要设置Idea的自动编译。</p><blockquote><p>File –&gt; Settings –&gt; Compiler –&gt; Build Project automatically</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f416f6aa0efdcf?w=1041&amp;h=794&amp;f=png&amp;s=140144" alt="在这里插入图片描述"></p><blockquote><p>ctrl + shift + alt + / –&gt; Registry –&gt; 勾选Compiler autoMake allow when app running</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f416f6aa996ccc?w=858&amp;h=692&amp;f=png&amp;s=95372" alt="在这里插入图片描述"></p><h2 id="测试热部署"><a href="#测试热部署" class="headerlink" title="测试热部署"></a>测试热部署</h2><p>创建controller</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.kaleldo</span><span class="selector-class">.kaleldo</span><span class="selector-class">.controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RequestMapping</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RestController</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">RestController</span></span><br><span class="line"><span class="keyword">public</span> class testController &#123;</span><br><span class="line">    @<span class="keyword">RequestMapping</span>("/<span class="keyword">index</span>")</span><br><span class="line">    public String hello()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> "<span class="selector-tag">hello</span> <span class="selector-tag">spring</span> <span class="selector-tag">boot</span>" ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目<br><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f416f6aad07b57?w=227&amp;h=81&amp;f=png&amp;s=3548" alt="在这里插入图片描述"><br>访问<a href="http://127.0.0.1:8080/index" target="_blank" rel="noopener">http://127.0.0.1:8080/index</a></p><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f416f6ac725bf0?w=174&amp;h=47&amp;f=png&amp;s=1191" alt="在这里插入图片描述"></p><blockquote><p>修改内容</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f416f6acbeb9e3?w=350&amp;h=184&amp;f=png&amp;s=7987" alt="在这里插入图片描述"></p><blockquote><p>再次访问</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f416f6aca0eb7f?w=108&amp;h=54&amp;f=png&amp;s=716" alt="在这里插入图片描述"></p><blockquote><p>成功,欧耶</p></blockquote><h2 id="DevTools配置信息"><a href="#DevTools配置信息" class="headerlink" title="DevTools配置信息"></a>DevTools配置信息</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Whether to enable a livereload.com-compatible server.</span></span><br><span class="line">spring.devtools.livereload.<span class="attribute">enabled</span>=<span class="literal">true</span> </span><br><span class="line"><span class="comment"># Server port.</span></span><br><span class="line">spring.devtools.livereload.<span class="attribute">port</span>=35729 </span><br><span class="line"><span class="comment"># Additional patterns that should be excluded from triggering a full restart.</span></span><br><span class="line">spring.devtools.restart.additional-exclude= </span><br><span class="line"><span class="comment"># Additional paths to watch for changes.</span></span><br><span class="line">spring.devtools.restart.additional-paths= </span><br><span class="line"><span class="comment"># Whether to enable automatic restart.</span></span><br><span class="line">spring.devtools.restart.<span class="attribute">enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># Patterns that should be excluded from triggering a full restart.</span></span><br><span class="line">spring.devtools.restart.<span class="attribute">exclude</span>=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties,META-INF/build-info.properties</span><br><span class="line"><span class="comment"># Whether to log the condition evaluation delta upon restart.</span></span><br><span class="line">spring.devtools.restart.<span class="attribute">log-condition-evaluation-delta</span>=<span class="literal">true</span> </span><br><span class="line"><span class="comment"># Amount of time to wait between polling for classpath changes.</span></span><br><span class="line">spring.devtools.restart.<span class="attribute">poll-interval</span>=1s </span><br><span class="line"><span class="comment"># Amount of quiet time required without any classpath changes before a restart is triggered.</span></span><br><span class="line">spring.devtools.restart.<span class="attribute">quiet-period</span>=400ms </span><br><span class="line"><span class="comment"># Name of a specific file that, when changed, triggers the restart check. If not specified, any classpath file change triggers the restart.</span></span><br><span class="line">spring.devtools.restart.trigger-file=</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;平日里开发项目中，修改了Java代码或者配置文件的时候，必须手动重启项目才能生效。所谓的热部署就是在你修改了后端代码后不需要手动重启，工具会帮你快速的自动重启是修改生效。原理就是重启项目，但比手动重启快多了,其深层原理是使用了两个ClassLoader，一个Classloader加载那些不会改变的类（第三方Jar包），另一个ClassLoader加载会更改的类，称为restart&lt;br&gt;ClassLoader，这样在有代码更改的时候，原来的restart ClassLoader 被丢弃，重新创建一个restart&lt;br&gt;ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间。&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/isea533/article/details/70495714&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;灵感来源于1948&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="直播项目技术总结" scheme="//aha.me/categories/%E7%9B%B4%E6%92%AD%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="Docker" scheme="//aha.me/tags/Docker/"/>
    
      <category term="IDEA" scheme="//aha.me/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Centos7部署yapi</title>
    <link href="//aha.me/2019/12/27/Centos7%E9%83%A8%E7%BD%B2yapi/"/>
    <id>//aha.me/2019/12/27/Centos7部署yapi/</id>
    <published>2019-12-27T06:35:02.000Z</published>
    <updated>2019-12-29T14:12:46.628Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Centos7部署yapi">TOC</a></p><h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><ul><li>mongodb</li><li>node</li><li>pm2</li><li>yapi</li></ul><h2 id="mongodb安装步骤"><a href="#mongodb安装步骤" class="headerlink" title="mongodb安装步骤"></a>mongodb安装步骤</h2><a id="more"></a><blockquote><p>1.配置MongoDB的yum源<br>vim /etc/yum.repos.d/mongodb-org-3.4.repo</p></blockquote><p>#添加以下内容：<br>[mongodb-org-3.4]<br>name=MongoDB Repository<br>baseurl=<a href="https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/" target="_blank" rel="noopener">https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/</a><br>gpgcheck=1<br>enabled=1<br>gpgkey=<a href="https://www.mongodb.org/static/pgp/server-3.4.asc" target="_blank" rel="noopener">https://www.mongodb.org/static/pgp/server-3.4.asc</a><br>这里可以修改 gpgcheck=0, 省去gpg验证<br>[root@localhost ~]# yum makecache<br>2.安装MongoDB<br>yum -y install mongodb-org<br>3.查看mongo安装位置<br>whereis mongod<br>4.查看修改配置文件 ：<br>vim /etc/mongod.conf<br>5.启动MongoDB<br>systemctl start mongod.service</p><h2 id="node部署"><a href="#node部署" class="headerlink" title="node部署"></a>node部署</h2><blockquote><p>1.获取资源 curl -sL <a href="https://rpm.nodesource.com/setup_8.x" target="_blank" rel="noopener">https://rpm.nodesource.com/setup_8.x</a> | bash -<br>2.安装 yum install -y nodejs<br>3.查看node&amp;npm版本 node -v npm -v</p></blockquote><h2 id="pm2安装"><a href="#pm2安装" class="headerlink" title="pm2安装"></a>pm2安装</h2><blockquote><p>1.全局安装，npm install -g pm2<br>2.保存当前进程状态，pm2 save<br>3.生成开机自启动服务，pm2 startup<br>4.查看启动项，systemctl list-unit-files | grep enable</p></blockquote><h2 id="部署YApi"><a href="#部署YApi" class="headerlink" title="部署YApi"></a>部署YApi</h2><blockquote><p>1 安装<br>1). npm install -g yapi-cli –registry<br><a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br> 2). yapi server</p><p>2.根据提示，浏览器访问 http://部署YApi服务器的IP:9090</p><p>3.填写完信息后，点击“开始部署”。（大概等待1分钟）</p><p>1). 退出当前状态 CTRL + C 2).切换到部署目录下 3).启动服务 node vendors/server/app.js<br>4).直接访问 http://部署YApi服务器的IP/login</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@&lt;a href=&quot;Centos7部署yapi&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;生产环境&quot;&gt;&lt;a href=&quot;#生产环境&quot; class=&quot;headerlink&quot; title=&quot;生产环境&quot;&gt;&lt;/a&gt;生产环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;li&gt;node&lt;/li&gt;
&lt;li&gt;pm2&lt;/li&gt;
&lt;li&gt;yapi&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;mongodb安装步骤&quot;&gt;&lt;a href=&quot;#mongodb安装步骤&quot; class=&quot;headerlink&quot; title=&quot;mongodb安装步骤&quot;&gt;&lt;/a&gt;mongodb安装步骤&lt;/h2&gt;
    
    </summary>
    
      <category term="项目技术总结" scheme="//aha.me/categories/%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="虚拟机" scheme="//aha.me/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="接口文档" scheme="//aha.me/tags/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
    
      <category term="yapi" scheme="//aha.me/tags/yapi/"/>
    
  </entry>
  
  <entry>
    <title>maven私服,花里胡哨的搭建</title>
    <link href="//aha.me/2019/12/27/maven%E7%A7%81%E6%9C%8D-%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>//aha.me/2019/12/27/maven私服-花里胡哨的搭建/</id>
    <published>2019-12-27T06:33:54.000Z</published>
    <updated>2019-12-29T14:12:46.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为何用到Maven私服？"><a href="#为何用到Maven私服？" class="headerlink" title="为何用到Maven私服？"></a>为何用到Maven私服？</h2><blockquote><p>在实际开发中，项目中可能会用到第三方的jar、内部通讯的服务接口都会打入到公司的私服中。</p></blockquote><p>我们从项目实际开发来看：</p><ol><li>一些无法从外部仓库下载的构件，例如内部的项目还能部署到私服上，以便供其他依赖项目使用。</li><li><p>为了节省带宽和时间，在局域网内架设一个私有的仓库服务器，用其代理所有外部的远程仓库。当本地Maven项目需要下载构件时，先去私服请求，如果私服没有，则再去远程仓库请求，从远程仓库下载构件后，把构件缓存在私服上。这样，及时暂时没有Internet链接，由于私服已经缓存了大量构件，整个项目还是可以正常使用的。同时，也降低了中央仓库的符合。</p><a id="more"></a></li></ol><h2 id="方法1-下载一个nexus3的镜像"><a href="#方法1-下载一个nexus3的镜像" class="headerlink" title="方法1:下载一个nexus3的镜像"></a>方法1:下载一个nexus3的镜像</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">docker</span> pull sona<span class="keyword">type</span>/nexus3</span><br></pre></td></tr></table></figure><ul><li>将容器内部/var/nexus-data挂载到主机 /home/maven/data目录</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8881<span class="function">:8081</span> <span class="params">--name</span> nexus -v  <span class="string">/home/maven/data</span>:<span class="string">/var/nexus-data</span> <span class="params">--restart=always</span> sonatype/nexus3</span><br></pre></td></tr></table></figure><h2 id="方法2-docker-compose启动"><a href="#方法2-docker-compose启动" class="headerlink" title="方法2:docker-compose启动"></a>方法2:docker-compose启动</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line">    <span class="meta">#nexus容器</span></span><br><span class="line"><span class="symbol">  nexus:</span></span><br><span class="line">    <span class="meta">#使用的镜像</span></span><br><span class="line"><span class="symbol">    image:</span> sonatype/nexus3</span><br><span class="line"><span class="symbol">    container_name:</span> nexus</span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line">    <span class="meta">#容器的映射端口</span></span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">8081</span>:<span class="number">8081</span></span><br><span class="line">    <span class="meta">#定义挂载点</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="meta-keyword">/home/</span>maven/data:<span class="meta-keyword">/var/</span>nexus-data</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行命令</span><br><span class="line">docker-compose up -<span class="built_in">d</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f4007a7052d3ab?w=765&amp;h=136&amp;f=png&amp;s=15534" alt="在这里插入图片描述"><br>ok，启动后浏览器访问一下 <a href="http://ip:8081" target="_blank" rel="noopener">http://ip:8081</a><br><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f4007a71019318?w=955&amp;h=193&amp;f=png&amp;s=21029" alt="在这里插入图片描述"></p><blockquote><p>默认登陆账号 admin admin123</p></blockquote><blockquote><p>注意，这个时候你可能会遇到如下这个错误：<br>Incorrect username or password, or no permission to use the application.</p></blockquote><p>maven私服登录的时候默认是不能使用明文密码，要使用密文密码，一般在你创建容器的目录下，比如 root/nexus-data/admin.password ，注意，需要进入容器中找，见下方指令与图</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f4007a71478876?w=582&amp;h=94&amp;f=png&amp;s=10796" alt="在这里插入图片描述"></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_5_centos maven]# docker exec -it nexus /bin/bash</span><br><span class="line">bash<span class="number">-4.4</span>$ cd /nexus-data/</span><br><span class="line">bash<span class="number">-4.4</span>$ cat admin.password</span><br><span class="line"><span class="number">54948</span>f3b-c748<span class="number">-44</span>ec<span class="number">-8782</span><span class="number">-09</span>ad2c650e8bbash<span class="number">-4.4</span>$</span><br></pre></td></tr></table></figure><p>去掉后面的 bash-4.2$,54948f3b-c748-44ec-8782-09ad2c650e8b 即为密码。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f4007a753f0f8a?w=958&amp;h=927&amp;f=png&amp;s=63933" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为何用到Maven私服？&quot;&gt;&lt;a href=&quot;#为何用到Maven私服？&quot; class=&quot;headerlink&quot; title=&quot;为何用到Maven私服？&quot;&gt;&lt;/a&gt;为何用到Maven私服？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在实际开发中，项目中可能会用到第三方的jar、内部通讯的服务接口都会打入到公司的私服中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们从项目实际开发来看：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一些无法从外部仓库下载的构件，例如内部的项目还能部署到私服上，以便供其他依赖项目使用。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了节省带宽和时间，在局域网内架设一个私有的仓库服务器，用其代理所有外部的远程仓库。当本地Maven项目需要下载构件时，先去私服请求，如果私服没有，则再去远程仓库请求，从远程仓库下载构件后，把构件缓存在私服上。这样，及时暂时没有Internet链接，由于私服已经缓存了大量构件，整个项目还是可以正常使用的。同时，也降低了中央仓库的符合。&lt;/p&gt;
    
    </summary>
    
      <category term="直播项目技术总结" scheme="//aha.me/categories/%E7%9B%B4%E6%92%AD%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="虚拟机" scheme="//aha.me/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="Docker" scheme="//aha.me/tags/Docker/"/>
    
      <category term="MAVEN" scheme="//aha.me/tags/MAVEN/"/>
    
  </entry>
  
  <entry>
    <title>IDEA中花里胡哨地使用Docker</title>
    <link href="//aha.me/2019/12/27/IDEA%E4%B8%AD%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E5%9C%B0%E4%BD%BF%E7%94%A8Docker/"/>
    <id>//aha.me/2019/12/27/IDEA中花里胡哨地使用Docker/</id>
    <published>2019-12-27T06:32:24.000Z</published>
    <updated>2019-12-29T14:12:46.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker开启远程访问"><a href="#Docker开启远程访问" class="headerlink" title="Docker开启远程访问"></a>Docker开启远程访问</h2><p>假如我在腾讯云租了个便宜CentOS虚拟机且安装好了Docker，我们可以修改Docker的配置，开启远程访问权限：</p><a id="more"></a><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改Docker配置</span></span><br><span class="line">vi /<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">docker</span>.<span class="title">service</span></span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f400701e687737?w=658&amp;h=194&amp;f=png&amp;s=16176" alt="在这里插入图片描述"></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改保存后，重启Docker服务</span><br><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><p>重启后，验证下2375端口是否是通的：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">curl</span> <span class="number">127.0.0.1:2375</span>/info</span><br></pre></td></tr></table></figure><p>如果返回一些json字符,则成功,否则你还是退群吧</p><h2 id="IDEA使用Docker插件"><a href="#IDEA使用Docker插件" class="headerlink" title="IDEA使用Docker插件"></a>IDEA使用Docker插件</h2><p>IDEA Ultimate版本已经默认安装了Docker插件（没有的话去插件市场下载安装下就可以了）。点击IDEA -&gt; File -&gt; Settings… -&gt; Build,Execution,Deployment -&gt; Docker：<br>刚好我的没有,所以<br><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f400701ebfe346?w=1041&amp;h=794&amp;f=png&amp;s=171024" alt="在这里插入图片描述"><br>填写远程Docker地址，如果显示Connection Successfully说明连接远程Docker服务成功<br><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f400701f05ab35?w=1041&amp;h=794&amp;f=png&amp;s=85687" alt="在这里插入图片描述"></p><h2 id="将springboot打包到docker上"><a href="#将springboot打包到docker上" class="headerlink" title="将springboot打包到docker上"></a>将springboot打包到docker上</h2><blockquote><p>新建springboot项目</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f4007020674513?w=868&amp;h=776&amp;f=png&amp;s=50205" alt="在这里插入图片描述"></p><blockquote><p>pom.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kaleldo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaleldo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>kaleldo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后用maven打包，打包后项目根目录的target下会有如下kaleldo-0.0.1-SNAPSHOT.jar：<br><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f4007020eebadc?w=1920&amp;h=1048&amp;f=png&amp;s=261462" alt="在这里插入图片描述"><br>在项目根目录下新建Dockerfile，内容如下所示：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>u212-jre</span><br><span class="line"><span class="keyword">MAINTAINER</span> kaleldo <span class="number">1158809285</span>@qq.com</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> target/kaleldo-0.0.1-SNAPSHOT.jar /kaleldo-0.0.1.jar</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"/kaleldo-0.0.1.jar"</span>]</span></span><br></pre></td></tr></table></figure><p>然后点击IDEA -&gt; Run -&gt; Edit Configrations…</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f4007021d39861?w=1092&amp;h=758&amp;f=png&amp;s=88251" alt="在这里插入图片描述"></p><p>选择远程的Docker服务，填写镜像标签内容，点击保存后，运行：</p><blockquote><p>查看镜像<br><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f40070481bfcab?w=898&amp;h=308&amp;f=png&amp;s=76398" alt="在这里插入图片描述"><br>成功</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker开启远程访问&quot;&gt;&lt;a href=&quot;#Docker开启远程访问&quot; class=&quot;headerlink&quot; title=&quot;Docker开启远程访问&quot;&gt;&lt;/a&gt;Docker开启远程访问&lt;/h2&gt;&lt;p&gt;假如我在腾讯云租了个便宜CentOS虚拟机且安装好了Docker，我们可以修改Docker的配置，开启远程访问权限：&lt;/p&gt;
    
    </summary>
    
      <category term="直播项目技术总结" scheme="//aha.me/categories/%E7%9B%B4%E6%92%AD%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="虚拟机" scheme="//aha.me/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="Docker" scheme="//aha.me/tags/Docker/"/>
    
      <category term="IDEA" scheme="//aha.me/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>docker花里胡哨搭建ActiveMQ及启用延时队列</title>
    <link href="//aha.me/2019/12/27/docker%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E6%90%AD%E5%BB%BAActiveMQ%E5%8F%8A%E5%90%AF%E7%94%A8%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/"/>
    <id>//aha.me/2019/12/27/docker花里胡哨搭建ActiveMQ及启用延时队列/</id>
    <published>2019-12-27T06:31:16.000Z</published>
    <updated>2019-12-29T14:12:46.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载MQ"><a href="#下载MQ" class="headerlink" title="下载MQ"></a>下载MQ</h2><blockquote><p>为什么有这篇文章呢?因为公司想在直播中的房间定时推送消息,因此想到用MQ的延时队列,定时推送消息.嗯,先用单机版进行试验</p></blockquote><p>假如我们在腾讯云租了个便宜虚拟机,并在上面装好docker和docker-compose<br>docker-compose.yml</p><a id="more"></a><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line">    <span class="meta">#activemq容器</span></span><br><span class="line"><span class="symbol">  myactivemq:</span></span><br><span class="line">    <span class="meta">#使用的镜像</span></span><br><span class="line"><span class="symbol">    image:</span> webcenter/activemq</span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line">    <span class="meta">#容器的映射端口</span></span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">61613</span>:<span class="number">61613</span></span><br><span class="line">      - <span class="number">61616</span>:<span class="number">61616</span></span><br><span class="line">      - <span class="number">8161</span>:<span class="number">8161</span></span><br><span class="line">    <span class="meta">#定义挂载点</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="meta-keyword">/home/</span>vsftpd<span class="meta-keyword">/leo/</span>var<span class="meta-keyword">/log/</span>activemq:<span class="meta-keyword">/var/</span>log/activemq</span><br><span class="line">    <span class="meta">#环境变量</span></span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line">      - ACTIVEMQ_ADMIN_LOGIN=admin</span><br><span class="line">      - ACTIVEMQ_ADMIN_PASSWORD=admin</span><br><span class="line">      - ACTIVEMQ_CONFIG_MINMEMORY=<span class="number">512</span></span><br><span class="line">      - ACTIVEMQ_CONFIG_MAXMEMORY=<span class="number">2048</span></span><br><span class="line">      - TZ=Asia/Shanghai</span><br></pre></td></tr></table></figure><ul><li>新建/home/vsftpd/leo/var/log/activemq目录赋予读写权限</li><li>随便在某个目录创建docker-compose.yml文件</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">touch</span> <span class="selector-tag">docker-compose</span><span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure><ul><li>修改里面内容,复制粘贴上面内容</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vim</span> <span class="selector-tag">docker-compose</span><span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure><ul><li>OK,启动</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f400551565a9f8?w=487&amp;h=55&amp;f=png&amp;s=4303" alt="在这里插入图片描述"></p><h2 id="启动延时队列"><a href="#启动延时队列" class="headerlink" title="启动延时队列"></a>启动延时队列</h2><ul><li>进入mq</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> mq /bin/bash</span><br></pre></td></tr></table></figure><ul><li>修改activemq.xml内容</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> <span class="keyword">conf</span>/activemq.xml</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f4005519039a3f?w=938&amp;h=79&amp;f=png&amp;s=7769" alt="在这里插入图片描述"><br>然后重启mq即可</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载MQ&quot;&gt;&lt;a href=&quot;#下载MQ&quot; class=&quot;headerlink&quot; title=&quot;下载MQ&quot;&gt;&lt;/a&gt;下载MQ&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;为什么有这篇文章呢?因为公司想在直播中的房间定时推送消息,因此想到用MQ的延时队列,定时推送消息.嗯,先用单机版进行试验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假如我们在腾讯云租了个便宜虚拟机,并在上面装好docker和docker-compose&lt;br&gt;docker-compose.yml&lt;/p&gt;
    
    </summary>
    
      <category term="直播项目技术总结" scheme="//aha.me/categories/%E7%9B%B4%E6%92%AD%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Docker" scheme="//aha.me/tags/Docker/"/>
    
      <category term="ActiveMQ" scheme="//aha.me/tags/ActiveMQ/"/>
    
      <category term="延时队列" scheme="//aha.me/tags/%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>花里胡哨地使用MQ定时推送消息到直播房间</title>
    <link href="//aha.me/2019/12/27/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E5%9C%B0%E4%BD%BF%E7%94%A8MQ%E5%AE%9A%E6%97%B6%E6%8E%A8%E9%80%81%E6%B6%88%E6%81%AF%E5%88%B0%E7%9B%B4%E6%92%AD%E6%88%BF%E9%97%B4/"/>
    <id>//aha.me/2019/12/27/花里胡哨地使用MQ定时推送消息到直播房间/</id>
    <published>2019-12-27T06:27:03.000Z</published>
    <updated>2019-12-29T14:12:46.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为什么有这篇文章呢?因为公司想在直播中的房间定时推送消息,因此想到用MQ的延时队列,定时推送消息.嗯,先用单机版进行试验<br>上篇文章搭建了MQ并启动对延时任务支持<br><a href="https://blog.csdn.net/weixin_43647224/article/details/103709141" target="_blank" rel="noopener">搭建地址</a></p></blockquote><a id="more"></a><h2 id="搭建生产者"><a href="#搭建生产者" class="headerlink" title="搭建生产者"></a>搭建生产者</h2><p>假如我们用的是腾讯云的直播,那么已经引入相关jar包(自己去找)<br>pom.xml</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- activemq --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;activemq-pool.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- spring-jms --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>引入对MQ支持</li></ul><p>假设,没有发生宕机情况,用的是Activemq的点对点模式<br>那么对xml进行修改(没错,还是ssm那套,spring mvc)</p><ul><li>创建连接工厂</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CachingConnectionFactory 连接工厂 （有缓存功能）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cachingConnectionFactory"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.CachingConnectionFactory"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Session缓存数量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionCacheSize"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- MQ地址 账户名 密码--&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://192.168.1.195:61616?wireFormat.maxInactivityDuration=0"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"admin"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"admin"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否异步发送 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useAsyncSend"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trustAllPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建队列</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义消息队列名称（Queue） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"liveQueueDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 设置消息队列的名字 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>liveMQQueue<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置JMS模板</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置JMS模板（Queue），Spring提供的JMS工具类，它发送、接收消息。 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"liveJmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"cachingConnectionFactory"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestination"</span> <span class="attr">ref</span>=<span class="string">"liveQueueDestination"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"receiveTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span> /&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- true是topic，false是queue，默认是false，此处显示写出false --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pubSubDomain"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建生产者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiveJmsProducer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"liveJmsTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> JmsTemplate liveJmsTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送延时消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timel 延时时间 单位为分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageAndTime</span><span class="params">(<span class="keyword">final</span> String msg,Long timel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> delayTime = timel * <span class="number">60000</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            liveJmsTemplate.send(<span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">                    TextMessage message = session.createTextMessage(msg);</span><br><span class="line">                    message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delayTime);</span><br><span class="line">                    <span class="keyword">return</span> message;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>延时时间单位为分,好像很合理的样子</p></blockquote><h2 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h2><ul><li>xml配置</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"liveQueueReceiver"</span></span><br><span class="line">         <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.backend.service.jms.JmsLiveConsumer"</span>&gt;&lt;/bean&gt;</span><br><span class="line">   &lt;jms:listener-container destination-<span class="class"><span class="keyword">type</span></span>=<span class="string">"queue"</span></span><br><span class="line">                           container-<span class="class"><span class="keyword">type</span></span>=<span class="string">"default"</span> connection-factory=<span class="string">"cachingConnectionFactory"</span></span><br><span class="line">                           acknowledge=<span class="string">"auto"</span>&gt;</span><br><span class="line">       &lt;jms:listener destination=<span class="string">"liveMQQueue"</span> ref=<span class="string">"liveQueueReceiver"</span> /&gt;</span><br><span class="line">   &lt;/jms:listener-container&gt;</span><br></pre></td></tr></table></figure><ul><li>消费者代码</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JmsLiveConsumer</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">protected <span class="keyword">final</span> Logger logger = Logger.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    private TencentIMService tencentIMService;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">private LiveSystemMsgMapper liveSystemMsgMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public <span class="keyword">void</span> onMessage(Message message) &#123;</span><br><span class="line">TextMessage tm = (TextMessage) message;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            LiveSystemMsgEntity liveSystemMsgEntity = JSONObject.parseObject(tm.getText(),LiveSystemMsgEntity.<span class="keyword">class</span>);</span><br><span class="line"><span class="built_in">String</span> sendName = <span class="string">"系统管理员"</span> ;</span><br><span class="line">LiveSystemMsgEntity liveSystemMsgCheck = liveSystemMsgMapper.selectById(liveSystemMsgEntity.getId());</span><br><span class="line"><span class="keyword">if</span> (liveSystemMsgCheck == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (liveSystemMsgCheck.getSendName()!=<span class="keyword">null</span>&amp;&amp; liveSystemMsgCheck.getSendName() != <span class="string">""</span>) &#123;</span><br><span class="line">sendName = liveSystemMsgCheck.getSendName();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断消息是否能推送</span></span><br><span class="line"><span class="keyword">if</span> (liveSystemMsgCheck.getStatus()==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//管理员名称</span></span><br><span class="line">            <span class="built_in">Element</span> elementElem = <span class="keyword">new</span> <span class="built_in">Element</span>();</span><br><span class="line">            elementElem.setText(liveSystemMsgEntity.getMsgContentText());</span><br><span class="line">            TIMMsgElement timMsgElementElem = <span class="keyword">new</span> TIMMsgElement();</span><br><span class="line">            timMsgElementElem.setMsgContent(elementElem);</span><br><span class="line">            timMsgElementElem.setMsgType(<span class="string">"TIMCustomElem"</span>);</span><br><span class="line">            <span class="comment">//发送消息</span></span><br><span class="line">            <span class="built_in">Element</span> elementText = <span class="keyword">new</span> <span class="built_in">Element</span>();</span><br><span class="line">            elementText.setText(liveSystemMsgEntity.getMsgContentText());</span><br><span class="line">TIMMsgElement timMsgElementText = <span class="keyword">new</span> TIMMsgElement();</span><br><span class="line">            timMsgElementText.setMsgContent(elementText);</span><br><span class="line">            timMsgElementText.setMsgType(<span class="string">"TIMTextElem"</span>);</span><br><span class="line">            <span class="built_in">List</span>&lt;TIMMsgElement&gt; list = <span class="keyword">new</span> ArrayList&lt;TIMMsgElement&gt;();</span><br><span class="line">            list.add(timMsgElementElem);</span><br><span class="line">            list.add(timMsgElementText);</span><br><span class="line"></span><br><span class="line">SendGroupMsgResponse sendGroupMsgResponse = tencentIMService.sendSystemGroupMsg(list,liveSystemMsgEntity.getGroupId());</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">"OK"</span>.equals(sendGroupMsgResponse.getActionStatus())) &#123;</span><br><span class="line">                logger.error(<span class="string">"发送远程消息失败:"</span>+sendGroupMsgResponse.toString());</span><br><span class="line">            &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">    logger.warn(<span class="string">"接收延时消息失败"</span>+e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于TencentIMService 是不   会    给     你     们     的  ,你们自己去封装一层腾讯云im api<br> ok,启动发送消息</p></blockquote><h2 id="登录mq后台"><a href="#登录mq后台" class="headerlink" title="登录mq后台"></a>登录mq后台</h2><p>默认密码账号 admin<br><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f400449dc3fec2?w=682&amp;h=208&amp;f=png&amp;s=27891" alt="在这里插入图片描述"><br><img src="https://user-gold-cdn.xitu.io/2019/12/26/16f40044a20d0c09?w=960&amp;h=344&amp;f=png&amp;s=99443" alt="在这里插入图片描述"></p><blockquote><p>ok,成功,欧耶</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为什么有这篇文章呢?因为公司想在直播中的房间定时推送消息,因此想到用MQ的延时队列,定时推送消息.嗯,先用单机版进行试验&lt;br&gt;上篇文章搭建了MQ并启动对延时任务支持&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_43647224/article/details/103709141&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;搭建地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="直播项目技术总结" scheme="//aha.me/categories/%E7%9B%B4%E6%92%AD%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Docker" scheme="//aha.me/tags/Docker/"/>
    
      <category term="ActiveMQ" scheme="//aha.me/tags/ActiveMQ/"/>
    
      <category term="延时队列" scheme="//aha.me/tags/%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>docker花里胡哨的网络配置</title>
    <link href="//aha.me/2019/10/16/docker%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>//aha.me/2019/10/16/docker花里胡哨的网络配置/</id>
    <published>2019-10-16T02:58:04.000Z</published>
    <updated>2019-10-16T02:58:48.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><blockquote><p>docker默认提供了三种网络模式：bridge、host和none。其中bridge是Docker默认的网络模式，在该模式下，容器拥有自己的IP<br>namespace，容器可以通过宿主机上的docker0网桥与别的容器、宿主机或者外部网络进行通信。如果想要让容器内服务可以让外部环境访问到,我们可以通过端口映射的方式让外部环境也能访问到容器内部资源。</p></blockquote><a id="more"></a><h3 id="bridge网络模式"><a href="#bridge网络模式" class="headerlink" title="bridge网络模式"></a>bridge网络模式</h3><ul><li>Docker三种网络模式：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\aaa\bbb&gt;docker<span class="built_in"> network </span>ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">64439e25e880       <span class="built_in"> bridge </span>            <span class="built_in"> bridge </span>             local</span><br><span class="line">87a13f112ba4        host                host                local</span><br><span class="line">3d41154048c4        my-bridge          <span class="built_in"> bridge </span>             local</span><br><span class="line">bf5b9c67aace        none                <span class="literal">null</span>                local</span><br></pre></td></tr></table></figure><p>可以通过busybox来进行演示下容器间的通信</p><ul><li>首先下载busybox镜像:</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker pull busybox</span></span><br></pre></td></tr></table></figure><ul><li>通过该镜像创建两个容器kaldo1和kaldo2：</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> run -d --name kaldo1 <span class="keyword">busybox </span>/<span class="keyword">bin/sh </span>-c <span class="string">"while true;do sleep 3600;done"</span></span><br><span class="line"><span class="symbol">docker</span> run -d --name kaldo2 <span class="keyword">busybox </span>/<span class="keyword">bin/sh </span>-c <span class="string">"while true;do sleep 3600;done"</span></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\aaa\bbb&gt;docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                   PORTS               NAMES</span><br><span class="line">a640d166f251        busybox             <span class="string">"/bin/sh -c 'while t…"</span>   About <span class="selector-tag">a</span> minute ago   Up About <span class="selector-tag">a</span> minute                            kaldo2</span><br><span class="line"><span class="number">7</span>a8c4861c336        busybox             <span class="string">"/bin/sh -c 'while t…"</span>   About <span class="selector-tag">a</span> minute ago   Up About <span class="selector-tag">a</span> minute                            kaldo1</span><br><span class="line">ad8856527391        <span class="number">1</span>d07f2f71c12        <span class="string">"bash"</span>                   <span class="number">2</span> months ago         Exited (<span class="number">0</span>) <span class="number">6</span> weeks ago                       dazzling_chaplygin</span><br></pre></td></tr></table></figure><ul><li>使用docker network inspect bridge命令查看bridge网络详情：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\aaa\bbb&gt;docker<span class="built_in"> network </span>inspect bridge</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"64439e25e88080859e4060b5eb8cd1a5db8681b1b7fecaff1a22ea09706fec43"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2019-10-16T01:36:42.7624024Z"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: &#123;</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"172.17.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: &#123;</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: &#123;</span><br><span class="line">            <span class="string">"7a8c4861c336daf22462e7889c365f5579eae0142eb00e395d41b56b43e5ef7f"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"kaldo1"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"7d82a235cc4cfff0f53f8c84eeeaac059d54fe6dfb36c177784b4576003d6d80"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:04"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.17.0.4/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"a640d166f251e3cb5613b7e339ea97d598e7749b470dd61fba993c0df0e95029"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"kaldo2"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"091c2471fc6bae741b35088be78df2da59c2fe5cd40b73702912e4ea1ddd1110"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:05"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.17.0.5/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;</span><br><span class="line">            <span class="string">"com.docker.network.bridge.default_bridge"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_icc"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_ip_masquerade"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.host_binding_ipv4"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.name"</span>: <span class="string">"docker0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.driver.mtu"</span>: <span class="string">"1500"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以看到kaldo1和kaldo2都连接到了bridge（因为是Docker默认的网络模式），并且kaldo1内部IP为172.17.0.4，kaldo2内部IP为172.17.0.5。</p><p>我们看下在kaldo1容器内部是否可以ping通kaldo2的IP：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\aaa\bbb&gt;docker exec -it kaldo1 /bin/sh</span><br><span class="line">/ #<span class="built_in"> ping </span>172.17.0.5</span><br><span class="line">PING 172.17.0.5 (172.17.0.5): 56 data bytes</span><br><span class="line">64 bytes <span class="keyword">from</span> 172.17.0.5: <span class="attribute">seq</span>=0 <span class="attribute">ttl</span>=64 <span class="attribute">time</span>=0.084 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> 172.17.0.5: <span class="attribute">seq</span>=1 <span class="attribute">ttl</span>=64 <span class="attribute">time</span>=0.074 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> 172.17.0.5: <span class="attribute">seq</span>=2 <span class="attribute">ttl</span>=64 <span class="attribute">time</span>=0.082 ms</span><br><span class="line">^C</span><br><span class="line">--- 172.17.0.5<span class="built_in"> ping </span>statistics ---</span><br><span class="line">3 packets transmitted, 3 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.074/0.080/0.084 ms</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><p><strong>ok!不仅如此，kaldo1还可以ping 宿主机及外部网络</strong></p><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p>我们可以在创建容器的使用使用–link来让容器间的网络建立映射关系。</p><p>我们删除kaldo2容器，重新创建kaldo2容器，并且让其和kaldo1建立网络映射关系：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\aaa\bbb&gt;docker rm -f kaldo<span class="number">2</span></span><br><span class="line">kaldo<span class="number">2</span></span><br><span class="line"></span><br><span class="line">C:\Users\aaa\bbb&gt;docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                   PORTS               NAMES</span><br><span class="line"><span class="number">7</span>a<span class="number">8</span><span class="keyword">c</span><span class="number">4861</span><span class="keyword">c</span><span class="number">336</span>        busybox             <span class="string">"/bin/sh -c 'while t…"</span>   <span class="number">9</span> minutes ago       Up <span class="number">9</span> minutes                                 kaldo<span class="number">1</span></span><br><span class="line">ad<span class="number">8856527391</span>        <span class="number">1</span>d<span class="number">07</span>f<span class="number">2</span>f<span class="number">71</span><span class="keyword">c</span><span class="number">12</span>        <span class="string">"bash"</span>                   <span class="number">2</span> months ago        Exited (<span class="number">0</span>) <span class="number">6</span> weeks ago                       dazzling_chaplygin</span><br><span class="line"></span><br><span class="line">C:\Users\aaa\bbb&gt;docker run -d --name kaldo<span class="number">2</span> --link kaldo<span class="number">1</span> busybox /bin/sh -<span class="keyword">c</span> <span class="string">"while true;do sleep 3600;done"</span></span><br><span class="line"><span class="keyword">c</span><span class="number">1</span>ee<span class="number">8</span>a<span class="number">6</span>cbcbdd<span class="number">8477</span>eab<span class="number">5</span>da<span class="number">79</span>ec<span class="number">1</span><span class="keyword">c</span><span class="number">3736860</span>d<span class="number">11</span>fff<span class="number">2</span>f<span class="number">07</span>beef<span class="number">2</span>d<span class="number">5409156</span>d<span class="number">63</span>b<span class="number">6</span></span><br><span class="line"></span><br><span class="line">C:\Users\aaa\bbb&gt;docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                   PORTS               NAMES</span><br><span class="line"><span class="keyword">c</span><span class="number">1</span>ee<span class="number">8</span>a<span class="number">6</span>cbcbd        busybox             <span class="string">"/bin/sh -c 'while t…"</span>   <span class="number">9</span> seconds ago       Up <span class="number">8</span> seconds                                 kaldo<span class="number">2</span></span><br><span class="line"><span class="number">7</span>a<span class="number">8</span><span class="keyword">c</span><span class="number">4861</span><span class="keyword">c</span><span class="number">336</span>        busybox             <span class="string">"/bin/sh -c 'while t…"</span>   <span class="number">11</span> minutes ago      Up <span class="number">11</span> minutes                                kaldo<span class="number">1</span></span><br><span class="line">ad<span class="number">8856527391</span>        <span class="number">1</span>d<span class="number">07</span>f<span class="number">2</span>f<span class="number">71</span><span class="keyword">c</span><span class="number">12</span>        <span class="string">"bash"</span>                   <span class="number">2</span> months ago        Exited (<span class="number">0</span>) <span class="number">6</span> weeks ago                       dazzling_chaplygin</span><br></pre></td></tr></table></figure><p><strong>这样我们就可以在kaldo2容器内部使用ping kaldo1 ping通kaldo1网络了!!</strong></p><h3 id="创建自定义网桥"><a href="#创建自定义网桥" class="headerlink" title="创建自定义网桥"></a>创建自定义网桥</h3><p>我们可以通过docker network create来创建自定义的网桥，比如我们创建一个新的网桥，名称为kaldo-bridge：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\aaa\bbb&gt;docker<span class="built_in"> network </span>create -d<span class="built_in"> bridge </span>kaldo-bridge</span><br><span class="line">4ab4fa151df5d53555e6533e81d7063ae3b5aafda196f8d3f117506471a5f991</span><br><span class="line">C:\Users\aaa\bbb&gt;docker<span class="built_in"> network </span>ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">64439e25e880       <span class="built_in"> bridge </span>            <span class="built_in"> bridge </span>             local</span><br><span class="line">87a13f112ba4        host                host                local</span><br><span class="line">4ab4fa151df5        kaldo-bridge       <span class="built_in"> bridge </span>             local</span><br><span class="line">bf5b9c67aace        none                <span class="literal">null</span>                local</span><br></pre></td></tr></table></figure><p>因为之前的模式默认选择的是bridge。<br>所以我们把两个容器都连接到kaldo-bridge上 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> network </span>connect kaldo-bridge kaldo1</span><br><span class="line">docker<span class="built_in"> network </span>connect kaldo-bridge kaldo2</span><br></pre></td></tr></table></figure><ul><li>查看kaldo-bridge</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\aaa\bbb&gt;docker<span class="built_in"> network </span>inspect kaldo-bridge</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"kaldo-bridge"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"4ab4fa151df5d53555e6533e81d7063ae3b5aafda196f8d3f117506471a5f991"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2019-10-16T02:45:22.2855231Z"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: &#123;</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"172.19.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.19.0.1"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: &#123;</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>也可以在创建容器的时候使用–network来指定需要连接的网桥,<br>使用自定义网桥有个明显的好处是，容器间可以通过容器名称进行网络通信（无需在创建容器的时候使用–link来指定）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;网络配置&quot;&gt;&lt;a href=&quot;#网络配置&quot; class=&quot;headerlink&quot; title=&quot;网络配置&quot;&gt;&lt;/a&gt;网络配置&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;docker默认提供了三种网络模式：bridge、host和none。其中bridge是Docker默认的网络模式，在该模式下，容器拥有自己的IP&lt;br&gt;namespace，容器可以通过宿主机上的docker0网桥与别的容器、宿主机或者外部网络进行通信。如果想要让容器内服务可以让外部环境访问到,我们可以通过端口映射的方式让外部环境也能访问到容器内部资源。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="//aha.me/categories/docker/"/>
    
    
      <category term="docker" scheme="//aha.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>工作中一些docker花里胡哨使用总结</title>
    <link href="//aha.me/2019/10/15/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E4%B8%80%E4%BA%9Bdocker%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>//aha.me/2019/10/15/工作中一些docker花里胡哨使用总结/</id>
    <published>2019-10-15T07:44:06.000Z</published>
    <updated>2019-10-15T09:50:12.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker安装-命令"><a href="#Docker安装-命令" class="headerlink" title="Docker安装-命令"></a>Docker安装-命令</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>环境为centos7</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> yum install -<span class="keyword">y</span> yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"> yum-config-manager --<span class="built_in">add</span>-repo http<span class="variable">s:</span>//download.docker.<span class="keyword">com</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br><span class="line">【注意：当上面链接（官网）无法连接时，使用下面镜像地址 sudo yum-config-manager --<span class="built_in">add</span>-repo http://mirrors.aliyun.<span class="keyword">com</span>/docker-<span class="keyword">ce</span>/linux/centos/docker-<span class="keyword">ce</span>.repo】</span><br><span class="line"> </span><br><span class="line">yum-config-manager --enable docker-<span class="keyword">ce</span>-edge</span><br><span class="line">yum-config-manager --enable docker-<span class="keyword">ce</span>-test</span><br><span class="line">yum-config-manager --disable docker-<span class="keyword">ce</span>-edge</span><br><span class="line">yum makecache fast</span><br><span class="line">yum install docker-<span class="keyword">ce</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="查看docker版本，看是否安装成功"><a href="#查看docker版本，看是否安装成功" class="headerlink" title="查看docker版本，看是否安装成功"></a>查看docker版本，看是否安装成功</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="comment">--version</span></span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure><p><strong>其它如果权限不足就加权限,根据需要开机自启</strong></p><h2 id="Docker-Compose安装"><a href="#Docker-Compose安装" class="headerlink" title="Docker Compose安装"></a>Docker Compose安装</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https:<span class="regexp">//gi</span>thub.com<span class="regexp">/docker/</span>compose<span class="regexp">/releases/</span>download<span class="regexp">/1.21.2/</span>docker-compose-$(uname -s)-$(uname -m) -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure><p>具体最新版本请上官网</p><h3 id="测试（查看版本）"><a href="#测试（查看版本）" class="headerlink" title="测试（查看版本）"></a>测试（查看版本）</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="comment">--version</span></span><br></pre></td></tr></table></figure><h3 id="配置与启动tomcat"><a href="#配置与启动tomcat" class="headerlink" title="配置与启动tomcat"></a>配置与启动tomcat</h3><p><strong>创建docker-compose.yml</strong></p><h2 id="Docker一些命令"><a href="#Docker一些命令" class="headerlink" title="Docker一些命令"></a>Docker一些命令</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  tomcat:</span></span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line"><span class="symbol">    image:</span> tomcat</span><br><span class="line"><span class="symbol">    container_name:</span> tomcat</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">8080</span>:<span class="number">8080</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="meta-keyword">/docker/</span>tomcat/webapps:<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/tomcat/</span>webapps</span><br><span class="line">      - <span class="meta-keyword">/docker/</span>tomcat/logs:<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/tomcat/</span>logs</span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line"><span class="symbol">      TZ:</span> Asia/Shanghai</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><blockquote><p>version:’3’ :表示compose对docker版本的支持，这里是compose版本，并非是docker版本。 </p><p>services: 表示一个该配置文件的所有容器实例，支持配置多个容器实例。</p><p>tomcat:表示是一个多个容器中的其中一个</p><p>restart: always：表示该容器实例是随着机器启动而启动。</p><p>image: tomcat：表示本容器使用的镜像是tomcat，如需要指定版本号则 image: tomcat:8.0。</p><p>container_name: tomcat:表示容器的一个别名。</p><p>ports：表示容器端口映射到宿主机端口。</p><p>volumes：表示dockers容器的数据卷，将容器实例的目录映射到宿主机上盘符目录。</p><p>environment：表示容器环境的设置，我这里配置的是tomcat容器的时区时间为亚洲/上海。</p></blockquote><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p><strong>首先进入到你docker-compose.yml文件所存放的目录!</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose命令"><a href="#docker-compose命令" class="headerlink" title="docker-compose命令"></a>docker-compose命令</h3><p>Up :启动</p><p>Down:停止</p><p>-d:后台运行</p><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">显示正在运行的容器:</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">显示全部容器：</span><br><span class="line"></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">显示全部镜像：</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">杀死所有正在运行的容器</span><br><span class="line"></span><br><span class="line">docker kill $(docker ps -<span class="selector-tag">a</span> -q)</span><br></pre></td></tr></table></figure><h3 id="常用的命令-比如将正在运行Tomcat容器中执行命令"><a href="#常用的命令-比如将正在运行Tomcat容器中执行命令" class="headerlink" title="常用的命令,比如将正在运行Tomcat容器中执行命令"></a>常用的命令,比如将正在运行Tomcat容器中执行命令</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> 容器<span class="built_in">id</span> /bin/bash</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><blockquote><p>-d :分离模式: 在后台运行</p><p>-i :即使没有附加也保持STDIN 打开</p><p>-t :分配一个伪终端</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">停止容器</span><br><span class="line">docker <span class="keyword">stop</span> 容器<span class="keyword">id</span></span><br><span class="line">移除容器</span><br><span class="line">docker rm 容器<span class="keyword">id</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker安装-命令&quot;&gt;&lt;a href=&quot;#Docker安装-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker安装-命令&quot;&gt;&lt;/a&gt;Docker安装-命令&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;环境为centos7&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; yum install -&lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; yum-utils device-mapper-persistent-data lvm2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; yum-config-manager --&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;-repo http&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt;//download.docker.&lt;span class=&quot;keyword&quot;&gt;com&lt;/span&gt;/linux/centos/docker-&lt;span class=&quot;keyword&quot;&gt;ce&lt;/span&gt;.repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【注意：当上面链接（官网）无法连接时，使用下面镜像地址 sudo yum-config-manager --&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;-repo http://mirrors.aliyun.&lt;span class=&quot;keyword&quot;&gt;com&lt;/span&gt;/docker-&lt;span class=&quot;keyword&quot;&gt;ce&lt;/span&gt;/linux/centos/docker-&lt;span class=&quot;keyword&quot;&gt;ce&lt;/span&gt;.repo】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum-config-manager --enable docker-&lt;span class=&quot;keyword&quot;&gt;ce&lt;/span&gt;-edge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum-config-manager --enable docker-&lt;span class=&quot;keyword&quot;&gt;ce&lt;/span&gt;-test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum-config-manager --disable docker-&lt;span class=&quot;keyword&quot;&gt;ce&lt;/span&gt;-edge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum makecache fast&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install docker-&lt;span class=&quot;keyword&quot;&gt;ce&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="docker" scheme="//aha.me/categories/docker/"/>
    
    
      <category term="docker" scheme="//aha.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>工作中常用的cat命令</title>
    <link href="//aha.me/2019/10/15/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84cat%E5%91%BD%E4%BB%A4/"/>
    <id>//aha.me/2019/10/15/工作中常用的cat命令/</id>
    <published>2019-10-15T02:26:45.000Z</published>
    <updated>2019-10-15T02:28:23.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>线上出现了问题，登上线上的机器查日志是非常常见的操作了。我第一次登上线上机器查日志的时候，我还只记得以下的几个命令（假设现在我们的日志文件叫做service.log)：</p><a id="more"></a><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> service.<span class="built_in">log</span></span><br><span class="line">tail -<span class="keyword">f</span> service.<span class="built_in">log</span></span><br><span class="line"><span class="keyword">vim</span> serivice.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>（明显是不够用的）<br><strong>现在日志每天产出的大小大概10GB<br>如果是小文件的话，单纯的cat命令还是可以应付的，但如果你直接用cat命令打开一个10GB的日志文件，保证卡死你（ctrl + c退出cat命令需要很久才能将cat命令停下来）。<br>面对比较大的日志文件，这我们就得配合grep来玩了，比如我们现在得知某个文件上传失败，想要看一下这个上传接口的日志是怎么样的。于是我们就可以这样搞：</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> service.<span class="built_in">log</span> | <span class="keyword">grep</span> <span class="string">"Upload"</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> service.<span class="built_in">log</span> | <span class="keyword">grep</span> <span class="string">'Upload'</span> -A <span class="number">5</span></span><br><span class="line"></span><br><span class="line">意思是，在service.<span class="built_in">log</span>文件中，查找ERROR字符，并显示Upload所在行的之后<span class="number">5</span>行</span><br><span class="line"></span><br><span class="line"><span class="keyword">cat</span> service.<span class="built_in">log</span> | <span class="keyword">grep</span> <span class="string">'Upload'</span> -B <span class="number">5</span>  之前<span class="number">5</span>行</span><br><span class="line"></span><br><span class="line"><span class="keyword">cat</span> service.<span class="built_in">log</span> | <span class="keyword">grep</span> <span class="string">'Upload'</span> -C <span class="number">5</span> 前后<span class="number">5</span>行</span><br><span class="line"></span><br><span class="line"><span class="keyword">cat</span> service.<span class="built_in">log</span> | <span class="keyword">grep</span> -v <span class="string">'Upload'</span> 排除Upload所在的行</span><br></pre></td></tr></table></figure><p>或者<strong>直接从服务器拉下慢慢的研究</strong></p><p>这么一搞，就能将service.log中所有含有Upload接口的记录给搜出来，搜索的速度还是贼快的。</p><p>现在我们已经能根据关键字搜到对应的记录了，接着我想看一下那条记录的日志具体的位置,就能知道这条数据大概的执行状态了<br>首先，我们先要查出对应记录的行号，在cat 命令后面加上一个 -n 参数就好了。所以命令是:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> -n service.<span class="built_in">log</span> | <span class="keyword">grep</span> <span class="string">"Upload"</span></span><br></pre></td></tr></table></figure><p>比如问题出现在行数30000</p><blockquote><p>sed -n “30000,30010p” service.log：从30000行开始检索，到30010行结束</p><p>cat -n service.log | tail -n +30000 | head -n 20:从30000行开始检索，往前推20条</p></blockquote><p>如果关键字不太准确（日志输出的记录太多了），我们可以使用more命令来浏览或者输出到文件上再分析：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> service.<span class="keyword">log</span> | grep 13 |<span class="keyword">more</span> ：将查询后的结果交由<span class="keyword">more</span>输出</span><br><span class="line"></span><br><span class="line"><span class="keyword">cat</span> service.<span class="keyword">log</span> | grep 13 &gt; /home/kldo/bb.txt  将查询后的结果写到/home/kldo/bb.txt文件上</span><br></pre></td></tr></table></figure><p>这个日志输出了多少行，我们可以使用这条命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat service.<span class="built_in">log</span> <span class="string">| wc -l</span></span><br></pre></td></tr></table></figure><p>很明显一个日志文件不足以分析周全,我们需要将上个日志与现在的日志合并后再分析</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -<span class="selector-tag">b</span> service<span class="selector-class">.log</span> service20191015<span class="selector-class">.log</span> &gt;&gt; all.log</span><br></pre></td></tr></table></figure><p>由于我参加工作时间比较短，所以可能会有很多命令会忽略掉了，欢迎在评论区补充常用的命令。哈哈哈哈哈哈哈哈哈</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查看日志&quot;&gt;&lt;a href=&quot;#查看日志&quot; class=&quot;headerlink&quot; title=&quot;查看日志&quot;&gt;&lt;/a&gt;查看日志&lt;/h2&gt;&lt;p&gt;线上出现了问题，登上线上的机器查日志是非常常见的操作了。我第一次登上线上机器查日志的时候，我还只记得以下的几个命令（假设现在我们的日志文件叫做service.log)：&lt;/p&gt;
    
    </summary>
    
      <category term="常用命令" scheme="//aha.me/categories/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="linux" scheme="//aha.me/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>git工作中常用命令</title>
    <link href="//aha.me/2019/10/15/git%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>//aha.me/2019/10/15/git工作中常用命令/</id>
    <published>2019-10-15T00:36:03.000Z</published>
    <updated>2019-12-29T13:26:25.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><ul><li>从远端库更新内容到本地</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git pull</span></span><br></pre></td></tr></table></figure><p>把文件添加到缓冲区</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> &lt;filename&gt; <span class="comment">// 添加某文件</span></span><br><span class="line">git <span class="keyword">add</span> . <span class="comment">// 添加所有文件</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>删除文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm <span class="tag">&lt;<span class="name">filename</span>&gt;</span></span><br></pre></td></tr></table></figure><p>交缓冲区的所有修改到仓库</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">"提交注释"</span></span><br></pre></td></tr></table></figure><p>查看git库的状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git status</span></span><br></pre></td></tr></table></figure><p>比较文件差异</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff <span class="tag">&lt;<span class="name">filename</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看提交日志</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="params">&lt;branchName&gt;</span> <span class="comment">// 切换到某分支</span></span><br><span class="line">git checkout -b <span class="params">&lt;branchName&gt;</span> <span class="comment">// 创建分支并切换到创建的分支</span></span><br></pre></td></tr></table></figure><p>合并某分支的内容到当前分支</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge <span class="tag">&lt;<span class="name">branchName</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Git分支管理规范"><a href="#Git分支管理规范" class="headerlink" title="Git分支管理规范"></a>Git分支管理规范</h2><h3 id="master-主分支"><a href="#master-主分支" class="headerlink" title="master 主分支"></a>master 主分支</h3><blockquote><p>作为正式环境分支（稳定版），只读，不可修改，可被merge</p><p>正式服务器应当切换为此分支</p></blockquote><h3 id="release-预发布分支"><a href="#release-预发布分支" class="headerlink" title="release 预发布分支"></a>release 预发布分支</h3><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">作为验收环境分支，不可修改，可被<span class="keyword">merge</span></span><br><span class="line"></span><br><span class="line">验收或正式服务器上线前应当切换为此分支</span><br></pre></td></tr></table></figure><h3 id="develop-测试分支"><a href="#develop-测试分支" class="headerlink" title="develop 测试分支"></a>develop 测试分支</h3><blockquote><p>作为测试环境分支，可修改，可被merge</p><p>测试服务器应当切换为此分支</p></blockquote><h3 id="feature-开发（功能）分支"><a href="#feature-开发（功能）分支" class="headerlink" title="feature/ 开发（功能）分支"></a>feature/<name> 开发（功能）分支</name></h3><blockquote><p>作为开发环境分支，本地开发和开发服务器应当切换为此分支</p></blockquote><h3 id="hotfix-修复BUG分支"><a href="#hotfix-修复BUG分支" class="headerlink" title="hotfix/ 修复BUG分支"></a>hotfix/<name> 修复BUG分支</name></h3><blockquote><p>作为修复BUG分支，应从线上或测试分支拉取一个hotfix分支，BUG解决后merge到测试或线上分支</p></blockquote><h2 id="前端项目上线流程规范"><a href="#前端项目上线流程规范" class="headerlink" title="前端项目上线流程规范"></a>前端项目上线流程规范</h2><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> feature/&lt;name&gt; <span class="regexp">//</span> 本地提交、推送</span></span><br><span class="line"><span class="ruby">- git checkout develop /<span class="regexp">/ 本地切换到develop分支</span></span></span><br><span class="line"><span class="ruby">- git merge feature/&lt;name&gt; <span class="regexp">//</span> 合并开发分支</span></span><br><span class="line"><span class="ruby">- git push</span></span><br></pre></td></tr></table></figure><p>服务器</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>git pull</span><br><span class="line"><span class="bullet">- </span>npm run build</span><br></pre></td></tr></table></figure><h3 id="正式-验收环境"><a href="#正式-验收环境" class="headerlink" title="正式/验收环境"></a>正式/验收环境</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> feature/&lt;name&gt; <span class="regexp">//</span> 本地提交、推送</span></span><br><span class="line"><span class="ruby">- git checkout develop</span></span><br><span class="line"><span class="ruby">- git merge feature/&lt;name&gt;</span></span><br><span class="line"><span class="ruby">- git checkout master或release/&lt;name&gt;</span></span><br><span class="line"><span class="ruby">- git merge develop</span></span><br><span class="line"><span class="ruby">- git push</span></span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">服务器</span><br><span class="line"><span class="bullet">- </span>git pull</span><br><span class="line"><span class="bullet">- </span>npm run build</span><br></pre></td></tr></table></figure><h3 id="热修复流程"><a href="#热修复流程" class="headerlink" title="热修复流程"></a>热修复流程</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> git checkout master</span></span><br><span class="line"><span class="ruby">- git checkout -b hotfix/&lt;name&gt;</span></span><br><span class="line"><span class="ruby">- git push origin hotfix/&lt;name&gt;<span class="symbol">:hotfix/&lt;name&gt;</span> /<span class="regexp">/ 将分支推送到远程仓库</span></span></span><br><span class="line"><span class="ruby">- hotfix/&lt;name&gt; <span class="regexp">//</span> 本地提交、推送</span></span><br><span class="line"><span class="ruby">- git checkout master</span></span><br><span class="line"><span class="ruby">- git merge hotfix/&lt;name&gt;</span></span><br><span class="line"><span class="ruby">- git push</span></span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">服务器</span><br><span class="line"><span class="bullet">- </span>git pull</span><br><span class="line"><span class="bullet">- </span>npm run build</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git常用命令&quot;&gt;&lt;a href=&quot;#Git常用命令&quot; class=&quot;headerlink&quot; title=&quot;Git常用命令&quot;&gt;&lt;/a&gt;Git常用命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从远端库更新内容到本地&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight ebnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;git pull&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把文件添加到缓冲区&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt; &amp;lt;filename&amp;gt; &lt;span class=&quot;comment&quot;&gt;// 添加某文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt; . &lt;span class=&quot;comment&quot;&gt;// 添加所有文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工作总结" scheme="//aha.me/categories/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="git" scheme="//aha.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>mybatis where 中遇到传入集合参数问题</title>
    <link href="//aha.me/2019/10/14/mybatis-where-%E4%B8%AD%E9%81%87%E5%88%B0%E4%BC%A0%E5%85%A5%E9%9B%86%E5%90%88%E5%8F%82%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>//aha.me/2019/10/14/mybatis-where-中遇到传入集合参数问题/</id>
    <published>2019-10-14T01:31:44.000Z</published>
    <updated>2019-10-14T01:34:15.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mybatis-where-中in的使用"><a href="#mybatis-where-中in的使用" class="headerlink" title="mybatis where 中in的使用"></a>mybatis where 中in的使用</h2><blockquote><p>当我们使用mybatis时，在where中会用到 in 如：</p><p>where name in (‘Jana’,’Tom’);</p><p>我们可以在sql中直接写 name in (‘Jana’,’Tom’) 或者 name in (${names}) （备注：String<br> names = “‘JOJO’,’TOM’”; 使用$时会引起sql注入安全问题）</p><p>但是我们无法在sql中直接写 name in (#{names});</p><p>会报参数个数错误，因为’Jana’,’Tom’会被解析成两个传参</p><p>String[] names={“Jana”,”Tom”};</p><p>此时要用<strong>foreach函数</strong>：</p></blockquote><a id="more"></a><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name <span class="keyword">in</span></span><br><span class="line">&lt;foreach collection=<span class="string">"names"</span> <span class="keyword">item</span>=<span class="string">"name"</span> index=<span class="string">"index"</span> <span class="built_in">open</span>=<span class="string">"("</span> <span class="built_in">close</span>=<span class="string">")"</span> separator=<span class="string">","</span>&gt;</span><br><span class="line">    <span class="comment">#&#123;name&#125;</span></span><br><span class="line">&lt;/foreach&gt;</span><br></pre></td></tr></table></figure><p>解析为：<br>name in (?,?)，然后利用names传入参数</p><h3 id="关于参数的形式，可以是数组形式可以是List形式："><a href="#关于参数的形式，可以是数组形式可以是List形式：" class="headerlink" title="关于参数的形式，可以是数组形式可以是List形式："></a>关于参数的形式，可以是数组形式可以是List形式：</h3><p>1.当只传入names变量时，collection必须指定array或list类型：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">List</span>&lt;User&gt; findInfos(<span class="built_in">String</span><span class="meta">[</span><span class="meta">]</span> names);</span><br></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">select</span> id=<span class="string">"findInfos"</span> resultMap=<span class="string">"UserMap"</span>&gt;</span><br><span class="line">    <span class="built_in">SELECT</span> * FROM t_user</span><br><span class="line">    <span class="built_in">WHERE</span> id IN</span><br><span class="line">    &lt;foreach collection=<span class="string">"array"</span> item=<span class="string">"name"</span> index=<span class="string">"index"</span> <span class="keyword">open</span>=<span class="string">"("</span> <span class="built_in">close</span>=<span class="string">")"</span> separator=<span class="string">","</span>&gt;</span><br><span class="line">      <span class="meta">#&#123;name&#125;</span></span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/<span class="built_in">select</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">List</span>&lt;User&gt; findInfos(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; names);</span><br></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">select</span> id=<span class="string">"findInfos"</span> resultMap=<span class="string">"UserMap"</span>&gt;</span><br><span class="line">    <span class="built_in">SELECT</span> * FROM t_user</span><br><span class="line">    <span class="built_in">WHERE</span> id IN</span><br><span class="line">    &lt;foreach collection=<span class="string">"list"</span> item=<span class="string">"name"</span> index=<span class="string">"index"</span> <span class="keyword">open</span>=<span class="string">"("</span> <span class="built_in">close</span>=<span class="string">")"</span> separator=<span class="string">","</span>&gt;</span><br><span class="line">      <span class="meta">#&#123;name&#125;</span></span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/<span class="built_in">select</span>&gt;</span><br></pre></td></tr></table></figure><p> <strong>注意：array传入的时候parameterType可以是”Integer[]” ，可以是”int[]”，但不可以是”String[]”<br>报错 Could not resolve type alias ‘string[]’. Cannot find class: string[]</strong><br>2.当有其他变量时,利用map传入参数集时，可以直接将变量写在collection中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"class"</span>,<span class="class"><span class="keyword">class</span>)</span>;</span><br><span class="line">params.put(<span class="string">"names"</span>,names);</span><br></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">select</span> id=<span class="string">"findInfos"</span> resultMap=<span class="string">"UserMap"</span>&gt;</span><br><span class="line">    <span class="built_in">SELECT</span> * FROM t_user</span><br><span class="line">    <span class="built_in">WHERE</span> id IN</span><br><span class="line">    &lt;foreach collection=<span class="string">"names"</span> item=<span class="string">"name"</span> index=<span class="string">"index"</span> <span class="keyword">open</span>=<span class="string">"("</span> <span class="built_in">close</span>=<span class="string">")"</span> separator=<span class="string">","</span>&gt;</span><br><span class="line">      <span class="meta">#&#123;name&#125;</span></span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/<span class="built_in">select</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mybatis-where-中in的使用&quot;&gt;&lt;a href=&quot;#mybatis-where-中in的使用&quot; class=&quot;headerlink&quot; title=&quot;mybatis where 中in的使用&quot;&gt;&lt;/a&gt;mybatis where 中in的使用&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当我们使用mybatis时，在where中会用到 in 如：&lt;/p&gt;
&lt;p&gt;where name in (‘Jana’,’Tom’);&lt;/p&gt;
&lt;p&gt;我们可以在sql中直接写 name in (‘Jana’,’Tom’) 或者 name in (${names}) （备注：String&lt;br&gt; names = “‘JOJO’,’TOM’”; 使用$时会引起sql注入安全问题）&lt;/p&gt;
&lt;p&gt;但是我们无法在sql中直接写 name in (#{names});&lt;/p&gt;
&lt;p&gt;会报参数个数错误，因为’Jana’,’Tom’会被解析成两个传参&lt;/p&gt;
&lt;p&gt;String[] names={“Jana”,”Tom”};&lt;/p&gt;
&lt;p&gt;此时要用&lt;strong&gt;foreach函数&lt;/strong&gt;：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="mybatis" scheme="//aha.me/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="//aha.me/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>编程提升</title>
    <link href="//aha.me/2019/10/08/%E7%BC%96%E7%A8%8B%E6%8F%90%E5%8D%87/"/>
    <id>//aha.me/2019/10/08/编程提升/</id>
    <published>2019-10-08T07:11:05.000Z</published>
    <updated>2019-10-08T07:11:30.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口总结"><a href="#接口总结" class="headerlink" title="接口总结"></a>接口总结</h2><h3 id="资源防盗用-（高并发大数据之防止并解决web资源防盗链）"><a href="#资源防盗用-（高并发大数据之防止并解决web资源防盗链）" class="headerlink" title="资源防盗用 （高并发大数据之防止并解决web资源防盗链）"></a>资源防盗用 （高并发大数据之防止并解决web资源防盗链）</h3><a id="more"></a><blockquote><p>防盗链处理-部分链接额外处理(只要request.getHeader(“referer”)里的链接不包含网站链接则异常)<br>ps:request.getHeader(“referer”)获取来访者地址。只有通过链接访问当前页的时候，才能获取上一页的地址；</p><p>否则request.getHeader(“referer”)的值为null，通过window.open打开当前页或者直接输入地址，也为null。</p><p>若从 <a href="http://xxx/a.jsp" target="_blank" rel="noopener">http://xxx/a.jsp</a> 上 点击 a标签 至 <a href="http://XXXX/b.jsp" target="_blank" rel="noopener">http://XXXX/b.jsp</a></p><p>b.jsp 获取 request.getHeader(“referer”) 返回 <a href="http://xxx/a.jsp" target="_blank" rel="noopener">http://xxx/a.jsp</a></p></blockquote><h3 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认"></a>消息确认</h3><blockquote><p>接收消息，再根据Bean名称获取实例</p></blockquote><h3 id="小视频"><a href="#小视频" class="headerlink" title="小视频"></a>小视频</h3><blockquote><p>1.商家曝光<br>2.商品曝光<br>3.云店曝光(选择开通云店会员)<br>4.会员曝光<br>5.本地商品曝光<br>6.云仓曝光（众财商品）</p><ol start="7"><li>小视频封面</li><li>是否推荐</li><li>是否免费</li><li>审核状态<br>11.付费会员与非付费会员发布视频数量差别<br>12.视频水印<br>13.视频大小</li></ol></blockquote><h3 id="会员商品"><a href="#会员商品" class="headerlink" title="会员商品"></a>会员商品</h3><blockquote><p>1.商城商品     </p><ul><li>商品草稿     </li><li>商品修改 <ul><li>商品上架<ul><li>商品审核 </li><li>商品的商家会员价格 </li><li>货品相关修改会员价格 </li><li>以上均同步会员商品</li></ul></li></ul></li></ul><p>2.本地商品 </p><pre><code>*  商品草稿 *  商品修改     </code></pre><ul><li>商品上架 <ul><li>商品审核 </li><li>商品的商家会员价格 </li><li>以上均同步会员商品</li></ul></li></ul><p>3.套餐商品     </p><ul><li>套餐首次搭配时设置会员价格 <ul><li>添加多个商品套餐搭配时，如（AB问题:a有b没有 a没有b有 a有b有 当商品没有会员价格则取商品的套餐价格）<ul><li>套餐修改时同步会员商品 </li><li>套餐禁用同步会员商品</li></ul></li></ul></li></ul><p>4.疯狂星期二<br>5.会员日开放<br>6.疑点：如出现商家会员价格比平台会员价格低，则优先取最低价格</p></blockquote><h3 id="秒杀"><a href="#秒杀" class="headerlink" title="秒杀"></a>秒杀</h3><blockquote><p>1.秒杀商品会员价格<br>2.秒杀商品的周期性<br>3.疯狂星期二<br>4.会员日<br>5.只有付费会员可购买<br>6.如出现秒杀价格与会员价格低，则优先取最低的<br>7.添加全天(具体看活动时间段限制)</p></blockquote><h3 id="霸王劵"><a href="#霸王劵" class="headerlink" title="霸王劵"></a>霸王劵</h3><blockquote><p>1.绑定商家<br>2.绑定本地商家<br>3.绑定多个商品<br>4.满减，现金，实体<br>5.劵名称，使用说明，类型通用名称，使用门槛（不能低于商家差额商品中最低价格），劵面额（不能高于商家差额商品中最低价格），发行数量，限制领取数量，用劵时间（领劵时小时内，一段时间内，一段时间加小时内）<br>6.是否推送 推送时间<br>7.劵的使用范围描述<br>8.适用人群<br>9.哪些平台可用 疑点：劵码核销 订单记录 一年4张 普通会员可见不可用</p></blockquote><h3 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h3><blockquote><pre><code>1. 200元/月：天天领劵2.  4张/年：霸王餐券3.  200元/年：生日专享福利4.  200元优惠券：星座月随时领5.  秒杀日：正品限时购6.  1-5折：疯抢会员日7.  5折：本地生活特惠8.  特权铭牌：不凡身份9.  精美礼品卡：专属送礼套装10.  M豆在手：购物不用钱11.  30秒长视频：吸粉更简单12.  爆款推送：高利润商品13.  点金通道：省赚更轻松</code></pre></blockquote><h3 id="生日-星座月劵"><a href="#生日-星座月劵" class="headerlink" title="生日/星座月劵"></a>生日/星座月劵</h3><blockquote><p>1.按月份发送劵<br>2.可将实体，现金，满减（与实体没区别）,霸王,改造为星座或生日<br>3.按时间发送（须区分已领取的付费会员）<br>4.活动名称</p></blockquote><h3 id="M豆管理"><a href="#M豆管理" class="headerlink" title="M豆管理"></a>M豆管理</h3><blockquote><pre><code>1. 付费会员的权益2.  m豆有效期3.  m豆消耗4.  m豆来源5.  会员管理6.  商家关联</code></pre></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;接口总结&quot;&gt;&lt;a href=&quot;#接口总结&quot; class=&quot;headerlink&quot; title=&quot;接口总结&quot;&gt;&lt;/a&gt;接口总结&lt;/h2&gt;&lt;h3 id=&quot;资源防盗用-（高并发大数据之防止并解决web资源防盗链）&quot;&gt;&lt;a href=&quot;#资源防盗用-（高并发大数据之防止并解决web资源防盗链）&quot; class=&quot;headerlink&quot; title=&quot;资源防盗用 （高并发大数据之防止并解决web资源防盗链）&quot;&gt;&lt;/a&gt;资源防盗用 （高并发大数据之防止并解决web资源防盗链）&lt;/h3&gt;
    
    </summary>
    
      <category term="项目小结" scheme="//aha.me/categories/%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="项目总结" scheme="//aha.me/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>项目需求分析(付费会员,超级领主)</title>
    <link href="//aha.me/2019/10/08/%E9%A1%B9%E7%9B%AE%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <id>//aha.me/2019/10/08/项目需求分析/</id>
    <published>2019-10-08T06:33:47.000Z</published>
    <updated>2019-10-08T06:55:40.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目总结-付费会员-超级领主"><a href="#项目总结-付费会员-超级领主" class="headerlink" title="项目总结(付费会员,超级领主)"></a>项目总结(付费会员,超级领主)</h2><a id="more"></a><table><thead><tr><th>需求:付费会员,超级领主</th><th>问题</th><th>解决</th></tr></thead><tbody><tr><td>领券中心 本地和商城的优惠券我用标签来进行区了本地优惠券有距离显示商城的就没有秒杀日 添加了 一个新的栏目：会员秒杀我的优惠券用颜色区分了会员的优惠券和普通优惠券 会员优惠券还添加了一个“会员专享”的标识，之前原版的优惠券做了重新设计</td><td>一个商家是可能会有多个优惠券的。怎么显示？</td><td>只显示面额最大的</td></tr><tr><td>霸王餐专区的详细技术需求整体思路：真实的霸王餐劵+虚拟的霸王餐劵，真实的霸王餐劵可以领取，虚拟霸王餐劵（可以在后台设置领取数量）无法领取但可以跳转商品页。技术需求：1.现有3个商家可提供霸王餐劵，把真实的霸王餐劵置前。2.在真实的霸王餐劵后，添加“天河商圈”商家的虚拟霸王餐劵，虚拟的霸王餐劵用灰色表示，并加上【已领完】的字样或者标签。3.使用规则：请在24小时内使用！4.会员领取某一张真实的霸王餐劵后，霸王餐劵显示【已领】字样只有本地才有霸王餐，优惠券可下拉，商品可向右滑动 会员秒杀和秒杀混合一起，会员秒杀有标识有礼模板添加了“plus会员”的标识。按照霸王餐券的需求：增加了套餐的总价值、套餐名称、店铺预约电话和详细地址。</td><td>如果是想表达点击套餐名展开的话应该直接右箭头放最后面</td><td>固定放在最后边上</td></tr><tr><td>非付费会员点击“马上抢”弹出此弹框。会员只能领取一张霸王餐券非付费会员不能抢购有plus会员标签的商品非付费会员无法领取领劵中心的劵非付费会员不能使用有plus会员标签的模板</td><td>这里有问题1.这个秒杀是针对商品还是针对价格。如果是针对价格，不应该限制购买，只是进去是普通价格。如果是针对商品，那其它入口（例如搜索，商铺）又如何控制，那设计的界面很多。2.商品样式其它界面如果也出现plus专享商品那样式是否也照这样改。可能设计的ui很多（不是按照开会那样说加个tag吗？）。</td><td>1、针对商品，控制一级入口容易些2、只是添加会员商品标识，其它样式一样</td></tr><tr><td></td><td>商品入口非常多，甚至是路由跳转的，例如广告。一点也不容易。还不如在详情里面控制。</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目总结-付费会员-超级领主&quot;&gt;&lt;a href=&quot;#项目总结-付费会员-超级领主&quot; class=&quot;headerlink&quot; title=&quot;项目总结(付费会员,超级领主)&quot;&gt;&lt;/a&gt;项目总结(付费会员,超级领主)&lt;/h2&gt;
    
    </summary>
    
      <category term="付费会员,超级领主" scheme="//aha.me/categories/%E4%BB%98%E8%B4%B9%E4%BC%9A%E5%91%98-%E8%B6%85%E7%BA%A7%E9%A2%86%E4%B8%BB/"/>
    
      <category term="项目总结" scheme="//aha.me/categories/%E4%BB%98%E8%B4%B9%E4%BC%9A%E5%91%98-%E8%B6%85%E7%BA%A7%E9%A2%86%E4%B8%BB/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="项目分析" scheme="//aha.me/tags/%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Centos7部署yapi</title>
    <link href="//aha.me/2019/10/08/20191008p2p%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>//aha.me/2019/10/08/20191008p2p项目总结/</id>
    <published>2019-10-08T01:42:23.000Z</published>
    <updated>2019-10-08T06:31:16.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><ul><li>mongodb</li><li>node</li><li>pm2</li><li>yapi</li></ul><a id="more"></a><h2 id="mongodb安装步骤"><a href="#mongodb安装步骤" class="headerlink" title="mongodb安装步骤"></a>mongodb安装步骤</h2><blockquote><p>1.配置MongoDB的yum源<br>vim /etc/yum.repos.d/mongodb-org-3.4.repo</p></blockquote><h2 id="添加以下内容："><a href="#添加以下内容：" class="headerlink" title="添加以下内容："></a>添加以下内容：</h2><blockquote><p>[mongodb-org-3.4]<br>name=MongoDB Repository<br>baseurl=<a href="https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/" target="_blank" rel="noopener">https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/</a><br>gpgcheck=1<br>enabled=1<br>gpgkey=<a href="https://www.mongodb.org/static/pgp/server-3.4.asc" target="_blank" rel="noopener">https://www.mongodb.org/static/pgp/server-3.4.asc</a><br>这里可以修改 gpgcheck=0, 省去gpg验证<br>[root@localhost ~]# yum makecache<br>2.安装MongoDB<br>yum -y install mongodb-org<br>3.查看mongo安装位置<br>whereis mongod<br>4.查看修改配置文件 ：<br>vim /etc/mongod.conf<br>5.启动MongoDB<br>systemctl start mongod.service</p></blockquote><h2 id="node部署"><a href="#node部署" class="headerlink" title="node部署"></a>node部署</h2><blockquote><p>1.获取资源 curl -sL <a href="https://rpm.nodesource.com/setup_8.x" target="_blank" rel="noopener">https://rpm.nodesource.com/setup_8.x</a> | bash -<br>2.安装 yum install -y nodejs<br>3.查看node&amp;npm版本 node -v npm -v</p></blockquote><h2 id="pm2安装"><a href="#pm2安装" class="headerlink" title="pm2安装"></a>pm2安装</h2><blockquote><p>1.全局安装，npm install -g pm2<br>2.保存当前进程状态，pm2 save<br>3.生成开机自启动服务，pm2 startup<br>4.查看启动项，systemctl list-unit-files | grep enable</p></blockquote><h2 id="部署YApi"><a href="#部署YApi" class="headerlink" title="部署YApi"></a>部署YApi</h2><blockquote><p>1 安装<br>1). npm install -g yapi-cli –registry<br><a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br> 2). yapi server</p><p>2.根据提示，浏览器访问 http://部署YApi服务器的IP:9090</p><p>3.填写完信息后，点击“开始部署”。（大概等待1分钟）</p><p>1). 退出当前状态 CTRL + C 2).切换到部署目录下 3).启动服务 node vendors/server/app.js<br>4).直接访问 http://部署YApi服务器的IP/login</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生产环境&quot;&gt;&lt;a href=&quot;#生产环境&quot; class=&quot;headerlink&quot; title=&quot;生产环境&quot;&gt;&lt;/a&gt;生产环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;li&gt;node&lt;/li&gt;
&lt;li&gt;pm2&lt;/li&gt;
&lt;li&gt;yapi&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Centos7" scheme="//aha.me/categories/Centos7/"/>
    
      <category term="文档" scheme="//aha.me/categories/Centos7/%E6%96%87%E6%A1%A3/"/>
    
      <category term="接口" scheme="//aha.me/categories/Centos7/%E6%96%87%E6%A1%A3/%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="node" scheme="//aha.me/categories/Centos7/%E6%96%87%E6%A1%A3/%E6%8E%A5%E5%8F%A3/node/"/>
    
    
      <category term="项目总结" scheme="//aha.me/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Ajax跨域请求，同时保证session一致</title>
    <link href="//aha.me/2019/04/17/Ajax%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%90%8C%E6%97%B6%E4%BF%9D%E8%AF%81session%E4%B8%80%E8%87%B4/"/>
    <id>//aha.me/2019/04/17/Ajax跨域请求，同时保证session一致/</id>
    <published>2019-04-17T02:13:24.000Z</published>
    <updated>2019-04-17T02:17:11.036Z</updated>
    
    <content type="html"><![CDATA[<p>最近在项目中碰到一个问题，ajax跨域请求时，每次tomcat都会生成一个新的session。</p><p>在百度中找到了解决方法。<a href="http://blog.sina.com.cn/s/blog_e774c01e0102we37.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_e774c01e0102we37.html</a></p><p>当我们在进行跨域访问的时候，我们的sessionId就不会被保存下来，也就是说，每一次的请求，服务器就会以为是一个新的人，而不是同一个人，为了解决这样的办法，需要对跨域访问的request头部重写。</p><a id="more"></a><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"textml;charset=UTF-8"</span>);</span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, request.getHeader(<span class="string">"Origin"</span>));</span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"<span class="keyword">POST</span>, <span class="keyword">GET</span>, <span class="keyword">OPTIONS</span>, <span class="keyword">DELETE</span>"</span>);</span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"0"</span>);</span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With,userId,token"</span>);</span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">response.setHeader(<span class="string">"XDomainRequestAllowed"</span>,<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><p>同时ajax也需要设置withCredentials和crossDomain</p><p>jQuery的ajax</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:url,</span><br><span class="line"><span class="comment">//加上这句话</span></span><br><span class="line">xhrFields: &#123;</span><br><span class="line">           withCredentials: <span class="literal">true</span></span><br><span class="line">       &#125;,</span><br><span class="line">       crossDomain: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"test"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>原生ajax<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest() : <span class="built_in">window</span>.ActiveXObject ? <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>) : <span class="literal">null</span>;</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="built_in">url</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//设置支持跨域和带cookie一起发送</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">xhr.crossDomain = <span class="literal">true</span>;</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在项目中碰到一个问题，ajax跨域请求时，每次tomcat都会生成一个新的session。&lt;/p&gt;
&lt;p&gt;在百度中找到了解决方法。&lt;a href=&quot;http://blog.sina.com.cn/s/blog_e774c01e0102we37.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.sina.com.cn/s/blog_e774c01e0102we37.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当我们在进行跨域访问的时候，我们的sessionId就不会被保存下来，也就是说，每一次的请求，服务器就会以为是一个新的人，而不是同一个人，为了解决这样的办法，需要对跨域访问的request头部重写。&lt;/p&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>轻松搞定数据验证（二）</title>
    <link href="//aha.me/2019/02/19/%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>//aha.me/2019/02/19/轻松搞定数据验证（二）/</id>
    <published>2019-02-19T14:19:38.000Z</published>
    <updated>2019-02-19T14:23:22.646Z</updated>
    
    <content type="html"><![CDATA[<p>一起来学SpringBoot | 第十九篇：轻松搞定数据验证（一） 中介绍了数据有效性校验的重要性，也简单介绍了如何用轻松的方式搞定数据有效性校验，但是当系统自带的注解无法满足我们的要求时候应该咋办呢？这就是本章将给各位介绍的自定义 Validator 注解</p><a id="more"></a><h2 id="为何要自定义"><a href="#为何要自定义" class="headerlink" title="为何要自定义"></a>为何要自定义</h2><blockquote><p>javax.validation 包与 hibernate-validator 包中存在的注解几乎可以满足大部分的要求，又拥有基于正则表达式的@Pattern，为什么还需要自己去定义呢？<br>原因如下</p><ul><li>正则效率不高</li><li>正则可读性不好</li><li>正则门槛较高，很多开发者并不会编写正则表达式</li></ul></blockquote><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>在 pom.xml 中添加上 spring-boot-starter-web 的依赖即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>这里定义了一个 @DateTime 注解，在该注解上标注了 @Constraint 注解，它的作用就是指定一个具体的校验器类</p><blockquote><p>关键字段（强制性）</p><ul><li>message： 验证失败提示的消息内容</li><li>groups： 为约束指定验证组（非常不错的一个功能，下一章介绍）</li><li>payload： 不太清楚（欢迎留言交流）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.battcn</span><span class="selector-class">.annotation</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">com</span><span class="selector-class">.battcn</span><span class="selector-class">.validator</span><span class="selector-class">.DateTimeValidator</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">javax</span><span class="selector-class">.validation</span><span class="selector-class">.Constraint</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">javax</span><span class="selector-class">.validation</span><span class="selector-class">.Payload</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.Retention</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.Target</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">static</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.ElementType</span><span class="selector-class">.FIELD</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">static</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.ElementType</span><span class="selector-class">.PARAMETER</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">static</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.RetentionPolicy</span><span class="selector-class">.RUNTIME</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author Levin</span></span><br><span class="line"><span class="comment"> * @since 2018/6/6 0006</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="keyword">Target</span>(&#123;<span class="selector-tag">FIELD</span>, <span class="selector-tag">PARAMETER</span>&#125;)</span><br><span class="line">@<span class="keyword">Retention</span>(<span class="keyword">RUNTIME</span>)</span><br><span class="line">@<span class="keyword">Constraint</span>(<span class="keyword">validatedBy</span> = DateTimeValidator.class)</span><br><span class="line">public @interface DateTime &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">String</span> <span class="selector-tag">message</span>() <span class="selector-tag">default</span> "格式错误";</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">String</span> <span class="selector-tag">format</span>() <span class="selector-tag">default</span> "<span class="selector-tag">yyyy-MM-dd</span>";</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">Class</span>&lt;?&gt;<span class="selector-attr">[]</span> <span class="selector-tag">groups</span>() <span class="selector-tag">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">Class</span>&lt;? <span class="selector-tag">extends</span> <span class="selector-tag">Payload</span>&gt;<span class="selector-attr">[]</span> <span class="selector-tag">payload</span>() <span class="selector-tag">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="具体验证"><a href="#具体验证" class="headerlink" title="具体验证"></a>具体验证</h2><p>定义校验器类 DateTimeValidator 实现 ConstraintValidator 接口，实现接口后需要实现它里面的 initialize： 与 isValid： 方法。</p><blockquote><p>方法介绍</p><ul><li>initialize： 主要用于初始化，它可以获得当前注解的所有属性</li><li>isValid： 进行约束验证的主体方法，其中 value 就是验证参数的具体实例，context 代表约束执行的上下文环境。<br>这里的验证方式虽然简单，但职责明确；为空验证可以使用 @NotBlank、@NotNull、@NotEmpty 等注解来进行控制，而不是在一个注解中做各种各样的规则判断，应该职责分离<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.battcn.annotation.DateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期格式验证</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">DateTime</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DateTime dateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(DateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果 value 为空则不进行格式验证，为空验证可以使用 @NotBlank @NotNull @NotEmpty 等注解来进行控制，职责分离</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String format = dateTime.format();</span><br><span class="line">        <span class="keyword">if</span> (value.length() != format.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(format);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            simpleDateFormat.parse(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/test"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String test(<span class="meta">@DateTime(message = <span class="meta-string">"您输入的格式错误，正确的格式为：&#123;format&#125;"</span>, format = <span class="meta-string">"yyyy-MM-dd HH:mm"</span>)</span> String date) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>完成准备事项后，启动 Chapter19Application 自行测试即可，测试手段相信大伙都不陌生了，如 浏览器、postman、junit、swagger，此处基于 postman，如果你觉得自带的异常信息不够友好，那么配上轻松搞定全局异常 可以轻松搞定…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一起来学SpringBoot | 第十九篇：轻松搞定数据验证（一） 中介绍了数据有效性校验的重要性，也简单介绍了如何用轻松的方式搞定数据有效性校验，但是当系统自带的注解无法满足我们的要求时候应该咋办呢？这就是本章将给各位介绍的自定义 Validator 注解&lt;/p&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
      <category term="轻松搞定数据验证（二）" scheme="//aha.me/categories/springBoot/%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="轻松搞定数据验证（二）" scheme="//aha.me/tags/%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>轻松搞定数据验证（一）</title>
    <link href="//aha.me/2019/02/19/%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>//aha.me/2019/02/19/轻松搞定数据验证（一）/</id>
    <published>2019-02-19T13:48:23.000Z</published>
    <updated>2019-02-19T14:01:56.928Z</updated>
    
    <content type="html"><![CDATA[<p>对于任何一个应用而言，客户端做的数据有效性验证都不是安全有效的，而数据验证又是一个企业级项目架构上最为基础的功能模块，这时候就要求我们在服务端接收到数据的时候也对数据的有效性进行验证。为什么这么说呢？往往我们在编写程序的时候都会感觉后台的验证无关紧要，毕竟客户端已经做过验证了，后端没必要在浪费资源对数据进行验证了，但恰恰是这种思维最为容易被别人钻空子。毕竟只要有点开发经验的都知道，我们完全可以模拟 HTTP 请求到后台地址，模拟请求过程中发送一些涉及系统安全的数据到后台，后果可想而知….</p><a id="more"></a><h2 id="为什么要轻松搞定？"><a href="#为什么要轻松搞定？" class="headerlink" title="为什么要轻松搞定？"></a>为什么要轻松搞定？</h2><p>相信通过上面的阅读，大家对数据验证的重要性有了一定的了解，那么为什么我这里要说 轻松搞定呢？</p><p>下面这段代码很多人一定见到过，就是对参数进行有效性校验，但仔细观察的话就会发现；随着参数的增加，格式的变化，校验数据有效性的代码愈发的繁琐杂乱，一点都不轻松<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> test1(<span class="keyword">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NullPointerException</span>(<span class="string">"name 不能为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (name.length() &lt; <span class="number">2</span> || name.length() &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">RuntimeException</span>(<span class="string">"name 长度必须在 2 - 10 之间"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过 Spring Boot 完成参数后台数据校验，轻松搞定数据有效性验证，留出更多的时间来和小姐姐聊天…</p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>在 pom.xml 中添加上 spring-boot-starter-web 的依赖即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="JSR-303-注释介绍"><a href="#JSR-303-注释介绍" class="headerlink" title="JSR-303 注释介绍"></a>JSR-303 注释介绍</h2><p>这里只列举了 javax.validation 包下的注解，同理在 spring-boot-starter-web 包中也存在 hibernate-validator 验证包，里面包含了一些 javax.validation 没有的注解，有兴趣的可以看看</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@NotNull</td><td>限制必须不为null</td></tr><tr><td>@NotEmpty</td><td>验证注解的元素值不为 null 且不为空（字符串长度不为0、集合大小不为0）</td></tr><tr><td>@NotBlank</td><td>验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格</td></tr><tr><td>@Pattern(value)</td><td>限制必须符合指定的正则表达式</td></tr><tr><td>@Size(max,min)</td><td>限制字符长度必须在 min 到 max 之间（也可以用在集合上）</td></tr><tr><td>@Email</td><td>验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</td></tr><tr><td>@Max(value)</td><td>限制必须为一个不大于指定值的数字</td></tr><tr><td>@Min(value)</td><td>限制必须为一个不小于指定值的数字</td></tr><tr><td>@DecimalMax(value)</td><td>限制必须为一个不大于指定值的数字</td></tr><tr><td>@DecimalMin(value)</td><td>限制必须为一个不小于指定值的数字</td></tr><tr><td>@Null</td><td>限制只能为null（很少用）</td></tr><tr><td>@AssertFalse</td><td>限制必须为false （很少用）</td></tr><tr><td>@AssertTrue</td><td>限制必须为true （很少用）</td></tr><tr><td>@Past</td><td>限制必须是一个过去的日期</td></tr><tr><td>@Future</td><td>限制必须是一个将来的日期</td></tr><tr><td>@Digits(integer,fraction)</td><td>限制必须为一个小数，且整数部分的位数不能超过 integer，小数部分的位数不能超过 fraction （很少用）</td></tr></tbody></table><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>为了体现 validation 的强大，分别演示普通参数属性验证与对象的验证<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.DecimalMin;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/6/5 0005</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = <span class="meta-string">"name 不允许为空"</span>)</span></span><br><span class="line">    <span class="meta">@Length(min = 2, max = 10, message = <span class="meta-string">"name 长度必须在 &#123;min&#125; - &#123;max&#125; 之间"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NotNull(message = <span class="meta-string">"price 不允许为空"</span>)</span></span><br><span class="line">    <span class="meta">@DecimalMin(value = <span class="meta-string">"0.1"</span>, message = <span class="meta-string">"价格不能低于 &#123;value&#125;"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略 GET SET ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><p>与前面的代码相比，新的代码中仅仅多了几个注解而已。（此处只是为了图方便写在了 Controller 层，同理你可以将它作用在 Service 层）</p><blockquote><p>注解介绍<br>@Validated： 开启数据有效性校验，添加在类上即为验证方法，添加在方法参数中即为验证参数对象。（添加在方法上无效）<br>@NotBlank： 被注释的字符串不允许为空（value.trim() &gt; 0 ? true : false）<br>@Length： 被注释的字符串的大小必须在指定的范围内<br>@NotNull： 被注释的字段不允许为空(value != null ? true : false)<br>@DecimalMin： 被注释的字段必须大于或等于指定的数值<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/test2"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String test2(<span class="meta">@NotBlank(message = <span class="meta-string">"name 不能为空"</span>)</span> <span class="meta">@Length(min = 2, max = 10, message = <span class="meta-string">"name 长度必须在 &#123;min&#125; - &#123;max&#125; 之间"</span>)</span> String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/test3"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String test3(<span class="meta">@Validated</span> Book book) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>完成准备事项后，启动 Chapter18Application 自行测试即可，测试手段相信大伙都不陌生了，如 浏览器、postman、junit、swagger，此处基于 postman，如果你觉得自带的异常信息不够友好</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于任何一个应用而言，客户端做的数据有效性验证都不是安全有效的，而数据验证又是一个企业级项目架构上最为基础的功能模块，这时候就要求我们在服务端接收到数据的时候也对数据的有效性进行验证。为什么这么说呢？往往我们在编写程序的时候都会感觉后台的验证无关紧要，毕竟客户端已经做过验证了，后端没必要在浪费资源对数据进行验证了，但恰恰是这种思维最为容易被别人钻空子。毕竟只要有点开发经验的都知道，我们完全可以模拟 HTTP 请求到后台地址，模拟请求过程中发送一些涉及系统安全的数据到后台，后果可想而知….&lt;/p&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
      <category term="轻松搞定数据验证（一）" scheme="//aha.me/categories/springBoot/%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="轻松搞定数据验证（一）" scheme="//aha.me/tags/%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>轻松搞定全局异常</title>
    <link href="//aha.me/2019/02/19/%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8/"/>
    <id>//aha.me/2019/02/19/轻松搞定全局异常/</id>
    <published>2019-02-19T13:30:31.000Z</published>
    <updated>2019-02-19T13:37:26.831Z</updated>
    
    <content type="html"><![CDATA[<p>实际项目开发中，程序往往会发生各式各样的异常情况，特别是身为服务端开发人员的我们，总是不停的编写接口提供给前端调用，分工协作的情况下，避免不了异常的发生，如果直接将错误的信息直接暴露给用户，这样的体验可想而知，且对黑客而言，详细异常信息往往会提供非常大的帮助…</p><a id="more"></a><h2 id="初窥异常"><a href="#初窥异常" class="headerlink" title="初窥异常"></a>初窥异常</h2><p>一个简单的异常请求的接口<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO 这里只是模拟异常，假设业务处理的时候出现错误了，或者空指针了等等...</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果这接口是给第三方调用或者是自己公司的系统，看到这种错误估计得暴走吧….</p><blockquote><p>笨方法（极其不建议）<br>采用try-catch的方式，手动捕获异常信息，然后返回对应的结果集，相信很多人都看到过类似的代码（如：封装成Result对象）；该方法虽然间接性的解决错误暴露的问题，同样的弊端也很明显，增加了大量的代码量，当异常过多的情况下对应的catch层愈发的多了起来，很难管理这些业务异常和错误码之间的匹配，所以最好的方法就是通过简单配置全局掌控….<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(<span class="string">"/test2"</span>)</span><br><span class="line"><span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; test2() &#123;</span><br><span class="line">    Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="comment">// TODO 直接捕获所有代码块，然后在 cache</span></span><br><span class="line">    <span class="built_in">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        result.<span class="built_in">put</span>(<span class="string">"code"</span>, <span class="string">"200"</span>);</span><br><span class="line">        result.<span class="built_in">put</span>(<span class="string">"data"</span>, <span class="string">"具体返回的结果集"</span>);</span><br><span class="line">    &#125; <span class="built_in">catch</span> (Exception e) &#123;</span><br><span class="line">        result.<span class="built_in">put</span>(<span class="string">"code"</span>, <span class="string">"500"</span>);</span><br><span class="line">        result.<span class="built_in">put</span>(<span class="string">"message"</span>, <span class="string">"请求错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><p>通过上面的阅读大家也大致能了解到为啥需要对异常进行全局捕获了，接下来就看看 Spring Boot 提供的解决方案</p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p>在 pom.xml 中添加上 spring-boot-starter-web 的依赖即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>在应用开发过程中，除系统自身的异常外，不同业务场景中用到的异常也不一样，为了与标题 轻松搞定全局异常 更加的贴切，定义个自己的异常，看看如何捕获…<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/6/1 0001</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4564124491192825748L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(<span class="keyword">int</span> code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.setCode(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="异常信息模板"><a href="#异常信息模板" class="headerlink" title="异常信息模板"></a>异常信息模板</h3><p>定义返回的异常信息的格式，这样异常信息风格更为统一<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.battcn.<span class="keyword">exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/6/1 0001</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorResponseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">// 省略 get set </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><p>仔细一看是不是和平时正常写的代码没啥区别，不要急，接着看….<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.battcn.exception.CustomException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常演示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/5/31 0031</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/test3"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String test3(Integer num) &#123;</span><br><span class="line">        <span class="comment">// TODO 演示需要，实际上参数是否为空通过 @RequestParam(required = true)  就可以控制</span></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new CustomException(<span class="number">400</span>, <span class="string">"num不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        int i = <span class="number">10</span> / num;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"result:"</span> + i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="异常处理（关键）"><a href="#异常处理（关键）" class="headerlink" title="异常处理（关键）"></a>异常处理（关键）</h3><blockquote><p>注解概述<br>@ControllerAdvice 捕获 Controller 层抛出的异常，如果添加 @ResponseBody 返回信息则为JSON 格式。<br>@RestControllerAdvice 相当于 @ControllerAdvice 与 @ResponseBody 的结合体。<br>@ExceptionHandler 统一处理一种类的异常，减少代码重复率，降低复杂度。<br>创建一个 GlobalExceptionHandler 类，并添加上 @RestControllerAdvice 注解就可以定义出异常通知类了，然后在定义的方法中添加上 @ExceptionHandler 即可实现异常的捕捉…<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.exception.CustomException;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.exception.ErrorResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/6/1 0001</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> <span class="keyword">extends</span> <span class="title">ResponseEntityExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义要捕获的异常 可以多个 <span class="doctag">@ExceptionHandler</span>(&#123;&#125;)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e        exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(CustomException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorResponseEntity <span class="title">customExceptionHandler</span><span class="params">(HttpServletRequest request, <span class="keyword">final</span> Exception e, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        response.setStatus(HttpStatus.BAD_REQUEST.value());</span><br><span class="line">        CustomException exception = (CustomException) e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponseEntity(exception.getCode(), exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 捕获  RuntimeException 异常</span></span><br><span class="line"><span class="comment">     * TODO  如果你觉得在一个 exceptionHandler 通过  if (e instanceof xxxException) 太麻烦</span></span><br><span class="line"><span class="comment">     * TODO  那么你还可以自己写多个不同的 exceptionHandler 处理不同异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e        exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(RuntimeException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorResponseEntity <span class="title">runtimeExceptionHandler</span><span class="params">(HttpServletRequest request, <span class="keyword">final</span> Exception e, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        response.setStatus(HttpStatus.BAD_REQUEST.value());</span><br><span class="line">        RuntimeException exception = (RuntimeException) e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponseEntity(<span class="number">400</span>, exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用的接口映射异常处理方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title">handleExceptionInternal</span><span class="params">(Exception ex, Object body, HttpHeaders headers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                             HttpStatus status, WebRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> MethodArgumentNotValidException) &#123;</span><br><span class="line">            MethodArgumentNotValidException exception = (MethodArgumentNotValidException) ex;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> ErrorResponseEntity(status.value(), exception.getBindingResult().getAllErrors().get(<span class="number">0</span>).getDefaultMessage()), status);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> MethodArgumentTypeMismatchException) &#123;</span><br><span class="line">            MethodArgumentTypeMismatchException exception = (MethodArgumentTypeMismatchException) ex;</span><br><span class="line">            logger.error(<span class="string">"参数转换失败，方法："</span> + exception.getParameter().getMethod().getName() + <span class="string">"，参数："</span> + exception.getName()</span><br><span class="line">                    + <span class="string">",信息："</span> + exception.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> ErrorResponseEntity(status.value(), <span class="string">"参数转换失败"</span>), status);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> ErrorResponseEntity(status.value(), <span class="string">"参数转换失败"</span>), status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>完成准备事项后，启动Chapter17Application，通过下面的测试结果可以发现，真的是 so easy，代码变得整洁了，扩展性也变好了…</p><blockquote><p>访问 <a href="http://localhost:8080/test3" target="_blank" rel="noopener">http://localhost:8080/test3</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"code"</span>:<span class="number">400</span>,<span class="attr">"message"</span>:<span class="string">"num不能为空"</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>访问 <a href="http://localhost:8080/test3?num=0" target="_blank" rel="noopener">http://localhost:8080/test3?num=0</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"code"</span>:<span class="number">400</span>,<span class="attr">"message"</span>:<span class="string">"/ by zero"</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>访问 <a href="http://localhost:8080/test3?num=5" target="_blank" rel="noopener">http://localhost:8080/test3?num=5</a><br>result:2</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实际项目开发中，程序往往会发生各式各样的异常情况，特别是身为服务端开发人员的我们，总是不停的编写接口提供给前端调用，分工协作的情况下，避免不了异常的发生，如果直接将错误的信息直接暴露给用户，这样的体验可想而知，且对黑客而言，详细异常信息往往会提供非常大的帮助…&lt;/p&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
      <category term="轻松搞定全局异常" scheme="//aha.me/categories/springBoot/%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="轻松搞定全局异常" scheme="//aha.me/tags/%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>定时任务详解</title>
    <link href="//aha.me/2019/02/19/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%AF%A6%E8%A7%A3/"/>
    <id>//aha.me/2019/02/19/定时任务详解/</id>
    <published>2019-02-19T05:36:49.000Z</published>
    <updated>2019-02-19T05:40:27.851Z</updated>
    
    <content type="html"><![CDATA[<p>在我们日常开发中，经常会遇到 数据定时增量同步、定时发送邮件、爬虫定时抓取 的需求；这时我们可以采用定时任务的方式去进行工作…..<br><a id="more"></a></p><h2 id="定时任务概述"><a href="#定时任务概述" class="headerlink" title="定时任务概述"></a>定时任务概述</h2><p>定时任务：顾名思义就是在指定/特定的时间进行工作，比如我们的手机闹钟，它就是一种定时任务。</p><blockquote><p>实现方式<br>Timer： JDK自带的java.util.Timer；通过调度java.util.TimerTask的方式 让程序按照某一个频度执行，但不能在指定时间运行。 一般用的较少。</p></blockquote><p>ScheduledExecutorService： JDK1.5新增的，位于java.util.concurrent包中；是基于线程池设计的定时任务类，每个调度任务都会被分配到线程池中，并发执行，互不影响。</p><p>Spring Task： Spring3.0 以后新增了task，一个轻量级的Quartz，功能够用，用法简单。</p><p>Quartz： 功能最为强大的调度器，可以让程序在指定时间执行，也可以按照某一个频度执行，它还可以动态开关，但是配置起来比较复杂。现如今开源社区中已经很多基于Quartz 实现的分布式定时任务项目（xxl-job、elastic-job）。</p><h2 id="Timer-方式"><a href="#Timer-方式" class="headerlink" title="Timer 方式"></a>Timer 方式</h2><p>基于 Timer 实现的定时调度，基本就是手撸代码，目前应用较少，不是很推荐<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于Timer实现的定时调度（不推荐，用该方式不如用 ScheduledExecutorService ）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/5/29 0029</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TimerTask timerTask = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"执行任务:"</span> + LocalDateTime.now());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        <span class="comment">// timerTask：需要执行的任务</span></span><br><span class="line">        <span class="comment">// delay：延迟时间（以毫秒为单位）</span></span><br><span class="line">        <span class="comment">// period：间隔时间（以毫秒为单位）</span></span><br><span class="line">        timer.schedule(timerTask, <span class="number">5000</span>, <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="基于-ScheduledExecutorService"><a href="#基于-ScheduledExecutorService" class="headerlink" title="基于 ScheduledExecutorService"></a>基于 ScheduledExecutorService</h2><p>与Timer很类似，但它的效果更好，多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中有一个因任务报错没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则可以规避这个问题<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.battcn.scheduled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于 ScheduledExecutorService 方式,相对的比 Timer 要好</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author Levin</span></span><br><span class="line"><span class="comment"> * @since 2018/5/29 0029</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledExecutorServiceDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> service = <span class="type">Executors</span>.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 参数：1、具体执行的任务   2、首次执行的延时时间</span></span><br><span class="line">        <span class="comment">//      3、任务执行间隔     4、间隔时间单位</span></span><br><span class="line">        service.scheduleAtFixedRate(() -&gt; <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"执行任务A:"</span> + <span class="type">LocalDateTime</span>.now()), <span class="number">0</span>, <span class="number">3</span>, <span class="type">TimeUnit</span>.<span class="type">SECONDS</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Spring-Task-本章关键"><a href="#Spring-Task-本章关键" class="headerlink" title="Spring Task(本章关键)"></a>Spring Task(本章关键)</h2><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><blockquote><p>@Scheduled 定时任务的核心<br>cron： cron表达式，根据表达式循环执行，与fixedRate属性不同的是它是将时间进行了切割。（@Scheduled(cron = “0/5 <em> </em> <em> </em> *”)任务将在5、10、15、20…这种情况下进行工作）<br>fixedRate： 每隔多久执行一次；（@Scheduled(fixedRate = 1000) 假设第一次工作时间为2018-05-29 16:58:28，工作时长为3秒，那么下次任务的时候就是2018-05-29 16:58:31，配置成异步后，只要到了执行时间就会开辟新的线程工作），如果（@Scheduled(fixedRate = 3000) 假设第一次工作时间为2018-05-29 16:58:28，工作时长为1秒，那么下次任务的时间依然是2018-05-29 16:58:31）<br>fixedDelay： 当前任务执行完毕后等待多久继续下次任务（@Scheduled(fixedDelay = 3000) 假设第一次任务工作时间为2018-05-29 16:54:33，工作时长为5秒，那么下次任务的时间就是2018-05-29 16:54:41）<br>initialDelay： 第一次执行延迟时间，只是做延迟的设定，与fixedDelay关系密切，配合使用，相辅相成。<br>@Async 代表该任务可以进行异步工作，由原本的串行改为并行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于 Spring 自带的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/5/29 0029</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTaskDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(SpringTaskDemo.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/1 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        log.info(<span class="string">"scheduled1 每1秒执行一次：&#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        log.info(<span class="string">"scheduled2 每1秒执行一次：&#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">3000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        log.info(<span class="string">"scheduled3 上次执行完毕后隔3秒继续执行：&#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>cron表达式在线生成： <a href="http://www.pdtools.net/tools/becron.jsp" target="_blank" rel="noopener">http://www.pdtools.net/tools/becron.jsp</a></p><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><p>@EnableScheduling 注解表示开启对@Scheduled注解的解析；同时new ThreadPoolTaskScheduler()也是相当的关键，通过阅读过源码可以发现默认情况下的 private volatile int poolSize = 1;这就导致了多个任务的情况下容易出现竞争情况（多个任务的情况下，如果第一个任务没执行完毕，后续的任务将会进入等待状态）。</p><p>@EnableAsync 注解表示开启@Async注解的解析；作用就是将串行化的任务给并行化了。（@Scheduled(cron = “0/1 <em> </em> <em> </em> *”)假设第一次工作时间为2018-05-29 17:30:55，工作周期为3秒；如果不加@Async那么下一次工作时间就是2018-05-29 17:30:59；如果加了@Async 下一次工作时间就是2018-05-29 17:30:56）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter15Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter15Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 很关键：默认情况下 TaskScheduler 的 poolSize = 1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskScheduler <span class="title">taskScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskScheduler taskScheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">        taskScheduler.setPoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> taskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:35:51.479</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-1]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled2</span> <span class="string">每1秒执行一次：2018-05-29T17:35:51.479</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:35:52.005</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-3]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled1</span> <span class="string">每1秒执行一次：2018-05-29T17:35:52.005</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:35:53.002</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-5]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled1</span> <span class="string">每1秒执行一次：2018-05-29T17:35:53.002</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:35:53.468</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-2]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled3</span> <span class="string">上次执行完毕后隔3秒继续执行：2018-05-29T17:35:53.468</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:35:54.002</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-6]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled1</span> <span class="string">每1秒执行一次：2018-05-29T17:35:54.002</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:35:54.479</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-7]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled2</span> <span class="string">每1秒执行一次：2018-05-29T17:35:54.479</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:35:55.002</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-8]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled1</span> <span class="string">每1秒执行一次：2018-05-29T17:35:55.002</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:35:56.001</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-1]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled1</span> <span class="string">每1秒执行一次：2018-05-29T17:35:56.001</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:35:57.001</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-3]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled1</span> <span class="string">每1秒执行一次：2018-05-29T17:35:57.001</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:35:57.479</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-7]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled2</span> <span class="string">每1秒执行一次：2018-05-29T17:35:57.479</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:35:58.003</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-4]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled1</span> <span class="string">每1秒执行一次：2018-05-29T17:35:58.003</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:35:59.001</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-5]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled1</span> <span class="string">每1秒执行一次：2018-05-29T17:35:59.001</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:36:00.002</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-6]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled1</span> <span class="string">每1秒执行一次：2018-05-29T17:36:00.002</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:36:00.480</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-7]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled2</span> <span class="string">每1秒执行一次：2018-05-29T17:36:00.480</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:36:01.001</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-8]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled1</span> <span class="string">每1秒执行一次：2018-05-29T17:36:01.001</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">17</span><span class="string">:36:01.470</span>  <span class="string">INFO</span> <span class="number">32640</span> <span class="meta">---</span> <span class="string">[taskScheduler-9]</span> <span class="string">com.battcn.task.SpringTaskDemo</span>           <span class="string">:</span> <span class="string">scheduled3</span> <span class="string">上次执行完毕后隔3秒继续执行：2018-05-29T17:36:01.470</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们日常开发中，经常会遇到 数据定时增量同步、定时发送邮件、爬虫定时抓取 的需求；这时我们可以采用定时任务的方式去进行工作…..&lt;br&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>集成Swagger在线调试</title>
    <link href="//aha.me/2019/02/18/%E9%9B%86%E6%88%90Swagger%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95/"/>
    <id>//aha.me/2019/02/18/集成Swagger在线调试/</id>
    <published>2019-02-18T13:47:32.000Z</published>
    <updated>2019-02-18T13:51:06.223Z</updated>
    
    <content type="html"><![CDATA[<p>随着互联网技术的发展，现在的网站架构基本都由原来的后端渲染，变成了：前端渲染、前后端分离的形态，而且前端技术和后端技术在各自的道路上越走越远。</p><p>前端和后端唯一联系，变成了API接口；API文档自然就成了前后端开发人员联系的纽带，变得尤为的重要，swagger就是一款让你更好的书写API文档的框架。<br><a id="more"></a></p><h2 id="文档工具"><a href="#文档工具" class="headerlink" title="文档工具"></a>文档工具</h2><p>没有API文档工具之前，基本都是手写API文档的，如有在Word上写的，有在对应的项目目录下readme.md上写的，每个公司都有每个公司的玩法，无所谓好坏。但是这种手写文档带来的弊端就是维护起来苦不堪言，对于接口容易发生变化的开发者来说，维护文档就是噩梦….</p><p>好在现如今市场上书写API文档的工具有很多，常见的有 postman、yapi、阿里的RAP 但是能称之为框架的，估计也只有swagger了。</p><blockquote><p>swagger 优缺点<br>集成方便，功能强大<br>在线调试与文档生成<br>代码耦合，需要注解支持，但不影响程序性能</p></blockquote><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>在 pom.xml 中添加 swagger-spring-boot-starter 的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.battcn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  swagger:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    title:</span> <span class="string">标题</span></span><br><span class="line"><span class="attr">    description:</span> <span class="string">描述信息</span></span><br><span class="line"><span class="attr">    version:</span> <span class="string">系统版本号</span></span><br><span class="line"><span class="attr">    contact:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">维护者信息</span></span><br><span class="line"><span class="attr">    base-package:</span> <span class="string">swagger扫描的基础包，默认：全扫描(分组情况下此处可不配置)</span></span><br><span class="line">    <span class="comment">#全局参数,比如Token之类的验证信息可以全局话配置</span></span><br><span class="line"><span class="attr">    global-operation-parameters:</span></span><br><span class="line"><span class="attr">    -   description:</span> <span class="string">'Token信息,必填项'</span></span><br><span class="line"><span class="attr">        modelRef:</span> <span class="string">'string'</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">'Authorization'</span></span><br><span class="line"><span class="attr">        parameter-type:</span> <span class="string">'header'</span></span><br><span class="line"><span class="attr">        required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    groups:</span></span><br><span class="line"><span class="attr">      basic-group:</span></span><br><span class="line"><span class="attr">        base-package:</span> <span class="string">com.example</span></span><br><span class="line"><span class="attr">      system-group:</span></span><br><span class="line"><span class="attr">        base-package:</span> <span class="string">com.example</span></span><br></pre></td></tr></table></figure><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>swagger 提供了非常齐全的注解，为POJO提供了@ApiModel、@ApiModelProperty，以便更好的渲染最终结果<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/5/10 0007</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiModel</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8655851615465363473</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"用户名"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"密码"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO  省略get set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="restful-风格接口"><a href="#restful-风格接口" class="headerlink" title="restful 风格接口"></a>restful 风格接口</h2><blockquote><p>注解描述<br>@Api： 描述Controller<br>@ApiIgnore： 忽略该Controller，指不对当前类做扫描<br>@ApiOperation： 描述Controller类中的method接口<br>@ApiParam： 单个参数描述，与@ApiImplicitParam不同的是，他是写在参数左侧的。如（@ApiParam(name = “username”,value = “用户名”) String username）<br>@ApiModel： 描述POJO对象<br>@ApiProperty： 描述POJO对象中的属性值<br>@ApiImplicitParam： 描述单个入参信息<br>@ApiImplicitParams： 描述多个入参信息<br>@ApiResponse： 描述单个出参信息<br>@ApiResponses： 描述多个出参信息<br>@ApiError： 接口错误所返回的信息<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.entity.User;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParams;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/users"</span>)</span></span><br><span class="line"><span class="meta">@Api(tags = <span class="meta-string">"1.1"</span>, description = <span class="meta-string">"用户管理"</span>, value = <span class="meta-string">"用户管理"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(UserController.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"条件查询（DONE）"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = <span class="meta-string">"username"</span>, value = <span class="meta-string">"用户名"</span>)</span>,</span><br><span class="line">            <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"password"</span>, value = <span class="meta-string">"密码"</span>)</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">public</span> User query(String username, String password) &#123;</span><br><span class="line">        log.info(<span class="string">"多个参数用  @ApiImplicitParams"</span>);</span><br><span class="line">        <span class="keyword">return</span> new User(<span class="number">1L</span>, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"主键查询（DONE）"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"用户编号"</span>)</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">public</span> User <span class="keyword">get</span>(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id) &#123;</span><br><span class="line">        log.info(<span class="string">"单个参数用  @ApiImplicitParam"</span>);</span><br><span class="line">        <span class="keyword">return</span> new User(id, <span class="string">"u1"</span>, <span class="string">"p1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(<span class="meta-string">"/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"删除用户（DONE）"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"用户编号"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void delete(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id) &#123;</span><br><span class="line">        log.info(<span class="string">"单个参数用 ApiImplicitParam"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"添加用户（DONE）"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> User post(<span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">        log.info(<span class="string">"如果是 POST PUT 这种带 @RequestBody 的可以不用写 @ApiImplicitParam"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(<span class="meta-string">"/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"修改用户（DONE）"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void put(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id, <span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">        log.info(<span class="string">"如果你不想写 @ApiImplicitParam 那么 swagger 也会使用默认的参数名作为描述信息 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>测试<br>由于上面的接口是 restful 风格的接口，添加和修改无法通过浏览器完成，以前都是自己编写junit或者使用postman之类的工具。现在只需要打开浏览器输入 <a href="http://localhost:8080/swagger-ui.html，更多操作请自行体验…" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html，更多操作请自行体验…</a></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>参考<a href="https://github.com/battcn/swagger-spring-boot" target="_blank" rel="noopener">https://github.com/battcn/swagger-spring-boot</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着互联网技术的发展，现在的网站架构基本都由原来的后端渲染，变成了：前端渲染、前后端分离的形态，而且前端技术和后端技术在各自的道路上越走越远。&lt;/p&gt;
&lt;p&gt;前端和后端唯一联系，变成了API接口；API文档自然就成了前后端开发人员联系的纽带，变得尤为的重要，swagger就是一款让你更好的书写API文档的框架。&lt;br&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
      <category term="集成Swagger在线调试" scheme="//aha.me/categories/springBoot/%E9%9B%86%E6%88%90Swagger%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="集成Swagger在线调试" scheme="//aha.me/tags/%E9%9B%86%E6%88%90Swagger%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring Cache集成Redis</title>
    <link href="//aha.me/2019/02/18/%E4%BD%BF%E7%94%A8Spring-Cache%E9%9B%86%E6%88%90Redis/"/>
    <id>//aha.me/2019/02/18/使用Spring-Cache集成Redis/</id>
    <published>2019-02-18T11:09:26.000Z</published>
    <updated>2019-02-18T11:17:06.927Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 3.1 引入了激动人心的基于注释（annotation）的缓存（cache）技术，它本质上不是一个具体的缓存实现方案（例如 EHCache 或者 Redis），而是一个对缓存使用的抽象，通过在既有代码中添加少量它定义的各种 annotation，即能够达到缓存方法的返回对象的效果。</p><a id="more"></a><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>具备相当的好的灵活性，不仅能够使用 SpEL（Spring Expression Language）来定义缓存的 key 和各种 condition，还提供开箱即用的缓存临时存储方案，也支持和主流的专业缓存例如 EHCache、Redis、Guava 的集成。</p><p>基于 annotation 即可使得现有代码支持缓存<br>开箱即用 Out-Of-The-Box，不用安装和部署额外第三方组件即可使用缓存<br>支持 Spring Express Language，能使用对象的任何属性或者方法来定义缓存的 key 和 condition<br>支持 AspectJ，并通过其实现任何方法的缓存支持<br>支持自定义 key 和自定义缓存管理者，具有相当的灵活性和扩展性</p><h2 id="使用前后"><a href="#使用前后" class="headerlink" title="使用前后"></a>使用前后</h2><p>下面针对Spring Cache使用前后给出了伪代码部分，具体中也许比这要更加复杂，但是Spring Cache都可以很好的应对</p><blockquote><p>使用前<br>我们需要硬编码，如果切换Cache Client还需要修改代码，耦合度高，不易于维护<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">    <span class="keyword">String</span> value = userMapper.selectById(<span class="built_in">key</span>);</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">        cache.put(<span class="built_in">key</span>,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用后<br>基于Spring Cache注解，缓存由开发者自己配置，但不用参与到具体编码<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Cacheable(value = <span class="string">"user"</span>, <span class="built_in">key</span> = <span class="string">"#key"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> userMapper.selectById(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>在 pom.xml 中添加 spring-boot-starter-data-redis的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h2><p>在 application.properties 文件中配置如下内容，由于Spring Boot2.x 的改动，连接池相关配置需要通过spring.redis.lettuce.pool 或者 spring.redis.jedis.pool 进行配置了。使用了Spring Cache后，能指定spring.cache.type就手动指定一下，虽然它会自动去适配已有Cache的依赖，但先后顺序会对Redis使用有影响（JCache -&gt; EhCache -&gt; Redis -&gt; Guava）<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">redis</span>:</span><br><span class="line">    <span class="attribute">host</span>: localhost</span><br><span class="line">    <span class="attribute">password</span>:</span><br><span class="line">    <span class="attribute">timeout</span>: <span class="number">10000ms</span></span><br><span class="line">    <span class="attribute">database</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">lettuce</span>:</span><br><span class="line">      <span class="attribute">pool</span>:</span><br><span class="line">        <span class="attribute">max-active</span>: <span class="number">8</span></span><br><span class="line">    <span class="attribute">jedis</span>:</span><br><span class="line">      <span class="attribute">pool</span>:</span><br><span class="line">        <span class="attribute">max-wait</span>: -<span class="number">1ms</span></span><br><span class="line">        <span class="attribute">max-idle</span>: <span class="number">8</span></span><br><span class="line">        <span class="attribute">min-idle</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">port</span>: <span class="number">6379</span></span><br></pre></td></tr></table></figure></p><h2 id="具体编码"><a href="#具体编码" class="headerlink" title="具体编码"></a>具体编码</h2><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>创建一个User类，目的是为了模拟对象存储<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/5/11 0007</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8655851615465363473</span>L;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// TODO  省略get set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.battcn.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/5/11 0011</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">saveOrUpdate</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">get</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><p>为了方便演示数据库操作，直接定义了一个Map&lt;Long, User&gt; DATABASES，这里的核心就是@Cacheable、@CachePut、@CacheEvict 三个注解<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.battcn.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.battcn.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.<span class="keyword">annotation</span>.CacheEvict;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.<span class="keyword">annotation</span>.CachePut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.<span class="keyword">annotation</span>.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/5/11 0011</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="title">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> Map&lt;<span class="built_in">Long</span>, User&gt; DATABASES = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        DATABASES.put(<span class="number">1L</span>, new User(<span class="number">1L</span>, <span class="string">"u1"</span>, <span class="string">"p1"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">2L</span>, new User(<span class="number">2L</span>, <span class="string">"u2"</span>, <span class="string">"p2"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">3L</span>, new User(<span class="number">3L</span>, <span class="string">"u3"</span>, <span class="string">"p3"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(UserServiceImpl.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(value = <span class="meta-string">"user"</span>, key = <span class="meta-string">"#id"</span>)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="keyword">get</span>(<span class="built_in">Long</span> id) &#123;</span><br><span class="line">        <span class="comment">// TODO 我们就假设它是从数据库读取出来的</span></span><br><span class="line">        log.info(<span class="string">"进入 get 方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> DATABASES.<span class="keyword">get</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CachePut(value = <span class="meta-string">"user"</span>, key = <span class="meta-string">"#user.id"</span>)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User saveOrUpdate(User user) &#123;</span><br><span class="line">        DATABASES.put(user.getId(), user);</span><br><span class="line">        log.info(<span class="string">"进入 saveOrUpdate 方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CacheEvict(value = <span class="meta-string">"user"</span>, key = <span class="meta-string">"#id"</span>)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void delete(<span class="built_in">Long</span> id) &#123;</span><br><span class="line">        DATABASES.remove(id);</span><br><span class="line">        log.info(<span class="string">"进入 delete 方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><p>@EnableCaching 必须要加，否则spring-data-cache相关注解不会生效…<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter9Application</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Chapter9Application.<span class="keyword">class</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>完成准备事项后，编写一个junit测试类来检验代码的正确性，有很多人质疑过Redis线程安全性，故下面也提供了响应的测试案例，如有疑问欢迎指正<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.battcn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.battcn.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.battcn.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author Levin</span></span><br><span class="line"><span class="comment"> * @since 2018/5/10 0010</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="type">RunWith</span>(<span class="type">SpringRunner</span>.<span class="keyword">class</span>)</span><br><span class="line">@<span class="type">SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter9ApplicationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> log = <span class="type">LoggerFactory</span>.getLogger(<span class="type">Chapter9ApplicationTest</span>.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @<span class="type">Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @<span class="type">Test</span></span><br><span class="line">    <span class="keyword">public</span> void <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> user = userService.saveOrUpdate(new <span class="type">User</span>(5L, <span class="string">"u5"</span>, <span class="string">"p5"</span>));</span><br><span class="line">        log.info(<span class="string">"[saveOrUpdate] - [&#123;&#125;]"</span>, user);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> user1 = userService.<span class="keyword">get</span>(5L);</span><br><span class="line">        log.info(<span class="string">"[get] - [&#123;&#125;]"</span>, user1);</span><br><span class="line">        userService.delete(5L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动测试类，结果和我们期望的一致，可以看到增删改查中，查询是没有日志输出的，因为它直接从缓存中获取的数据，而添加、修改、删除都是会进入方法内执行具体的业务代码，然后通过切面去删除掉Redis中的缓存数据。其中 # 号代表这是一个 SpEL 表达式，此表达式可以遍历方法的参数对象，具体语法可以参考 Spring 的相关文档手册。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-14</span> <span class="number">09</span><span class="string">:20:55.303</span>  <span class="string">INFO</span> <span class="number">21176</span> <span class="meta">---</span> <span class="string">[</span>           <span class="string">main]</span> <span class="string">com.battcn.service.impl.UserServiceImpl</span>  <span class="string">:</span> <span class="string">进入</span> <span class="string">saveOrUpdate</span> <span class="string">方法</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-14</span> <span class="number">09</span><span class="string">:20:55.582</span>  <span class="string">INFO</span> <span class="number">21176</span> <span class="meta">---</span> <span class="string">[</span>           <span class="string">main]</span> <span class="string">io.lettuce.core.EpollProvider</span>            <span class="string">:</span> <span class="string">Starting</span> <span class="string">without</span> <span class="string">optional</span> <span class="string">epoll</span> <span class="string">library</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-14</span> <span class="number">09</span><span class="string">:20:55.584</span>  <span class="string">INFO</span> <span class="number">21176</span> <span class="meta">---</span> <span class="string">[</span>           <span class="string">main]</span> <span class="string">io.lettuce.core.KqueueProvider</span>           <span class="string">:</span> <span class="string">Starting</span> <span class="string">without</span> <span class="string">optional</span> <span class="string">kqueue</span> <span class="string">library</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-14</span> <span class="number">09</span><span class="string">:20:56.316</span>  <span class="string">INFO</span> <span class="number">21176</span> <span class="meta">---</span> <span class="string">[</span>           <span class="string">main]</span> <span class="string">com.battcn.Chapter9ApplicationTest</span>       <span class="string">:</span> <span class="string">[saveOrUpdate]</span> <span class="bullet">-</span> <span class="string">[User&#123;id=5,</span> <span class="string">username='u5',</span> <span class="string">password='p5'&#125;]</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-14</span> <span class="number">09</span><span class="string">:20:56.320</span>  <span class="string">INFO</span> <span class="number">21176</span> <span class="meta">---</span> <span class="string">[</span>           <span class="string">main]</span> <span class="string">com.battcn.Chapter9ApplicationTest</span>       <span class="string">:</span> <span class="string">[get]</span> <span class="bullet">-</span> <span class="string">[User&#123;id=5,</span> <span class="string">username='u5',</span> <span class="string">password='p5'&#125;]</span></span><br><span class="line"><span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-14</span> <span class="number">09</span><span class="string">:20:56.322</span>  <span class="string">INFO</span> <span class="number">21176</span> <span class="meta">---</span> <span class="string">[</span>           <span class="string">main]</span> <span class="string">com.battcn.service.impl.UserServiceImpl</span>  <span class="string">:</span> <span class="string">进入</span> <span class="string">delete</span> <span class="string">方法</span></span><br></pre></td></tr></table></figure></p><blockquote><p>其它类型<br>下列的就是Redis其它类型所对应的操作方式</p></blockquote><p>opsForValue： 对应 String（字符串）<br>opsForZSet： 对应 ZSet（有序集合）<br>opsForHash： 对应 Hash（哈希）<br>opsForList： 对应 List（列表）<br>opsForSet： 对应 Set（集合）<br>opsForGeo： 对应 GEO（地理位置）</p><h3 id="根据条件操作缓存"><a href="#根据条件操作缓存" class="headerlink" title="根据条件操作缓存"></a>根据条件操作缓存</h3><p>根据条件操作缓存内容并不影响数据库操作，条件表达式返回一个布尔值，true/false，当条件为true，则进行缓存操作，否则直接调用方法执行的返回结果。</p><p>长度： @CachePut(value = “user”, key = “#user.id”,condition = “#user.username.length() &lt; 10”) 只缓存用户名长度少于10的数据<br>大小： @Cacheable(value = “user”, key = “#id”,condition = “#id &lt; 10”) 只缓存ID小于10的数据<br>组合： @Cacheable(value=”user”,key=”#user.username.concat(##user.password)”)<br>提前操作： @CacheEvict(value=”user”,allEntries=true,beforeInvocation=true) 加上beforeInvocation=true后，不管内部是否报错，缓存都将被清除，默认情况为false</p><h2 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h2><blockquote><p>@Cacheable(根据方法的请求参数对其结果进行缓存)<br>key： 缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合（如：@Cacheable(value=”user”,key=”#userName”)）<br>value： 缓存的名称，必须指定至少一个（如：@Cacheable(value=”user”) 或者 @Cacheable(value={“user1”,”use2”})）<br>condition： 缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存（如：@Cacheable(value = “user”, key = “#id”,condition = “#id &lt; 10”)）<br>@CachePut(根据方法的请求参数对其结果进行缓存，和 @Cacheable 不同的是，它每次都会触发真实方法的调用)<br>key： 同上<br>value： 同上<br>condition： 同上<br>@CachEvict(根据条件对缓存进行清空)<br>key： 同上<br>value： 同上<br>condition： 同上<br>allEntries： 是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存（如：@CacheEvict(value = “user”, key = “#id”, allEntries = true)）<br>beforeInvocation： 是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存（如：@CacheEvict(value = “user”, key = “#id”, beforeInvocation = true)）</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>spring-cache文档： <a href="https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/integration.html#cache-introduction" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/integration.html#cache-introduction</a><br>spring-data-redis文档： <a href="https://docs.spring.io/spring-data/redis/docs/2.0.1.RELEASE/reference/html/#new-in-2.0.0" target="_blank" rel="noopener">https://docs.spring.io/spring-data/redis/docs/2.0.1.RELEASE/reference/html/#new-in-2.0.0</a><br>Redis 文档： <a href="https://redis.io/documentation" target="_blank" rel="noopener">https://redis.io/documentation</a><br>Redis 中文文档： <a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">http://www.redis.cn/commands.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring 3.1 引入了激动人心的基于注释（annotation）的缓存（cache）技术，它本质上不是一个具体的缓存实现方案（例如 EHCache 或者 Redis），而是一个对缓存使用的抽象，通过在既有代码中添加少量它定义的各种 annotation，即能够达到缓存方法的返回对象的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
      <category term="使用Spring Cache集成Redis" scheme="//aha.me/categories/springBoot/%E4%BD%BF%E7%94%A8Spring-Cache%E9%9B%86%E6%88%90Redis/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="使用Spring Cache集成Redis" scheme="//aha.me/tags/%E4%BD%BF%E7%94%A8Spring-Cache%E9%9B%86%E6%88%90Redis/"/>
    
  </entry>
  
  <entry>
    <title>整合Lettuce Redis</title>
    <link href="//aha.me/2019/02/18/%E6%95%B4%E5%90%88Lettuce-Redis/"/>
    <id>//aha.me/2019/02/18/整合Lettuce-Redis/</id>
    <published>2019-02-18T10:53:07.000Z</published>
    <updated>2019-02-18T10:56:57.195Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 除了支持常见的ORM框架外，更是对常用的中间件提供了非常好封装，随着Spring Boot2.x的到来，支持的组件越来越丰富，也越来越成熟，其中对Redis的支持不仅仅是丰富了它的API，更是替换掉底层Jedis的依赖，取而代之换成了Lettuce(生菜)<br><a id="more"></a></p><h2 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h2><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。相比Memcached它支持存储的类型相对更多（字符、哈希、集合、有序集合、列表、GEO），同时Redis是线程安全的。2010年3月15日起，Redis的开发工作由VMware主持，2013年5月开始，Redis的开发由Pivotal赞助。</p><h2 id="Lettuce"><a href="#Lettuce" class="headerlink" title="Lettuce"></a>Lettuce</h2><p>Lettuce 和 Jedis 的都是连接Redis Server的客户端程序。Jedis在实现上是直连redis server，多线程环境下非线程安全，除非使用连接池，为每个Jedis实例增加物理连接。Lettuce基于Netty的连接实例（StatefulRedisConnection），可以在多个线程间并发访问，且线程安全，满足多线程环境下的并发访问，同时它是可伸缩的设计，一个连接实例不够的情况也可以按需增加连接实例。</p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>在 pom.xml 中spring-boot-starter-data-redis的依赖，Spring Boot2.x 后底层不在是Jedis如果做版本升级的朋友需要注意下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h2><p>在 application.properties 文件中配置如下内容，由于Spring Boot2.x 的改动，连接池相关配置需要通过spring.redis.lettuce.pool 或者 spring.redis.jedis.pool 进行配置了</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">redis</span>:</span><br><span class="line">    <span class="attribute">host</span>: localhost</span><br><span class="line">    <span class="attribute">password</span>:</span><br><span class="line">    <span class="attribute">timeout</span>: <span class="number">10000ms</span></span><br><span class="line">    <span class="attribute">database</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">lettuce</span>:</span><br><span class="line">      <span class="attribute">pool</span>:</span><br><span class="line">        <span class="attribute">max-active</span>: <span class="number">8</span></span><br><span class="line">    <span class="attribute">jedis</span>:</span><br><span class="line">      <span class="attribute">pool</span>:</span><br><span class="line">        <span class="attribute">max-wait</span>: -<span class="number">1ms</span></span><br><span class="line">        <span class="attribute">max-idle</span>: <span class="number">8</span></span><br><span class="line">        <span class="attribute">min-idle</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">port</span>: <span class="number">6379</span></span><br></pre></td></tr></table></figure><h2 id="具体编码"><a href="#具体编码" class="headerlink" title="具体编码"></a>具体编码</h2><p>Spring Boot对Redis的支持已经非常完善了，良好的序列化以及丰富的API足够应对日常开发</p><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>创建一个User类<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/5/10 0007</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8655851615465363473</span>L;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// TODO  省略get set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="自定义Template"><a href="#自定义Template" class="headerlink" title="自定义Template"></a>自定义Template</h2><p>默认情况下的模板只能支持RedisTemplate&lt;String, String&gt;，也就是只能存入字符串，这在开发中是不友好的，所以自定义模板是很有必要的，当自定义了模板又想使用String存储这时候就可以使用StringRedisTemplate的方式，它们并不冲突…<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.<span class="keyword">data</span>.redis.RedisAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO 修改database</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/5/10 0022</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(RedisAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; redisCacheTemplate(LettuceConnectionFactory redisConnectionFactory) &#123;</span><br><span class="line">        RedisTemplate&lt;String, Serializable&gt; template = new RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setKeySerializer(new StringRedisSerializer());</span><br><span class="line">        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>完成准备事项后，编写一个junit测试类来检验代码的正确性，有很多人质疑过Redis线程安全性，故下面也提供了响应的测试案例，如有疑问欢迎指正<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.battcn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.battcn.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author Levin</span></span><br><span class="line"><span class="comment"> * @since 2018/5/10 0010</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="type">RunWith</span>(<span class="type">SpringRunner</span>.<span class="keyword">class</span>)</span><br><span class="line">@<span class="type">SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter8ApplicationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> log = <span class="type">LoggerFactory</span>.getLogger(<span class="type">Chapter8ApplicationTest</span>.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">    @<span class="type">Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">StringRedisTemplate</span> stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    @<span class="type">Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">RedisTemplate</span>&lt;<span class="type">String</span>, <span class="type">Serializable</span>&gt; redisCacheTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @<span class="type">Test</span></span><br><span class="line">    <span class="keyword">public</span> void <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="comment">// TODO 测试线程安全</span></span><br><span class="line">        <span class="type">ExecutorService</span> executorService = <span class="type">Executors</span>.newFixedThreadPool(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">IntStream</span>.range(<span class="number">0</span>, <span class="number">1000</span>).forEach(i -&gt;</span><br><span class="line">                executorService.execute(() -&gt; stringRedisTemplate.opsForValue().increment(<span class="string">"kk"</span>, <span class="number">1</span>))</span><br><span class="line">        );</span><br><span class="line">        stringRedisTemplate.opsForValue().<span class="keyword">set</span>(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> k1 = stringRedisTemplate.opsForValue().<span class="keyword">get</span>(<span class="string">"k1"</span>);</span><br><span class="line">        log.info(<span class="string">"[字符缓存结果] - [&#123;&#125;]"</span>, k1);</span><br><span class="line">        <span class="comment">// TODO 以下只演示整合，具体Redis命令可以参考官方文档，Spring Data Redis 只是改了个名字而已，Redis支持的命令它都支持</span></span><br><span class="line">        <span class="type">String</span> key = <span class="string">"battcn:user:1"</span>;</span><br><span class="line">        redisCacheTemplate.opsForValue().<span class="keyword">set</span>(key, new <span class="type">User</span>(1L, <span class="string">"u1"</span>, <span class="string">"pa"</span>));</span><br><span class="line">        <span class="comment">// TODO 对应 String（字符串）</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> user = (<span class="type">User</span>) redisCacheTemplate.opsForValue().<span class="keyword">get</span>(key);</span><br><span class="line">        log.info(<span class="string">"[对象缓存结果] - [&#123;&#125;]"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>其它类型<br>下列的就是Redis其它类型所对应的操作方式</p></blockquote><p>opsForValue： 对应 String（字符串）<br>opsForZSet： 对应 ZSet（有序集合）<br>opsForHash： 对应 Hash（哈希）<br>opsForList： 对应 List（列表）<br>opsForSet： 对应 Set（集合）<br>opsForGeo： 对应 GEO（地理位置）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>spring-data-redis文档： <a href="https://docs.spring.io/spring-data/redis/docs/2.0.1.RELEASE/reference/html/#new-in-2.0.0" target="_blank" rel="noopener">https://docs.spring.io/spring-data/redis/docs/2.0.1.RELEASE/reference/html/#new-in-2.0.0</a><br>Redis 文档： <a href="https://redis.io/documentation" target="_blank" rel="noopener">https://redis.io/documentation</a><br>Redis 中文文档： <a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">http://www.redis.cn/commands.html</a></p><p>目前很多大佬都写过关于 SpringBoot 的教程了，如有雷同，请多多包涵，本教程基于最新的 spring-boot-starter-parent：2.0.1.RELEASE编写，包括新版本的特性都会一起介绍…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 除了支持常见的ORM框架外，更是对常用的中间件提供了非常好封装，随着Spring Boot2.x的到来，支持的组件越来越丰富，也越来越成熟，其中对Redis的支持不仅仅是丰富了它的API，更是替换掉底层Jedis的依赖，取而代之换成了Lettuce(生菜)&lt;br&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>通用Mapper与分页插件的集成</title>
    <link href="//aha.me/2019/02/18/%E9%80%9A%E7%94%A8Mapper%E4%B8%8E%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E7%9A%84%E9%9B%86%E6%88%90/"/>
    <id>//aha.me/2019/02/18/通用Mapper与分页插件的集成/</id>
    <published>2019-02-18T05:15:35.000Z</published>
    <updated>2019-02-18T10:19:51.840Z</updated>
    
    <content type="html"><![CDATA[<p>在没有分页插件之前，写一个分页需要两条SQL语句，一条查询一条统计，然后才能计算出页码，这样的代码冗余而又枯燥，更重要的一点是数据库迁移，众所周知不同的数据库分页写法是不同的，而Mybatis不同于Hibernate的是它只提供动态SQL和结果集映射。值得庆幸的是，它虽然没有为分页提供良好的解决方案，但却提供了Interceptor以供开发者自己扩展，这也是这款分页插件的由来….</p><a id="more"></a><p>通用Mapper</p><p>GIT地址： <a href="https://gitee.com/free/Mapper" target="_blank" rel="noopener">https://gitee.com/free/Mapper</a><br>通用 Mapper 是一个可以实现任意 MyBatis 通用方法的框架，项目提供了常规的增删改查操作以及 Example 相关的单表操作。通用 Mapper 是为了解决 MyBatis 使用中 90% 的基本操作，使用它可以很方便的进行开发，可以节省开发人员大量的时间。</p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>在 pom.xml 中添加通用Mapper与分页插件的依赖包<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 通用Mapper插件</span></span><br><span class="line"><span class="comment">文档地址：https://gitee.com/free/Mapper/wikis/Home --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 分页插件</span></span><br><span class="line"><span class="comment">        文档地址：https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h2><p>在 application.properties 文件中分别添加上数据库、Mybatis、通用Mapper、PageHelper的属性配置，这里只提供了常见场景的配置，更全的配置可以参考上文所述的文文档(#^.^#)<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/demo?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">      pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">      filters:</span></span><br><span class="line">            <span class="string">commons-log.connection-logger-name:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">      time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">      min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">      validation-query:</span> <span class="string">select</span> <span class="number">1</span> <span class="string">from</span> <span class="string">dual</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span></span><br><span class="line"><span class="attr">  property:</span></span><br><span class="line"><span class="attr">    order:</span> <span class="string">BEFORE</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line"><span class="attr">    map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.mybatismapper.demo.entity</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line"><span class="attr">  helper-dialect:</span> <span class="string">MYSQL</span></span><br><span class="line"><span class="attr">  params:</span> <span class="string">count=countSql</span></span><br><span class="line"><span class="attr">  reasonable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  support-methods-arguments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mapper:</span></span><br><span class="line"><span class="attr">  mappers:</span> <span class="string">tk.mybatis.mapper.common.BaseMapper</span></span><br><span class="line"><span class="attr">  not-empty:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  identity:</span> <span class="string">MYSQL</span></span><br></pre></td></tr></table></figure></p><h2 id="通用Mapper"><a href="#通用Mapper" class="headerlink" title="通用Mapper"></a>通用Mapper</h2><p>mapper.enum-as-simple-type： 枚举按简单类型处理，如果有枚举字段则需要加上该配置才会做映射<br>mapper.not-empty： 设置以后，会去判断 insert 和 update 中符串类型!=’’</p><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><p>pagehelper.reasonable： 分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum&lt;=0 时会查询第一页， pageNum&gt;pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。<br>support-methods-arguments： 支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>由于 mybatis.mapper-locations=classpath:com/battcn/mapper/<em>.xml配置的在java package中，而Spring Boot默认只打入java package -&gt; </em>.java，所以我们需要给pom.xml文件添加如下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="具体编码"><a href="#具体编码" class="headerlink" title="具体编码"></a>具体编码</h2><p>完成基本配置后，接下来进行具体的编码操作。</p><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><p>创建一张 t_user 的表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键自增'</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'用户表'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>通用Mapper采用了JPA规范包中的注解，这种的设计避免了重复造轮子，更是让Spring Data Jpa的应用可以轻松切换到Mybatis<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/5/10 0007</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"t_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8655851615465363473</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// TODO  省略get set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>为了更好的让熟悉它，此处模拟了一个自定义的SQL，可以发现使用 通用Mapper 后并不会破坏原有代码结构</p><blockquote><p>UserMapper<br>继承 BaseMapper<t> 就可以了，这点是不是有点类似 JpaRepository，同时也可以根据自己需要扩展出更适合自己项目的BaseMapper，它的灵活也是众多开发者喜爱的因素之一<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.battcn</span><span class="selector-class">.mapper</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">com</span><span class="selector-class">.battcn</span><span class="selector-class">.entity</span><span class="selector-class">.User</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.ibatis</span><span class="selector-class">.annotations</span><span class="selector-class">.Mapper</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">tk</span><span class="selector-class">.mybatis</span><span class="selector-class">.mapper</span><span class="selector-class">.common</span><span class="selector-class">.BaseMapper</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * t_user 操作，继承 BaseMapper&lt;T&gt; 就可以了，是不是有点类似 JpaRepository</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author Levin</span></span><br><span class="line"><span class="comment"> * @since 2018/5/10 0007</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="keyword">Mapper</span></span><br><span class="line"><span class="keyword">public</span> interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名统计（TODO 假设它是一个很复杂的SQL）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param username 用户名</span></span><br><span class="line"><span class="comment">     * @return 统计结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="selector-tag">int</span> <span class="selector-tag">countByUsername</span>(<span class="selector-tag">String</span> <span class="selector-tag">username</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p></blockquote><blockquote><p>UserMapper 映射文件<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.battcn.mapper.UserMapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"countByUsername"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      SELECT count(1) FROM t_user WHERE username = #</span><span class="template-variable">&#123;username&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>完成数据访问层接口后，编写一个junit测试类来检验代码的正确性。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.battcn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.battcn.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.battcn.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.<span class="keyword">class</span>)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter7ApplicationTests</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(Chapter7ApplicationTests.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test1() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> User user1 = <span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p1"</span>);</span><br><span class="line">        <span class="keyword">final</span> User user2 = <span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p2"</span>);</span><br><span class="line">        <span class="keyword">final</span> User user3 = <span class="keyword">new</span> User(<span class="string">"u3"</span>, <span class="string">"p3"</span>);</span><br><span class="line">        userMapper.insertSelective(user1);</span><br><span class="line">        log.info(<span class="string">"[user1回写主键] - [&#123;&#125;]"</span>, user1.getId());</span><br><span class="line">        userMapper.insertSelective(user2);</span><br><span class="line">        log.info(<span class="string">"[user2回写主键] - [&#123;&#125;]"</span>, user2.getId());</span><br><span class="line">        userMapper.insertSelective(user3);</span><br><span class="line">        log.info(<span class="string">"[user3回写主键] - [&#123;&#125;]"</span>, user3.getId());</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = userMapper.countByUsername(<span class="string">"u1"</span>);</span><br><span class="line">        log.info(<span class="string">"[调用自己写的SQL] - [&#123;&#125;]"</span>, count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 模拟分页</span></span><br><span class="line">        userMapper.insertSelective(<span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p1"</span>));</span><br><span class="line">        userMapper.insertSelective(<span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p1"</span>));</span><br><span class="line">        userMapper.insertSelective(<span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p1"</span>));</span><br><span class="line">        userMapper.insertSelective(<span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p1"</span>));</span><br><span class="line">        userMapper.insertSelective(<span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p1"</span>));</span><br><span class="line">        userMapper.insertSelective(<span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p1"</span>));</span><br><span class="line">        userMapper.insertSelective(<span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p1"</span>));</span><br><span class="line">        userMapper.insertSelective(<span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p1"</span>));</span><br><span class="line">        userMapper.insertSelective(<span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p1"</span>));</span><br><span class="line">        userMapper.insertSelective(<span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p1"</span>));</span><br><span class="line">        <span class="comment">// TODO 分页 + 排序 this.userMapper.selectAll() 这一句就是我们需要写的查询，有了这两款插件无缝切换各种数据库</span></span><br><span class="line">        <span class="keyword">final</span> PageInfo&lt;Object&gt; pageInfo = PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>).setOrderBy(<span class="string">"id desc"</span>).doSelectPageInfo(() -&gt; <span class="keyword">this</span>.userMapper.selectAll());</span><br><span class="line">        log.info(<span class="string">"[lambda写法] - [分页信息] - [&#123;&#125;]"</span>, pageInfo.toString());</span><br><span class="line"></span><br><span class="line">        PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>).setOrderBy(<span class="string">"id desc"</span>);</span><br><span class="line">        <span class="keyword">final</span> PageInfo&lt;User&gt; userPageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(<span class="keyword">this</span>.userMapper.selectAll());</span><br><span class="line">        log.info(<span class="string">"[普通写法] - [&#123;&#125;]"</span>, userPageInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Mybatis官方文档： <a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/index.html</a><br>通用Mapper文档： <a href="https://gitee.com/free/Mapper/wikis/1.1-java?parent=1.integration" target="_blank" rel="noopener">https://gitee.com/free/Mapper/wikis/1.1-java?parent=1.integration</a><br>分页插件文档： <a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在没有分页插件之前，写一个分页需要两条SQL语句，一条查询一条统计，然后才能计算出页码，这样的代码冗余而又枯燥，更重要的一点是数据库迁移，众所周知不同的数据库分页写法是不同的，而Mybatis不同于Hibernate的是它只提供动态SQL和结果集映射。值得庆幸的是，它虽然没有为分页提供良好的解决方案，但却提供了Interceptor以供开发者自己扩展，这也是这款分页插件的由来….&lt;/p&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
      <category term="通用Mapper与分页插件的集成" scheme="//aha.me/categories/springBoot/%E9%80%9A%E7%94%A8Mapper%E4%B8%8E%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E7%9A%84%E9%9B%86%E6%88%90/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="通用Mapper与分页插件的集成" scheme="//aha.me/tags/%E9%80%9A%E7%94%A8Mapper%E4%B8%8E%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E7%9A%84%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>整合SpringDataJpa</title>
    <link href="//aha.me/2019/02/17/%E6%95%B4%E5%90%88SpringDataJpa/"/>
    <id>//aha.me/2019/02/17/整合SpringDataJpa/</id>
    <published>2019-02-17T14:35:51.000Z</published>
    <updated>2019-02-17T14:41:33.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h2><p>JPA是Java Persistence API的简称，中文名Java持久层API，是官方（Sun）在JDK5.0后提出的Java持久化规范。其目的是为了简化现有JAVA EE和JAVA SE应用开发工作，以及整合现有的ORM技术实现规范统一<br><a id="more"></a></p><blockquote><p>JPA的总体思想和现有Hibernate、TopLink、JDO等ORM框架大体一致。总的来说，JPA包括以下3方面的技术：<br>ORM映射元数据： 支持XML和注解两种元数据的形式，元数据描述对象和表之间的映射关系，框架据此将实体对象持久化到数据库表中；<br>API： 操作实体对象来执行CRUD操作，框架在后台替代我们完成所有的事情，开发者从繁琐的JDBC和SQL代码中解脱出来。<br>查询语言： 通过面向对象而非面向数据库的查询语言查询数据，避免程序的SQL语句紧密耦合。<br>JPA只是一种规范，它需要第三方自行实现其功能，在众多框架中Hibernate是最为强大的一个。从功能上来说，JPA就是Hibernate功能的一个子集。Hibernate 从3.2开始，就开始兼容JPA。同时Hibernate3.2获得了Sun TCK的JPA(Java Persistence API) 兼容认证。</p></blockquote><h2 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h2><p>常见的ORM框架中Hibernate的JPA最为完整，因此Spring Data JPA 是采用基于JPA规范的Hibernate框架基础下提供了Repository层的实现。Spring Data Repository极大地简化了实现各种持久层的数据库访问而写的样板代码量，同时CrudRepository提供了丰富的CRUD功能去管理实体类。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>丰富的API，简单操作无需编写额外的代码<br>丰富的SQL日志输出</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>学习成本较大，需要学习HQL<br>配置复杂，虽然SpringBoot简化的大量的配置，关系映射多表查询配置依旧不容易<br>性能较差，对比JdbcTemplate、Mybatis等ORM框架，它的性能无异于是最差的</p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>在 pom.xml 中添加 spring-boot-starter-data-jpa 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring JDBC 的依赖包，使用 spring-boot-starter-jdbc 或 spring-boot-starter-data-jpa 将会自动获得HikariCP依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MYSQL包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--druid连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认就内嵌了Tomcat 容器，如需要更换容器也极其简单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试包,当我们使用 mvn package 的时候该包并不会被打入,因为它的生命周期只在 test 之内--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>在application.properties中添加如下配置。值得注意的是，SpringBoot默认会自动配置DataSource，它将优先采用HikariCP连接池，如果没有该依赖的情况则选取tomcat-jdbc，如果前两者都不可用最后选取Commons DBCP2。通过spring.datasource.type属性可以指定其它种类的连接池</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/demo?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">      pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">      filters:</span></span><br><span class="line">            <span class="string">commons-log.connection-logger-name:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">      time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">      min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">      validation-query:</span> <span class="string">select</span> <span class="number">1</span> <span class="string">from</span> <span class="string">dual</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">          naming_strategy:</span> <span class="string">org.hibernate.cfg.ImprovedNamingStrategy</span></span><br><span class="line"><span class="attr">          ddl-auto:</span> <span class="string">update</span></span><br></pre></td></tr></table></figure><blockquote><p>ddl-auto 几种属性<br>create： 每次运行程序时，都会重新创建表，故而数据会丢失<br>create-drop： 每次运行程序时会先创建表结构，然后待程序结束时清空表<br>upadte： 每次运行程序，没有表时会创建表，如果对象发生改变会更新表结构，原有数据不会清空，只会更新（推荐使用）<br>validate： 运行程序会校验数据与数据库的字段类型是否相同，字段不同会报错</p></blockquote><h2 id="具体编码"><a href="#具体编码" class="headerlink" title="具体编码"></a>具体编码</h2><p>由于上面我们采用的是spring.jpa.hibernate.ddl-auto=update方式，因此这里可以跳过手动建表的操作</p><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>JPA规范注解坐落在javax.persistence包下，@Id注解一定不要引用错了，否则会报错。@GeneratedValue(strategy = GenerationType.IDENTITY)自增策略，不需要映射的字段可以通过@Transient注解排除掉</p><blockquote><p>常见的几种自增策略<br>TABLE： 使用一个特定的数据库表格来保存主键<br>SEQUENCE： 根据底层数据库的序列来生成主键，条件是数据库支持序列。这个值要与generator一起使用，generator 指定生成主键使用的生成器（可能是orcale中自己编写的序列）。<br>IDENTITY： 主键由数据库自动生成（主要是支持自动增长的数据库，如mysql）<br>AUTO： 主键由程序控制，也是GenerationType的默认值。</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"t_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8655851615465363473</span>L;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TODO 忽略该字段的映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> String  email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO  省略get set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><p>创建UserRepository数据访问层接口，需要继承JpaRepository&lt;T,K&gt;，第一个泛型参数是实体对象的名称，第二个是主键类型。只需要这样简单的配置，该UserRepository就拥常用的CRUD功能，JpaRepository本身就包含了常用功能，剩下的查询我们按照规范写接口即可，JPA支持@Query注解写HQL，也支持findAllByUsername这种根据字段名命名的方式（强烈推荐IntelliJ IDEA对JPA支持非常NICE）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * t_user 操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Levin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/5/7 0007</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Repository</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">List</span>&lt;User&gt; findAllByUsername(String username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>完成数据访问层接口后，最后编写一个junit测试类来检验代码的正确性。</p><p>下面的几个操作中，只有findAllByUsername是我们自己编写的代码，其它的都是继承自JpaRepository接口中的方法，更关键的是分页及排序是如此的简单实例化一个Pageable即可…</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line"><span class="keyword">public</span> class Chapter5ApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger <span class="built_in">log</span> = LoggerFactory.getLogger(Chapter5ApplicationTests.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test1() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> User user = userRepository.<span class="built_in">save</span>(<span class="keyword">new</span> User(<span class="string">"u1"</span>, <span class="string">"p1"</span>));</span><br><span class="line">        <span class="built_in">log</span>.info(<span class="string">"[添加成功] - [&#123;&#125;]"</span>, user);</span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; u1 = userRepository.findAllByUsername(<span class="string">"u1"</span>);</span><br><span class="line">        <span class="built_in">log</span>.info(<span class="string">"[条件查询] - [&#123;&#125;]"</span>, u1);</span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">10</span>, Sort.by(Sort.Order.desc(<span class="string">"username"</span>)));</span><br><span class="line">        <span class="keyword">final</span> Page&lt;User&gt; users = userRepository.findAll(pageable);</span><br><span class="line">        <span class="built_in">log</span>.info(<span class="string">"[分页+排序+查询所有] - [&#123;&#125;]"</span>, users.getContent());</span><br><span class="line">        userRepository.findById(users.getContent().<span class="built_in">get</span>(<span class="number">0</span>).getId()).ifPresent(user1 -&gt; <span class="built_in">log</span>.info(<span class="string">"[主键查询] - [&#123;&#125;]"</span>, user1));</span><br><span class="line">        <span class="keyword">final</span> User edit = userRepository.<span class="built_in">save</span>(<span class="keyword">new</span> User(user.getId(), <span class="string">"修改后的ui"</span>, <span class="string">"修改后的p1"</span>));</span><br><span class="line">        <span class="built_in">log</span>.info(<span class="string">"[修改成功] - [&#123;&#125;]"</span>, edit);</span><br><span class="line">        userRepository.deleteById(user.getId());</span><br><span class="line">        <span class="built_in">log</span>.info(<span class="string">"[删除主键为 &#123;&#125; 成功] - [&#123;&#125;]"</span>, user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JPA&quot;&gt;&lt;a href=&quot;#JPA&quot; class=&quot;headerlink&quot; title=&quot;JPA&quot;&gt;&lt;/a&gt;JPA&lt;/h2&gt;&lt;p&gt;JPA是Java Persistence API的简称，中文名Java持久层API，是官方（Sun）在JDK5.0后提出的Java持久化规范。其目的是为了简化现有JAVA EE和JAVA SE应用开发工作，以及整合现有的ORM技术实现规范统一&lt;br&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
      <category term="SpringDataJpa" scheme="//aha.me/categories/springBoot/SpringDataJpa/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="SpringDataJpa" scheme="//aha.me/tags/SpringDataJpa/"/>
    
  </entry>
  
  <entry>
    <title>JSON.stringify出现Converting circular structure to JSON</title>
    <link href="//aha.me/2019/02/16/JSON-stringify%E5%87%BA%E7%8E%B0Converting-circular-structure-to-JSON/"/>
    <id>//aha.me/2019/02/16/JSON-stringify出现Converting-circular-structure-to-JSON/</id>
    <published>2019-02-16T15:10:36.000Z</published>
    <updated>2019-02-16T15:11:37.670Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cache = [];</span><br><span class="line">                   <span class="keyword">var</span> row1 =  <span class="built_in">JSON</span>.stringify(row, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">                       <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; value !== <span class="literal">null</span>) &#123;</span><br><span class="line">                           <span class="keyword">if</span> (cache.indexOf(value) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                               <span class="comment">// Circular reference found, discard key</span></span><br><span class="line">                               <span class="keyword">return</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="comment">// Store value in our collection</span></span><br><span class="line">                           cache.push(value);</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">return</span> value;</span><br><span class="line">                   &#125;);</span><br><span class="line">                   cache = <span class="literal">null</span>;</span><br><span class="line">                   <span class="built_in">window</span>.localStorage.setItem(<span class="string">"row"</span>, row1);</span><br><span class="line">                   <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"row"</span>)));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
      <category term="JSON" scheme="//aha.me/categories/JSON/"/>
    
    
      <category term="JSON" scheme="//aha.me/tags/JSON/"/>
    
      <category term="错误解决" scheme="//aha.me/tags/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>菜单管理 解决表单回显</title>
    <link href="//aha.me/2019/02/16/%E8%8F%9C%E5%8D%95%E7%AE%A1%E7%90%86-%E8%A7%A3%E5%86%B3%E8%A1%A8%E5%8D%95%E5%9B%9E%E6%98%BE/"/>
    <id>//aha.me/2019/02/16/菜单管理-解决表单回显/</id>
    <published>2019-02-16T15:06:59.000Z</published>
    <updated>2019-02-16T15:08:41.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决表单回显"><a href="#解决表单回显" class="headerlink" title="解决表单回显"></a>解决表单回显</h2><a id="more"></a><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.infosys.spdb.controller.sys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.infosys.spdb.base.BaseController;</span><br><span class="line"><span class="keyword">import</span> com.infosys.spdb.domain.ResultEntity;</span><br><span class="line"><span class="keyword">import</span> com.infosys.spdb.domain.sys.SysMenu;</span><br><span class="line"><span class="keyword">import</span> com.infosys.spdb.service.sys.SysMenuServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zch</span></span><br><span class="line"><span class="comment"> * 菜单管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/sys/menu"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuController</span> <span class="title">extends</span> <span class="title">BaseController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SysMenuServiceImpl sysMenuService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/index"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView index()&#123;</span><br><span class="line">        ModelAndView model=new ModelAndView();</span><br><span class="line">        model.setViewName(<span class="string">"views/sys/menu/index"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/find"</span>)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SysMenu&gt; find()&#123;</span><br><span class="line">        <span class="keyword">return</span>  sysMenuService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/save"</span>,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ResultEntity save(<span class="meta">@RequestBody</span> SysMenu sysMenu)&#123;</span><br><span class="line">        ResultEntity&lt;SysMenu&gt; resultEntity = new ResultEntity&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sysMenu.getType()==<span class="number">0</span>)&#123;</span><br><span class="line">           sysMenu.setPerms(<span class="literal">null</span>);</span><br><span class="line">           sysMenu.setUrl(<span class="literal">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sysMenu.getType()==<span class="number">1</span>)&#123;</span><br><span class="line">            sysMenu.setPerms(<span class="literal">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (sysMenu.getType()==<span class="number">2</span>)&#123;</span><br><span class="line">            sysMenu.setUrl(<span class="literal">null</span>);</span><br><span class="line">            sysMenu.setIcon(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sysMenu=sysMenuService.doSave(sysMenu);</span><br><span class="line">        resultEntity.setSave(sysMenu);</span><br><span class="line">        <span class="keyword">return</span> resultEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menuId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/doEdit"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView doEdit(<span class="built_in">Long</span> menuId) &#123;</span><br><span class="line">        ModelAndView mav = new ModelAndView();</span><br><span class="line">        mav.addObject(<span class="string">"ParentData"</span>,sysMenuService.findParent());</span><br><span class="line">        SysMenu sysMenu;</span><br><span class="line">        <span class="keyword">if</span>(menuId!=<span class="number">0</span>&amp;menuId!=<span class="literal">null</span>)&#123;</span><br><span class="line">           sysMenu=sysMenuService.findById(menuId);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sysMenu=new SysMenu();</span><br><span class="line">            sysMenu.setType(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mav.addObject(<span class="string">"data"</span>,sysMenu);</span><br><span class="line">        mav.setViewName(<span class="string">"views/sys/menu/edit"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping("/menu/get")</span></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line"><span class="comment">//    @SystemControllerLog(descrption = "查询用户信息",actionType = "4")</span></span><br><span class="line"><span class="comment">//    public ExecutionResult getAll(String id) throws Exception&#123;</span></span><br><span class="line"><span class="comment">//        ExecutionResult result = new ExecutionResult();</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            Page&lt;UserEntity&gt; users = userService.findAll(PageEntity.setDefaultPageable(1, 10, "id")) ;</span></span><br><span class="line"><span class="comment">//            result.setTotal(users.getTotalPages());</span></span><br><span class="line"><span class="comment">//            result.setResultCode(ReturnCode.RES_SUCCESS);</span></span><br><span class="line"><span class="comment">//            result.setFlag(true);</span></span><br><span class="line"><span class="comment">//            result.setData(users);</span></span><br><span class="line"><span class="comment">//            result.setMsg("查询成功！");</span></span><br><span class="line"><span class="comment">//            //异常处理</span></span><br><span class="line"><span class="comment">////            int aa= 5/0;</span></span><br><span class="line"><span class="comment">//        &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">//                result.setFlag(true);</span></span><br><span class="line"><span class="comment">//                result.setData(null);</span></span><br><span class="line"><span class="comment">//                result.setResultCode(ReturnCode.RES_FAILED);</span></span><br><span class="line"><span class="comment">//                result.setMsg("查询失败！");</span></span><br><span class="line"><span class="comment">//                throw e ;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return result;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.thymeleaf.org "</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"decorator"</span> <span class="attr">content</span>=<span class="string">"/decorator/modal"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span> <span class="attr">id</span>=<span class="string">"modelFrom"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">        新增</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"editForm"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;data&#125;"</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                类型</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>  <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;data.getType()&#125; eq 0"</span>  <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span> 目录 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>  <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;data.getType()&#125; eq 1"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span> 菜单 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>  <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;data.getType()&#125; eq 2"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span> 按钮 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menuId"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;data.getMenuId()&#125;"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"menuId"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- fsfdsdf --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                菜单名称</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;data.getName()&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"菜单名称或按钮名称"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                上级菜单</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"selectpicker show-tick"</span> <span class="attr">id</span>=<span class="string">"parentId"</span> <span class="attr">name</span>=<span class="string">"parentId"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">style</span>=<span class="string">"cursor: pointer;"</span> <span class="attr">title</span>=<span class="string">"请选择一项"</span> <span class="attr">data-live-search</span>=<span class="string">"true"</span> <span class="attr">data-size</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">                &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">"item:$&#123;ParentData&#125;"</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;data.getParentId()&#125; eq $&#123;item.getMenuId()&#125;"</span>  <span class="attr">th:value</span>=<span class="string">"$&#123;item.getMenuId()&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.getName()&#125;"</span>&gt;</span>上级菜单</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group radio1"</span>  <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                    菜单URL</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;data.getUrl()&#125;"</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">placeholder</span>=<span class="string">"菜单URL"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group radio1 radio2"</span>  <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                    授权标识</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:value</span>=<span class="string">"*&#123;perms&#125;"</span> <span class="attr">name</span>=<span class="string">"perms"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">placeholder</span>=<span class="string">"多个用逗号分隔，如：user:list,user:create"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group radio1 radio0"</span>  <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                    排序号</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">th:value</span>=<span class="string">"*&#123;orderNum&#125;"</span> <span class="attr">name</span>=<span class="string">"orderNum"</span> <span class="attr">placeholder</span>=<span class="string">"排序号"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group radio1 radio0"</span>  <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                    图标</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:value</span>=<span class="string">"*&#123;icon&#125;"</span> <span class="attr">name</span>=<span class="string">"icon"</span> <span class="attr">placeholder</span>=<span class="string">"菜单图标"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">code</span> <span class="attr">style</span>=<span class="string">"margin-top: 4px; display: block;"</span>&gt;</span>获取图标：http://fontawesome.io/icons/<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;div class="form-group"&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;div class="col-sm-2 control-label"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;input type="button" onclick="doSave()" value="确定" class="btn btn-primary"/&gt; &amp;nbsp;&amp;nbsp;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;input type="button" value="返回" class="btn btn-warning"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//保存</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">doSave</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> editForm = $(<span class="string">"#editForm"</span>).serializeObject();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(editForm)</span></span><br><span class="line"><span class="undefined">        Api.putJson(&#123;</span></span><br><span class="line"><span class="actionscript">            url: Main.getContextPath() + <span class="string">"/sys/menu/save"</span>,</span></span><br><span class="line"><span class="javascript">            data: <span class="built_in">JSON</span>.stringify(editForm),</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                 $(<span class="string">"#editModal"</span>).modal(<span class="string">"hide"</span>);</span></span><br><span class="line"><span class="undefined">                toastr.success(data.message);</span></span><br><span class="line"><span class="undefined">                reloadtable();</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">                toastr.error(data.message);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> key= <span class="string">".radio"</span> + $(<span class="string">"input[name='type']:checked"</span>).val();</span></span><br><span class="line"><span class="javascript">        $(key).show();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//类型选择事件</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"input[type='radio']"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.radio0'</span>).hide();</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.radio1'</span>).hide();</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.radio2'</span>).hide();</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> radioValue = value.target.defaultValue;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> id = <span class="string">".radio"</span> + radioValue;</span></span><br><span class="line"><span class="javascript">            $(id).show();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解决表单回显&quot;&gt;&lt;a href=&quot;#解决表单回显&quot; class=&quot;headerlink&quot; title=&quot;解决表单回显&quot;&gt;&lt;/a&gt;解决表单回显&lt;/h2&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>layui 使用弹窗功能及树控件</title>
    <link href="//aha.me/2019/02/16/layui-%E4%BD%BF%E7%94%A8%E5%BC%B9%E7%AA%97%E5%8A%9F%E8%83%BD%E5%8F%8A%E6%A0%91%E6%8E%A7%E4%BB%B6/"/>
    <id>//aha.me/2019/02/16/layui-使用弹窗功能及树控件/</id>
    <published>2019-02-16T15:04:36.000Z</published>
    <updated>2019-02-16T15:05:56.421Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190216230451368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../layui/css/layui.css"</span> <span class="attr">media</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../layui/css/eleTree.css"</span> <span class="attr">media</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"parentIframe"</span> <span class="attr">class</span>=<span class="string">"layui-btn"</span>&gt;</span>dsadasdasdas<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eleTree ele1"</span> <span class="attr">lay-filter</span>=<span class="string">"data1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"layui-btn"</span>&gt;</span>获取选中数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 选择菜单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menuLayer"</span> <span class="attr">style</span>=<span class="string">"display: none;padding:10px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"menuTree"</span> <span class="attr">class</span>=<span class="string">"ztree"</span>&gt;</span>asffffffffffff<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../layui/layui.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        layui.config(&#123;</span></span><br><span class="line"><span class="actionscript">            base: <span class="string">"../layui/lay/mymodules/"</span></span></span><br><span class="line"><span class="actionscript">        &#125;).use([<span class="string">'jquery'</span>,<span class="string">'eleTree'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">var</span>  $ = layui.jquery;</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">var</span>  eleTree = layui.eleTree;</span></span><br><span class="line"><span class="javascript">           $(<span class="string">'#parentIframe'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">              layer.open(&#123;</span></span><br><span class="line"><span class="undefined">                type: 1,</span></span><br><span class="line"><span class="actionscript">                offset: <span class="string">'50px'</span>,</span></span><br><span class="line"><span class="actionscript">                skin: <span class="string">'layui-layer-molv'</span>,</span></span><br><span class="line"><span class="actionscript">                title: <span class="string">"选择菜单"</span>,</span></span><br><span class="line"><span class="actionscript">                area: [<span class="string">'300px'</span>, <span class="string">'450px'</span>],</span></span><br><span class="line"><span class="undefined">                shade: 0,</span></span><br><span class="line"><span class="actionscript">                shadeClose: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                content: $(<span class="string">"#menuLayer"</span>),</span></span><br><span class="line"><span class="actionscript">                btn: [<span class="string">'确定'</span>, <span class="string">'取消'</span>],</span></span><br><span class="line"><span class="actionscript">                btn1: <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// var node = ztree.getSelectedNodes();</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// //选择上级菜单</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// vm.menu.parentId = node[0].menuId;</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// vm.menu.parentName = node[0].name;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    layer.close(index);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">          &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">       &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>git上代码<a href="https://gitee.com/zch2017lrf/layui_tree_node" target="_blank" rel="noopener">https://gitee.com/zch2017lrf/layui_tree_node</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190216230451368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="layui" scheme="//aha.me/categories/layui/"/>
    
    
      <category term="layui" scheme="//aha.me/tags/layui/"/>
    
  </entry>
  
  <entry>
    <title>layui 引入插件</title>
    <link href="//aha.me/2019/02/16/layui-%E5%BC%95%E5%85%A5%E6%8F%92%E4%BB%B6/"/>
    <id>//aha.me/2019/02/16/layui-引入插件/</id>
    <published>2019-02-16T15:02:26.000Z</published>
    <updated>2019-02-16T15:03:33.263Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">layui</span><span class="selector-class">.config</span>(&#123;</span><br><span class="line">    <span class="attribute">base</span>: Main.getContextPath()+<span class="string">'/assets/plugins/layui/lay/modules/'</span> <span class="comment">//假设这是test.js所在的目录   可以把你需要扩展的js插件都放在一个文件夹内</span></span><br><span class="line">&#125;)<span class="selector-class">.extend</span>(&#123; <span class="comment">//设定组件别名</span></span><br><span class="line">    <span class="attribute">dtree</span>: <span class="string">'dtree'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> layui.<span class="keyword">use</span>([<span class="string">'jquery'</span>,<span class="string">'dtree'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span>  $ = layui.jquery;</span><br><span class="line">        <span class="keyword">var</span> dtree = layui.dtree;</span><br><span class="line">&#125;)</span><br><span class="line">使用</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;layui&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.config&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;base&lt;/span&gt;: Main.getContextPath()+&lt;span class=&quot;string&quot;&gt;&#39;/assets/plugins/layui/lay/modules/&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//假设这是test.js所在的目录   可以把你需要扩展的js插件都放在一个文件夹内&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;selector-class&quot;&gt;.extend&lt;/span&gt;(&amp;#123; &lt;span class=&quot;comment&quot;&gt;//设定组件别名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;dtree&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;dtree&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="layui" scheme="//aha.me/categories/layui/"/>
    
    
      <category term="layui" scheme="//aha.me/tags/layui/"/>
    
  </entry>
  
  <entry>
    <title>layui 使用layui 扩展组件 dtree</title>
    <link href="//aha.me/2019/02/16/layui-%E4%BD%BF%E7%94%A8layui-%E6%89%A9%E5%B1%95%E7%BB%84%E4%BB%B6-dtree/"/>
    <id>//aha.me/2019/02/16/layui-使用layui-扩展组件-dtree/</id>
    <published>2019-02-16T14:56:14.000Z</published>
    <updated>2019-02-16T15:00:09.168Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190216225730342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.thymeleaf.org "</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"decorator"</span> <span class="attr">content</span>=<span class="string">"/decorator/modal"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span> <span class="attr">id</span>=<span class="string">"modelFrom"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"editForm"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;data&#125;"</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>  <span class="attr">th:value</span>=<span class="string">"$&#123;data.id&#125;"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>  <span class="attr">th:value</span>=<span class="string">"$&#123;data.status&#125;"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"status"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- fsfdsdf --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                参数名</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;data.paramKey&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"paramKey"</span> <span class="attr">placeholder</span>=<span class="string">"参数名称"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                参数值</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span>  <span class="attr">th:value</span>=<span class="string">"$&#123;data.paramValue&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"paramValue"</span> <span class="attr">placeholder</span>=<span class="string">"参数值"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                上级</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span>  <span class="attr">value</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"parentId"</span> <span class="attr">name</span>=<span class="string">"parentId"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>   <span class="attr">id</span>=<span class="string">"parentIframe"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span> <span class="attr">placeholder</span>=<span class="string">"请选择上一级"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">style</span>=<span class="string">"cursor: pointer;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                    备注</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">wrap</span>=<span class="string">"10"</span> <span class="attr">placeholder</span>=<span class="string">"备注"</span> <span class="attr">name</span>=<span class="string">"remark"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;data.remark&#125;"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ConfigLayer"</span> <span class="attr">style</span>=<span class="string">"display: none;padding:10px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ConfigTree"</span> <span class="attr">class</span>=<span class="string">"dtree"</span> <span class="attr">data-id</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> data=[</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"title"</span>: <span class="string">"上级菜单"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"spread"</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">            id:0,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"isLast"</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"children"</span>: [</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"title"</span>: <span class="string">"管理员"</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"level"</span>: <span class="string">"2"</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"parentId"</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"isLast"</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                    id:12</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"title"</span>: <span class="string">"普通用户"</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"level"</span>: <span class="string">"2"</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"parentId"</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"isLast"</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                    id:13</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"title"</span>: <span class="string">"高级管理员"</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"level"</span>: <span class="string">"2"</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"parentId"</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"isLast"</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                    id:14</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">        &#125;];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    layui.use([<span class="string">'jquery'</span>,<span class="string">'dtree'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span>  $ = layui.jquery;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> dtree = layui.dtree;</span></span><br><span class="line"><span class="undefined">        dtree.render(&#123;</span></span><br><span class="line"><span class="actionscript">            elem: <span class="string">"#ConfigTree"</span>,  <span class="comment">//绑定元素</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//url: "../ConfigTree.json"  //异步接口</span></span></span><br><span class="line"><span class="undefined">            data:data,</span></span><br><span class="line"><span class="actionscript">            request: &#123;<span class="string">"access_token"</span>: localStorage.getItem(<span class="string">"token"</span>)&#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"inif!!!!!!!"</span>)</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#parentIframe'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">            layer.open(&#123;</span></span><br><span class="line"><span class="undefined">                type: 1,</span></span><br><span class="line"><span class="actionscript">                offset: <span class="string">'50px'</span>,</span></span><br><span class="line"><span class="actionscript">                skin: <span class="string">'layui-layer-molv'</span>,</span></span><br><span class="line"><span class="actionscript">                title: <span class="string">"请选择上一级"</span>,</span></span><br><span class="line"><span class="actionscript">                area: [<span class="string">'300px'</span>, <span class="string">'450px'</span>],</span></span><br><span class="line"><span class="undefined">                shade: 0,</span></span><br><span class="line"><span class="actionscript">                shadeClose: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                content: $(<span class="string">"#ConfigLayer"</span>),</span></span><br><span class="line"><span class="actionscript">                btn: [<span class="string">'确定'</span>, <span class="string">'取消'</span>],</span></span><br><span class="line"><span class="actionscript">                btn1: <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> param = dtree.getNowParam(<span class="string">"ConfigTree"</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#parentIframe'</span>).val(param.context);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#parentId"</span>).val(param.nodeId);</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">console</span>.log( $(<span class="string">"#parentId"</span>).val());</span></span><br><span class="line"><span class="undefined">                    layer.close(index);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//保存</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">doSave</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> editForm = $(<span class="string">"#editForm"</span>).serializeObject();</span></span><br><span class="line"><span class="undefined">        Api.putJson(&#123;</span></span><br><span class="line"><span class="actionscript">            url: Main.getContextPath() + <span class="string">"/sys/config/doSave"</span>,</span></span><br><span class="line"><span class="javascript">            data: <span class="built_in">JSON</span>.stringify(editForm),</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                 $(<span class="string">"#editModal"</span>).modal(<span class="string">"hide"</span>);</span></span><br><span class="line"><span class="undefined">                toastr.success(data.message);</span></span><br><span class="line"><span class="undefined">                refreshTable();</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">                toastr.error(data.message);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190216225730342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="layui" scheme="//aha.me/categories/layui/"/>
    
    
      <category term="layui" scheme="//aha.me/tags/layui/"/>
    
  </entry>
  
  <entry>
    <title>layui dtree 树形组件 elem和obj的区别 目的解决了弹窗关闭后再打开出现空白树</title>
    <link href="//aha.me/2019/02/16/layui-dtree-%E6%A0%91%E5%BD%A2%E7%BB%84%E4%BB%B6-elem%E5%92%8Cobj%E7%9A%84%E5%8C%BA%E5%88%AB-%E7%9B%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E4%BA%86%E5%BC%B9%E7%AA%97%E5%85%B3%E9%97%AD%E5%90%8E%E5%86%8D%E6%89%93%E5%BC%80%E5%87%BA%E7%8E%B0%E7%A9%BA%E7%99%BD%E6%A0%91/"/>
    <id>//aha.me/2019/02/16/layui-dtree-树形组件-elem和obj的区别-目的解决了弹窗关闭后再打开出现空白树/</id>
    <published>2019-02-16T14:53:45.000Z</published>
    <updated>2019-02-16T14:55:07.415Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>elem：树绑定的元素ID。 obj：树绑定的DOM。<br>使用elem元素可以绑定已经在页面中存在的元素，而如果是页面中点击某个按钮生成的元素的话，则可以用obj来指定，这在使用layer.open()中打开一个树极为有效，它可以规避元素在生成之前被绑定从而找不到的问题。最终组件会将elem转换为该属性，elem和obj属性必须指定一个，如果同时指定，则优先obj属性的配置项<br><a id="more"></a></p></blockquote><h2 id="elem参数使用示例"><a href="#elem参数使用示例" class="headerlink" title="elem参数使用示例"></a>elem参数使用示例</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dtree</span><span class="selector-class">.render</span>(&#123;</span><br><span class="line">  <span class="attribute">elem</span>: <span class="string">"#elemTree"</span>,</span><br><span class="line">  data: elemTree</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="obj参数使用示例"><a href="#obj参数使用示例" class="headerlink" title="obj参数使用示例"></a>obj参数使用示例</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">layer.open(&#123;</span><br><span class="line">  <span class="class"><span class="keyword">type</span></span>: <span class="number">1</span>,</span><br><span class="line">  title: <span class="string">"目录"</span>,</span><br><span class="line">  content: '&lt;ul id=<span class="string">"objTree"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"dtree"</span> data-id=<span class="string">"0"</span>&gt;&lt;/ul&gt;',</span><br><span class="line">  area:[<span class="string">"180px"</span>, <span class="string">"500px"</span>]</span><br><span class="line">  success: function(layero, index)&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = $(layero).find(<span class="string">"#objTree"</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="type">DTree</span> = dtree.render(&#123;</span><br><span class="line">      obj: obj,</span><br><span class="line">      url: '/objTree/objTree.json'</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;elem：树绑定的元素ID。 obj：树绑定的DOM。&lt;br&gt;使用elem元素可以绑定已经在页面中存在的元素，而如果是页面中点击某个按钮生成的元素的话，则可以用obj来指定，这在使用layer.open()中打开一个树极为有效，它可以规避元素在生成之前被绑定从而找不到的问题。最终组件会将elem转换为该属性，elem和obj属性必须指定一个，如果同时指定，则优先obj属性的配置项&lt;br&gt;
    
    </summary>
    
      <category term="layui" scheme="//aha.me/categories/layui/"/>
    
    
      <category term="layui" scheme="//aha.me/tags/layui/"/>
    
  </entry>
  
  <entry>
    <title>layui dtree 树形组件使用递归处理返回数据</title>
    <link href="//aha.me/2019/02/16/layui-dtree-%E6%A0%91%E5%BD%A2%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E9%80%92%E5%BD%92%E5%A4%84%E7%90%86%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/"/>
    <id>//aha.me/2019/02/16/layui-dtree-树形组件使用递归处理返回数据/</id>
    <published>2019-02-16T14:49:24.000Z</published>
    <updated>2019-02-16T14:52:53.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="递归处理返回数据"><a href="#递归处理返回数据" class="headerlink" title="递归处理返回数据"></a>递归处理返回数据</h2><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.thymeleaf.org "</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"decorator"</span> <span class="attr">content</span>=<span class="string">"/decorator/modal"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span> <span class="attr">id</span>=<span class="string">"modelFrom"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"editForm"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;data&#125;"</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>  <span class="attr">th:value</span>=<span class="string">"$&#123;data.id&#125;"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>  <span class="attr">th:value</span>=<span class="string">"$&#123;data.status&#125;"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"status"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- fsfdsdf --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                参数名</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;data.paramKey&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"paramKey"</span> <span class="attr">placeholder</span>=<span class="string">"参数名称"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                参数值</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span>  <span class="attr">th:value</span>=<span class="string">"$&#123;data.paramValue&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"paramValue"</span> <span class="attr">placeholder</span>=<span class="string">"参数值"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                上级</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span>  <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">id</span>=<span class="string">"parentId"</span> <span class="attr">name</span>=<span class="string">"parentId"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>   <span class="attr">id</span>=<span class="string">"parentIframe"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span> <span class="attr">placeholder</span>=<span class="string">"请选择上一级"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">style</span>=<span class="string">"cursor: pointer;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span></span><br><span class="line">                    备注</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">wrap</span>=<span class="string">"10"</span> <span class="attr">placeholder</span>=<span class="string">"备注"</span> <span class="attr">name</span>=<span class="string">"remark"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;data.remark&#125;"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ConfigLayer"</span> <span class="attr">style</span>=<span class="string">"display: none;padding:10px;"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;ul id="ConfigTree" class="dtree" data-id="0"&gt;&lt;/ul&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    layui.use([<span class="string">'jquery'</span>,<span class="string">'dtree'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span>  $ = layui.jquery;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> dtree = layui.dtree;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#parentIframe'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">            layer.open(&#123;</span></span><br><span class="line"><span class="undefined">                type: 1,</span></span><br><span class="line"><span class="actionscript">                offset: <span class="string">'50px'</span>,</span></span><br><span class="line"><span class="actionscript">                skin: <span class="string">'layui-layer-molv'</span>,</span></span><br><span class="line"><span class="actionscript">                title: <span class="string">"请选择上一级"</span>,</span></span><br><span class="line"><span class="actionscript">                area: [<span class="string">'300px'</span>, <span class="string">'450px'</span>],</span></span><br><span class="line"><span class="undefined">                shade: 0,</span></span><br><span class="line"><span class="actionscript">                shadeClose: <span class="literal">false</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">                content: '<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ConfigTree"</span> <span class="attr">class</span>=<span class="string">"dtree"</span> <span class="attr">data-id</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">                btn: [<span class="string">'确定'</span>, <span class="string">'取消'</span>],</span></span><br><span class="line"><span class="actionscript">                btn1: <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> param = dtree.getNowParam(<span class="string">"ConfigTree"</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#parentIframe'</span>).val(param.context);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#parentId"</span>).val(param.nodeId);</span></span><br><span class="line"><span class="undefined">                    layer.close(index);</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="actionscript">                success:<span class="function"><span class="keyword">function</span> <span class="params">(layero, index)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> obj = $(layero).find(<span class="string">"#ConfigTree"</span>);</span></span><br><span class="line"><span class="undefined">                     dtree.render(&#123;</span></span><br><span class="line"><span class="actionscript">                        obj: obj,  <span class="comment">//绑定元素</span></span></span><br><span class="line"><span class="actionscript">                        url: Main.getContextPath() +<span class="string">"/sys/config/findConfigList?"</span>+<span class="string">"access_token="</span>+localStorage.getItem(<span class="string">"token"</span>),</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//异步接口</span></span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="javascript">                     <span class="built_in">console</span>.log(dtree)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//保存</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">doSave</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> editForm = $(<span class="string">"#editForm"</span>).serializeObject();</span></span><br><span class="line"><span class="undefined">        Api.putJson(&#123;</span></span><br><span class="line"><span class="actionscript">            url: Main.getContextPath() + <span class="string">"/sys/config/doSave"</span>,</span></span><br><span class="line"><span class="javascript">            data: <span class="built_in">JSON</span>.stringify(editForm),</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                 $(<span class="string">"#editModal"</span>).modal(<span class="string">"hide"</span>);</span></span><br><span class="line"><span class="undefined">                toastr.success(data.message);</span></span><br><span class="line"><span class="undefined">                refreshTable();</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">                toastr.error(data.message);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value=<span class="string">"获取所有参数"</span>,notes=<span class="string">"显示在参数添加或修改弹窗中"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/findConfigList"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">DTreeResponse <span class="title">findConfigList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DTreeResponse dTreeResponse=<span class="keyword">new</span> DTreeResponse();</span><br><span class="line">        dTreeResponse.setStatus(<span class="keyword">new</span> Status());</span><br><span class="line">        CopyOnWriteArrayList arrayList=<span class="keyword">new</span> CopyOnWriteArrayList();</span><br><span class="line">        arrayList.add(sysConfigService.findConfigList());</span><br><span class="line">        dTreeResponse.setData(arrayList);</span><br><span class="line">        <span class="keyword">return</span> dTreeResponse;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="SysConfigServiceImpl"><a href="#SysConfigServiceImpl" class="headerlink" title="SysConfigServiceImpl"></a>SysConfigServiceImpl</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DTree findConfigList()&#123;</span><br><span class="line">       List&lt;SysConfigEntity&gt; li=sysConfigJpa.findAll();</span><br><span class="line">       DTree dTree=<span class="keyword">new</span> DTree();</span><br><span class="line">       dTree.setId(<span class="string">"0"</span>);</span><br><span class="line">       dTree.setParentId(<span class="keyword">String</span>.valueOf(<span class="number">-1</span>));</span><br><span class="line">       dTree.setIsLast(<span class="keyword">false</span>);</span><br><span class="line">       dTree.setTitle(<span class="string">"最高级"</span>);</span><br><span class="line">       <span class="keyword">if</span>(li.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;dTree.setChildren(dfs(li,<span class="number">0</span>));&#125;</span><br><span class="line">       <span class="keyword">return</span> dTree;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通过递归查询子节点</span></span><br><span class="line"><span class="comment">    * @param li 要查询的集合</span></span><br><span class="line"><span class="comment">    * @param key 父级id</span></span><br><span class="line"><span class="comment">    * @return List &lt;DTree&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> CopyOnWriteArrayList &lt;DTree&gt; dfs(List&lt;SysConfigEntity&gt; li, <span class="keyword">long</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">       CopyOnWriteArrayList&lt;DTree&gt; list=<span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (SysConfigEntity sysConfig : li) &#123;</span><br><span class="line">           <span class="keyword">if</span>(sysConfig.getParentId()==<span class="built_in">key</span>)&#123;</span><br><span class="line">               DTree dt=<span class="keyword">new</span> DTree();</span><br><span class="line">               dt.setId(<span class="keyword">String</span>.valueOf(sysConfig.getId()));</span><br><span class="line">               dt.setTitle(sysConfig.getParamKey());</span><br><span class="line">               dt.setIsLast(<span class="keyword">false</span>);</span><br><span class="line">               dt.setParentId(<span class="keyword">String</span>.valueOf(<span class="built_in">key</span>));</span><br><span class="line">               CopyOnWriteArrayList&lt;DTree&gt;haveOrNull=dfs(li,sysConfig.getId());</span><br><span class="line">               <span class="comment">//子为空，则退出</span></span><br><span class="line">               <span class="keyword">if</span>(haveOrNull!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                   dt.setChildren(haveOrNull);</span><br><span class="line">                   <span class="comment">//设置为是否为最后子节点</span></span><br><span class="line">                   <span class="keyword">if</span> (haveOrNull.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">                       dt.setIsLast(<span class="keyword">true</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">                   list.<span class="built_in">add</span>(dt);</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="comment">//为空则退出</span></span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190216225058547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190216225121830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="错误："><a href="#错误：" class="headerlink" title="错误："></a>错误：</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"hidden"</span>  <span class="attribute">value</span>=<span class="string">"0"</span> <span class="attribute">id</span>=<span class="string">"parentId"</span> <span class="attribute">name</span>=<span class="string">"parentId"</span>&gt;表单如未选择上级默认给0</span><br></pre></td></tr></table></figure><blockquote><p>//设置为是否为最后子节点<br>if (haveOrNull.size() == 0) {<br>dt.setIsLast(true);<br>}</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;递归处理返回数据&quot;&gt;&lt;a href=&quot;#递归处理返回数据&quot; class=&quot;headerlink&quot; title=&quot;递归处理返回数据&quot;&gt;&lt;/a&gt;递归处理返回数据&lt;/h2&gt;
    
    </summary>
    
      <category term="layui" scheme="//aha.me/categories/layui/"/>
    
    
      <category term="layui" scheme="//aha.me/tags/layui/"/>
    
      <category term="递归处理返回数据" scheme="//aha.me/tags/%E9%80%92%E5%BD%92%E5%A4%84%E7%90%86%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>JAVA中分为基本数据类型及引用数据类型</title>
    <link href="//aha.me/2019/02/16/JAVA%E4%B8%AD%E5%88%86%E4%B8%BA%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>//aha.me/2019/02/16/JAVA中分为基本数据类型及引用数据类型/</id>
    <published>2019-02-16T14:45:49.000Z</published>
    <updated>2019-02-16T14:48:48.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基本数据类型："><a href="#一、基本数据类型：" class="headerlink" title="一、基本数据类型："></a>一、基本数据类型：</h2><a id="more"></a><blockquote><p>byte：Java中最小的数据类型，在内存中占8位(bit)，即1个字节，取值范围-128~127，默认值0</p><p>short：短整型，在内存中占16位，即2个字节，取值范围-32768~32717，默认值0</p><p>int：整型，用于存储整数，在内在中占32位，即4个字节，取值范围-2147483648~2147483647，默认值0</p><p>long：长整型，在内存中占64位，即8个字节-2^63~2^63-1，默认值0L</p><p>float：浮点型，在内存中占32位，即4个字节，用于存储带小数点的数字（与double的区别在于float类型有效小数点只有6~7位），默认值0</p><p>double：双精度浮点型，用于存储带有小数点的数字，在内存中占64位，即8个字节，默认值0</p><p>char：字符型，用于存储单个字符，占16位，即2个字节，取值范围0~65535，默认值为空</p><p>boolean：布尔类型，占1个字节，用于判断真或假（仅有两个值，即true、false），默认值false</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190216224659376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、基本数据类型：&quot;&gt;&lt;a href=&quot;#一、基本数据类型：&quot; class=&quot;headerlink&quot; title=&quot;一、基本数据类型：&quot;&gt;&lt;/a&gt;一、基本数据类型：&lt;/h2&gt;
    
    </summary>
    
      <category term="Java基础" scheme="//aha.me/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="//aha.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>layui 弹出层复选框反选数据</title>
    <link href="//aha.me/2019/02/16/layui-%E5%BC%B9%E5%87%BA%E5%B1%82%E5%A4%8D%E9%80%89%E6%A1%86%E5%8F%8D%E9%80%89%E6%95%B0%E6%8D%AE/"/>
    <id>//aha.me/2019/02/16/layui-弹出层复选框反选数据/</id>
    <published>2019-02-16T14:41:28.000Z</published>
    <updated>2019-02-16T14:44:08.615Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190216224230801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.thymeleaf.org "</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"decorator"</span> <span class="attr">content</span>=<span class="string">"/decorator/modal"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"editForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>角色名称：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">""</span> <span class="attr">maxlength</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-fluid"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"layui-form-label"</span>&gt;</span>报表ID：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-block"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"reportId5"</span> <span class="attr">id</span>=<span class="string">"reportId5"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">class</span>=<span class="string">"layui-input"</span> <span class="attr">readonly</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"layui-form-label"</span>&gt;</span>报表名称：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-block"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"reportName5"</span> <span class="attr">id</span>=<span class="string">"reportName5"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">class</span>=<span class="string">"layui-input"</span> <span class="attr">readonly</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    layui.use([<span class="string">'jquery'</span>,<span class="string">'dtree'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span>  $ = layui.jquery;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> dtree = layui.dtree;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#reportName5'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">            layer.open(&#123;</span></span><br><span class="line"><span class="undefined">                type: 1,</span></span><br><span class="line"><span class="actionscript">                offset: <span class="string">'50px'</span>,</span></span><br><span class="line"><span class="actionscript">                skin: <span class="string">'layui-layer-molv'</span>,</span></span><br><span class="line"><span class="actionscript">                title: <span class="string">"请选择上一级"</span>,</span></span><br><span class="line"><span class="actionscript">                area: [<span class="string">'300px'</span>, <span class="string">'450px'</span>],</span></span><br><span class="line"><span class="undefined">                shade: 0,</span></span><br><span class="line"><span class="actionscript">                shadeClose: <span class="literal">false</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">                content: '<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ConfigTree"</span> <span class="attr">class</span>=<span class="string">"dtree"</span> <span class="attr">data-id</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">                btn: [<span class="string">'确定'</span>, <span class="string">'取消'</span>],</span></span><br><span class="line"><span class="actionscript">                yes: <span class="function"><span class="keyword">function</span><span class="params">(index, layero)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> params = dtree.getCheckbarNodesParam(<span class="string">"ConfigTree"</span>); <span class="comment">// 获取选中值</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span>(params.length == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                        layer.msg(<span class="string">"请至少选择一个节点"</span>,&#123;icon:<span class="number">2</span>&#125;);</span></span><br><span class="line"><span class="actionscript">                        flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> ids = [], names = [];</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> params)&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">var</span> param = params[key];</span></span><br><span class="line"><span class="undefined">                        ids.push(param.nodeId);</span></span><br><span class="line"><span class="undefined">                        names.push(param.context);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#reportId5"</span>).val(ids.join(<span class="string">","</span>));</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#reportName5"</span>).val(names.join(<span class="string">","</span>));</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="undefined">                        layer.close(index);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="actionscript">                success:<span class="function"><span class="keyword">function</span> <span class="params">(layero, index)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> obj = $(layero).find(<span class="string">"#ConfigTree"</span>);</span></span><br><span class="line"><span class="undefined">                    dtree.render(&#123;</span></span><br><span class="line"><span class="actionscript">                        obj: obj,  <span class="comment">//绑定元素</span></span></span><br><span class="line"><span class="undefined">                        initLevel:1,</span></span><br><span class="line"><span class="actionscript">                        url: Main.getContextPath() +<span class="string">"/sys/menu/findConfigList?"</span>+<span class="string">"access_token="</span>+localStorage.getItem(<span class="string">"token"</span>),</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//异步接口</span></span></span><br><span class="line"><span class="actionscript">                        checkbar: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                        checkbarType: <span class="string">"no-all"</span>, <span class="comment">// 默认就是all，其他的值为： no-all   p-casc   self</span></span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 保存</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">doSave</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> editForm = $(<span class="string">"#editForm"</span>).serializeObject();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(editForm);</span></span></span><br><span class="line"><span class="undefined">        Api.putJson(&#123;</span></span><br><span class="line"><span class="actionscript">            url: Main.getContextPath() + <span class="string">"/user/doSave"</span>,</span></span><br><span class="line"><span class="javascript">            data: <span class="built_in">JSON</span>.stringify(editForm),</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#editModal"</span>).modal(<span class="string">"hide"</span>);</span></span><br><span class="line"><span class="undefined">                reloadtable();</span></span><br><span class="line"><span class="undefined">                toastr.success(data.message);</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">                toastr.error(data.message);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190216224230801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NzIyNA==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="layui" scheme="//aha.me/categories/layui/"/>
    
    
      <category term="layui" scheme="//aha.me/tags/layui/"/>
    
  </entry>
  
  <entry>
    <title>treegrid.js BootstrapTable进行封装</title>
    <link href="//aha.me/2019/02/16/treegrid-js-BootstrapTable%E8%BF%9B%E8%A1%8C%E5%B0%81%E8%A3%85/"/>
    <id>//aha.me/2019/02/16/treegrid-js-BootstrapTable进行封装/</id>
    <published>2019-02-16T14:39:05.000Z</published>
    <updated>2019-02-16T14:40:31.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Plugins = &#123;</span><br><span class="line">    initDaterangepicker: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        $(obj).daterangepicker(&#123;</span><br><span class="line">            timePicker: <span class="literal">true</span>, <span class="comment">//显示时间</span></span><br><span class="line">            timePicker24Hour: <span class="literal">true</span>, <span class="comment">//时间制</span></span><br><span class="line">            timePickerSeconds: <span class="literal">true</span>, <span class="comment">//时间显示到秒</span></span><br><span class="line">            <span class="comment">// startDate: moment().hours(0).minutes(0).seconds(0), // 今天</span></span><br><span class="line">            startDate: moment().subtract(<span class="number">1</span>, <span class="string">'year'</span>).startOf(<span class="string">'days'</span>), <span class="comment">//近一年</span></span><br><span class="line">            endDate: moment(<span class="keyword">new</span> <span class="built_in">Date</span>()), <span class="comment">//设置结束器日期</span></span><br><span class="line">            maxDate: moment(<span class="keyword">new</span> <span class="built_in">Date</span>()), <span class="comment">//设置最大日期</span></span><br><span class="line">            <span class="string">"opens"</span>: <span class="string">"center"</span>,</span><br><span class="line">            ranges: &#123;</span><br><span class="line">                <span class="string">'今天'</span>: [moment().startOf(<span class="string">'days'</span>), moment()],</span><br><span class="line">                <span class="string">'昨天'</span>: [moment().subtract(<span class="number">1</span>, <span class="string">'days'</span>).startOf(<span class="string">'days'</span>), moment()],</span><br><span class="line">                <span class="string">'上周'</span>: [moment().subtract(<span class="number">6</span>, <span class="string">'days'</span>).startOf(<span class="string">'days'</span>), moment()],</span><br><span class="line">                <span class="string">'前30天'</span>: [moment().subtract(<span class="number">29</span>, <span class="string">'days'</span>).startOf(<span class="string">'days'</span>), moment()],</span><br><span class="line">                <span class="string">'本月'</span>: [moment().startOf(<span class="string">'month'</span>), moment().endOf(<span class="string">'month'</span>)],</span><br><span class="line">                <span class="string">'上月'</span>: [moment().subtract(<span class="number">1</span>, <span class="string">'month'</span>).startOf(<span class="string">'month'</span>), moment().subtract(<span class="number">1</span>, <span class="string">'month'</span>).endOf(<span class="string">'month'</span>)],</span><br><span class="line">                <span class="string">'近半年'</span>: [moment().subtract(<span class="number">6</span>, <span class="string">'month'</span>).startOf(<span class="string">'days'</span>), moment()],</span><br><span class="line">                <span class="string">'近一年'</span>: [moment().subtract(<span class="number">1</span>, <span class="string">'year'</span>).startOf(<span class="string">'days'</span>), moment()],</span><br><span class="line">            &#125;,</span><br><span class="line">            showWeekNumbers: <span class="literal">true</span>,</span><br><span class="line">            locale: &#123;</span><br><span class="line">                format: <span class="string">"YYYY-MM-DD HH:mm:ss"</span>, <span class="comment">//设置显示格式</span></span><br><span class="line">                applyLabel: <span class="string">'确定'</span>, <span class="comment">//确定按钮文本</span></span><br><span class="line">                applyClass: <span class="string">'btn-small btn-primary'</span>,</span><br><span class="line">                cancelLabel: <span class="string">'取消'</span>, <span class="comment">//取消按钮文本</span></span><br><span class="line">                cancelClass: <span class="string">'btn-default'</span>,</span><br><span class="line">                customRangeLabel: <span class="string">'自定义'</span>,</span><br><span class="line">                daysOfWeek: [<span class="string">'日'</span>, <span class="string">'一'</span>, <span class="string">'二'</span>, <span class="string">'三'</span>, <span class="string">'四'</span>, <span class="string">'五'</span>, <span class="string">'六'</span>],</span><br><span class="line">                monthNames: [<span class="string">'一月'</span>, <span class="string">'二月'</span>, <span class="string">'三月'</span>, <span class="string">'四月'</span>, <span class="string">'五月'</span>, <span class="string">'六月'</span>, <span class="string">'七月'</span>, <span class="string">'八月'</span>, <span class="string">'九月'</span>, <span class="string">'十月'</span>, <span class="string">'十一月'</span>, <span class="string">'十二月'</span>],</span><br><span class="line">                firstDay: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">start, end, label</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(start.toISOString(), end.toISOString(), label);</span><br><span class="line">            <span class="built_in">console</span>.log($(obj).val());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    initBootstrapTable: <span class="function"><span class="keyword">function</span> (<span class="params">obj, settings</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> options = &#123;</span><br><span class="line">            method: <span class="string">'get'</span>,</span><br><span class="line">            url: Main.getContextPath() + settings.url,</span><br><span class="line">            toolbar: settings.toolbar,</span><br><span class="line">            sortName: settings.sortName,</span><br><span class="line">            sortOrder: settings.sortOrder,</span><br><span class="line">            uniqueId: settings.uniqueId,</span><br><span class="line">            treeShowField:settings.treeShowField,<span class="comment">//树节点</span></span><br><span class="line">            idField:settings.idField,<span class="comment">//配置id</span></span><br><span class="line">            parentIdField:settings.parentIdField,<span class="comment">//父级</span></span><br><span class="line">            undefinedText: <span class="string">"空"</span>,<span class="comment">//当数据为 undefined 时显示的字符</span></span><br><span class="line">            queryParams: settings.queryParams,</span><br><span class="line">            columns: settings.columns,</span><br><span class="line">            cache: <span class="literal">false</span>, <span class="comment">// ajax数据缓存</span></span><br><span class="line">            contentType: <span class="string">'application/json'</span>, <span class="comment">// 发送到服务器的数据编码类型</span></span><br><span class="line">            dataType: <span class="string">'json'</span>, <span class="comment">// 服务器返回的数据类型</span></span><br><span class="line">            ajaxOptions: &#123;&#125;,</span><br><span class="line">            toolbarAlign: <span class="string">'left'</span>, <span class="comment">// 工具栏的水平位置</span></span><br><span class="line">            search: <span class="literal">false</span>, <span class="comment">// 是否启用自带的搜索框</span></span><br><span class="line">            pagination: <span class="literal">true</span>, <span class="comment">// 显示分页条</span></span><br><span class="line">            sidePagination: <span class="string">'server'</span>, <span class="comment">// 后台分页</span></span><br><span class="line">            pageNumber: <span class="number">1</span>, <span class="comment">// 首页页码</span></span><br><span class="line">            pageSize: <span class="number">10</span>, <span class="comment">// 页面数据条数</span></span><br><span class="line">            pageList: [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>],</span><br><span class="line">            paginationVAlign: <span class="string">'bottom'</span>, <span class="comment">// 分页条 垂直位置</span></span><br><span class="line">            paginationHAlign: <span class="string">'right'</span>, <span class="comment">// 分页条 水平位置</span></span><br><span class="line">            paginationDetailHAlign: <span class="string">'left'</span>, <span class="comment">// 分页详细信息 水平位置</span></span><br><span class="line">            paginationPreText: <span class="string">'上一页'</span>,</span><br><span class="line">            paginationNextText: <span class="string">'下一页'</span>,</span><br><span class="line">            undefinedText: <span class="string">'暂无数据'</span>,</span><br><span class="line">            striped: <span class="literal">true</span>, <span class="comment">// 隔行变色效果</span></span><br><span class="line">            checkboxHeader: <span class="literal">true</span>, <span class="comment">// 全选复选框</span></span><br><span class="line">            clickToSelect: <span class="literal">true</span>, <span class="comment">// 点击行,自动选择checkbox</span></span><br><span class="line">            singleSelect: <span class="literal">false</span>, <span class="comment">// 单选</span></span><br><span class="line">            onResetView:settings.onResetView,<span class="comment">//视图初始化</span></span><br><span class="line">        &#125;;</span><br><span class="line">        $(obj).bootstrapTable(options)</span><br><span class="line">    &#125;,</span><br><span class="line">    initBootstrapFileInput(obj, settings) &#123;</span><br><span class="line">        <span class="keyword">var</span> options = &#123;</span><br><span class="line">            language: <span class="string">'zh'</span>, <span class="comment">//设置语言</span></span><br><span class="line">            uploadUrl: Main.getContextPath() + settings.uploadUrl, <span class="comment">//上传的地址</span></span><br><span class="line">            allowFileTypes: settings.allowFileTypes,</span><br><span class="line">            allowedFileExtensions: settings.allowedFileExtensions,<span class="comment">//接收的文件后缀</span></span><br><span class="line">            allowedPreviewTypes: settings.allowedPreviewTypes,</span><br><span class="line">            previewFileType: settings.previewFileType,</span><br><span class="line">            textEncoding: <span class="string">'UTF-8'</span>,</span><br><span class="line">            uploadAsync: <span class="literal">true</span>, <span class="comment">//默认异步上传</span></span><br><span class="line">            overwriteInitial: <span class="literal">false</span>,</span><br><span class="line">            showCaption: <span class="literal">false</span>, <span class="comment">// 是否显示被选文件的简介</span></span><br><span class="line">            <span class="comment">// overwriteInitial: true,</span></span><br><span class="line">            <span class="comment">// showUploadedThumbs: false,</span></span><br><span class="line">            <span class="comment">// showPreview: true, //是否显示预览区域</span></span><br><span class="line">            initialPreviewAsData: <span class="literal">true</span>,</span><br><span class="line">            enctype: <span class="string">'multipart/form-data'</span>,</span><br><span class="line">            maxFileSize: (<span class="number">500</span> * <span class="number">1024</span>), <span class="comment">// 单位为kb，如果为0表示不限制文件大小</span></span><br><span class="line">            maxFileCount: <span class="number">10</span>,</span><br><span class="line">            uploadExtraData: &#123;<span class="string">"access_token"</span>: localStorage.getItem(<span class="string">"token"</span>)&#125;,</span><br><span class="line">            preferIconicZoomPreview: <span class="literal">false</span>, <span class="comment">// this will force zoom preview thumbnails to display icons for following file extensions</span></span><br><span class="line">            previewFileIconSettings: &#123; <span class="comment">// configure your icon file extensions</span></span><br><span class="line">                <span class="string">'doc'</span>: <span class="string">'&lt;i class="fa fa-file-word-o text-primary"&gt;&lt;/i&gt;'</span>,</span><br><span class="line">                <span class="string">'xls'</span>: <span class="string">'&lt;i class="fa fa-file-excel-o text-success"&gt;&lt;/i&gt;'</span>,</span><br><span class="line">                <span class="string">'ppt'</span>: <span class="string">'&lt;i class="fa fa-file-powerpoint-o text-danger"&gt;&lt;/i&gt;'</span>,</span><br><span class="line">                <span class="string">'pdf'</span>: <span class="string">'&lt;i class="fa fa-file-pdf-o text-danger"&gt;&lt;/i&gt;'</span>,</span><br><span class="line">                <span class="string">'zip'</span>: <span class="string">'&lt;i class="fa fa-file-archive-o text-muted"&gt;&lt;/i&gt;'</span>,</span><br><span class="line">                <span class="string">'htm'</span>: <span class="string">'&lt;i class="fa fa-file-code-o text-info"&gt;&lt;/i&gt;'</span>,</span><br><span class="line">                <span class="string">'txt'</span>: <span class="string">'&lt;i class="fa fa-file-text-o text-info"&gt;&lt;/i&gt;'</span>,</span><br><span class="line">                <span class="string">'mov'</span>: <span class="string">'&lt;i class="fa fa-file-movie-o text-warning"&gt;&lt;/i&gt;'</span>,</span><br><span class="line">                <span class="string">'mp3'</span>: <span class="string">'&lt;i class="fa fa-file-audio-o text-warning"&gt;&lt;/i&gt;'</span>,</span><br><span class="line">                <span class="string">'jpg'</span>: <span class="string">'&lt;i class="fa fa-file-photo-o text-danger"&gt;&lt;/i&gt;'</span>,</span><br><span class="line">                <span class="string">'gif'</span>: <span class="string">'&lt;i class="fa fa-file-photo-o text-warning"&gt;&lt;/i&gt;'</span>,</span><br><span class="line">                <span class="string">'png'</span>: <span class="string">'&lt;i class="fa fa-file-photo-o text-primary"&gt;&lt;/i&gt;'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            previewFileExtSettings: &#123; <span class="comment">// configure the logic for determining icon file extensions</span></span><br><span class="line">                <span class="string">'doc'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ext</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ext.match(<span class="regexp">/(doc|docx)$/i</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'xls'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ext</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ext.match(<span class="regexp">/(xls|xlsx)$/i</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'ppt'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ext</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ext.match(<span class="regexp">/(ppt|pptx)$/i</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'zip'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ext</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ext.match(<span class="regexp">/(zip|rar|tar|gzip|gz|7z)$/i</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'htm'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ext</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ext.match(<span class="regexp">/(htm|html)$/i</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'txt'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ext</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ext.match(<span class="regexp">/(txt|ini|csv|java|php|js|css)$/i</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'mov'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ext</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ext.match(<span class="regexp">/(avi|mpg|mkv|mov|mp4|3gp|webm|wmv)$/i</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'mp3'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ext</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ext.match(<span class="regexp">/(mp3|wav)$/i</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        $(obj).fileinput(options);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DateTime = &#123;</span><br><span class="line">    format: <span class="function"><span class="keyword">function</span> (<span class="params">timeStamp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timeStamp);</span><br><span class="line">        <span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line">        <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> day = date.getDate();</span><br><span class="line">        <span class="keyword">var</span> hour = date.getHours();</span><br><span class="line">        <span class="keyword">var</span> minute = date.getMinutes();</span><br><span class="line">        <span class="keyword">var</span> second = date.getSeconds();</span><br><span class="line">        month = (month &lt; <span class="number">10</span>) ? (<span class="string">'0'</span> + month) : month;</span><br><span class="line">        day = (day &lt; <span class="number">10</span>) ? (<span class="string">'0'</span> + day) : day;</span><br><span class="line">        hour = (hour &lt; <span class="number">10</span>) ? (<span class="string">'0'</span> + hour) : hour;</span><br><span class="line">        minute = (minute &lt; <span class="number">10</span>) ? (<span class="string">'0'</span> + minute) : minute;</span><br><span class="line">        second = (second &lt; <span class="number">10</span>) ? (<span class="string">'0'</span> + second) : second;</span><br><span class="line">        <span class="keyword">return</span> year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$.fn.extend(&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表单form转json对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    serializeObject: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> serializeObj = &#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> array = <span class="keyword">this</span>.serializeArray();</span><br><span class="line">        $(array).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (serializeObj[<span class="keyword">this</span>.name]) &#123;</span><br><span class="line">                <span class="keyword">if</span> ($.isArray(serializeObj[<span class="keyword">this</span>.name])) &#123;</span><br><span class="line">                    serializeObj[<span class="keyword">this</span>.name].push(<span class="keyword">this</span>.value);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    serializeObj[<span class="keyword">this</span>.name] = [serializeObj[<span class="keyword">this</span>.name], <span class="keyword">this</span>.value];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                serializeObj[<span class="keyword">this</span>.name] = <span class="keyword">this</span>.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> serializeObj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $table = $(<span class="string">'#dataTable'</span>);</span><br><span class="line">   $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       Plugins.initDaterangepicker(<span class="string">'#search_datetime'</span>);</span><br><span class="line">       initTable();</span><br><span class="line">       $(<span class="string">'#btn_search'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           $(<span class="string">'#dataTable'</span>).bootstrapTable(<span class="string">'refresh'</span>);</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*初始化表格*/</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">initTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> options = &#123;</span><br><span class="line">           url: <span class="string">'/sys/config/findAll'</span>,</span><br><span class="line">           toolbar: <span class="string">'#toolbar'</span>,</span><br><span class="line">           sortName: <span class="string">'id'</span>,</span><br><span class="line">           sortOrder: <span class="string">'desc'</span>,</span><br><span class="line">           idField:<span class="string">'id'</span>,</span><br><span class="line">           treeShowField: <span class="string">'paramKey'</span>,</span><br><span class="line">           parentIdField: <span class="string">'parentId'</span>,</span><br><span class="line">           queryParams: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> &#123;</span><br><span class="line">                   pageNumber: (params.offset / params.limit) + <span class="number">1</span>,</span><br><span class="line">                   pageSize: params.limit,</span><br><span class="line">                   sortName: params.sort,</span><br><span class="line">                   sortOrder: params.order,</span><br><span class="line">                   search_title: $(<span class="string">'#search_title'</span>).val(),</span><br><span class="line">                   search_datetime: $(<span class="string">'#search_datetime'</span>).val(),</span><br><span class="line">                   access_token: localStorage.getItem(<span class="string">"token"</span>),</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           columns: [</span><br><span class="line">               &#123;</span><br><span class="line">                   checkbox: <span class="literal">true</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                   title: <span class="string">'ID'</span>,</span><br><span class="line">                   field: <span class="string">'id'</span>,</span><br><span class="line">                   width:<span class="string">"40px"</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                   title: <span class="string">'参数名'</span>,</span><br><span class="line">                   field: <span class="string">'paramKey'</span>,</span><br><span class="line">                   width:<span class="string">"180px"</span>,</span><br><span class="line">                   formatter: <span class="function"><span class="keyword">function</span> (<span class="params">value, row, index</span>) </span>&#123;</span><br><span class="line">                       <span class="keyword">return</span> (value == <span class="literal">null</span> || value == <span class="string">''</span>) ? <span class="string">''</span> : value;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                   title: <span class="string">'参数值'</span>,</span><br><span class="line">                   field: <span class="string">'paramValue'</span>,</span><br><span class="line">                   width:<span class="string">"160px"</span></span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                   title: <span class="string">'备注'</span>,</span><br><span class="line">                   field: <span class="string">'remark'</span>,</span><br><span class="line">                   width:<span class="string">"10px"</span></span><br><span class="line">               &#125;</span><br><span class="line">           ],</span><br><span class="line">           onResetView: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">               <span class="comment">// jquery.treegrid.js</span></span><br><span class="line">               $table.treegrid(&#123;</span><br><span class="line">                   initialState: <span class="string">'collapsed'</span>,<span class="comment">//设置开闭</span></span><br><span class="line">                   treeColumn: <span class="number">2</span>,<span class="comment">//指明第几列数据改为树形</span></span><br><span class="line">                   onChange: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                       <span class="comment">// $table.bootstrapTable('resetWidth');</span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;,</span><br><span class="line">       &#125;;</span><br><span class="line">       Plugins.initBootstrapTable(<span class="string">'#dataTable'</span>, options);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;main-js&quot;&gt;&lt;a href=&quot;#main-js&quot; class=&quot;headerlink&quot; title=&quot;main.js&quot;&gt;&lt;/a&gt;main.js&lt;/h2&gt;
    
    </summary>
    
      <category term="前端" scheme="//aha.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="//aha.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>java提高篇（一）—–理解java的三大特性之封装</title>
    <link href="//aha.me/2019/02/16/java%E6%8F%90%E9%AB%98%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%93%E7%90%86%E8%A7%A3java%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%B0%81%E8%A3%85/"/>
    <id>//aha.me/2019/02/16/java提高篇（一）—–理解java的三大特性之封装/</id>
    <published>2019-02-16T14:34:18.000Z</published>
    <updated>2019-02-16T14:38:27.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三大特性之—封装"><a href="#三大特性之—封装" class="headerlink" title="三大特性之—封装"></a>三大特性之—封装</h2><p>封装从字面上来理解就是包装的意思，专业点就是信息隐藏，是指利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体，数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。系统的其他对象只能通过包裹在数据外面的已经授权的操作来与这个封装的对象进行交流和交互。也就是说用户是无需知道对象内部的细节（当然也无从知道），但可以通过该对象对外的提供的接口来访问该对象。<br><a id="more"></a></p><blockquote><p> 对于封装而言，一个对象它所封装的是自己的属性和方法，所以它是不需要依赖其他对象就可以完成自己的操作。</p></blockquote><p>使用封装有三大好处：</p><pre><code>   1、良好的封装能够减少耦合。   2、类内部的结构可以自由修改。   3、可以对成员进行更精确的控制。   4、隐藏信息，实现细节。首先我们先来看两个类：Husband.java、Wife.java</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 对属性的封装</span></span><br><span class="line"><span class="comment">     * 一个人的姓名、性别、年龄、妻子都是这个人的私有属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> String sex ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;</span><br><span class="line">    <span class="keyword">private</span> Wife wife;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * setter()、getter()是该对象对外开发的接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(Wife wife)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wife</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Husband husband;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHusband</span><span class="params">(Husband husband)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.husband = husband;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Husband <span class="title">getHusband</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> husband;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面两个实例我们可以看出Husband里面wife引用是没有getter()的，同时wife的age也是没有getter()方法的。至于理由我想各位都懂的，男人嘛深屋藏娇妻嘛，没有那个女人愿意别人知道她的年龄。</p><p>所以封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果不想被外界方法，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。比如我们将一个房子看做是一个对象，里面的漂亮的装饰，如沙发、电视剧、空调、茶桌等等都是该房子的私有属性，但是如果我们没有那些墙遮挡，是不是别人就会一览无余呢？没有一点儿隐私！就是存在那个遮挡的墙，我们既能够有自己的隐私而且我们可以随意的更改里面的摆设而不会影响到其他的。但是如果没有门窗，一个包裹的严严实实的黑盒子，又有什么存在的意义呢？所以通过门窗别人也能够看到里面的风景。所以说门窗就是房子对象留给外界访问的接口。</p><p>通过这个我们还不能真正体会封装的好处。现在我们从程序的角度来分析封装带来的好处。如果我们不使用封装，那么该对象就没有setter()和getter()，那么Husband类应该这样写：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> name ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> sex ;</span><br><span class="line">    <span class="keyword">public</span> int age ;</span><br><span class="line">    <span class="keyword">public</span> Wife wife;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们应该这样来使用它：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Husband husband = new Husband()<span class="comment">;</span></span><br><span class="line">        husband.age = <span class="number">30</span><span class="comment">;</span></span><br><span class="line">        husband.name = <span class="string">"张三"</span><span class="comment">;</span></span><br><span class="line">        husband.sex = <span class="string">"男"</span><span class="comment">;    //貌似有点儿多余</span></span><br></pre></td></tr></table></figure><p>但是那天如果我们需要修改Husband，例如将age修改为String类型的呢？你只有一处使用了这个类还好，如果你有几十个甚至上百个这样地方，你是不是要改到崩溃。如果使用了封装，我们完全可以不需要做任何修改，只需要稍微改变下Husband类的setAge()方法即可。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class Husband &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 对属性的封装</span></span><br><span class="line"><span class="comment">     * 一个人的姓名、性别、年龄、妻子都是这个人的私有属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> sex ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> age ;    <span class="comment">/* 改成 String类型的*/</span></span><br><span class="line">    <span class="keyword">private</span> Wife wife;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getAge() &#123;</span><br><span class="line">        <span class="built_in">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setAge(<span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="comment">//转换即可</span></span><br><span class="line">        <span class="keyword">this</span>.age = <span class="keyword">String</span>.valueOf(age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 省略其他属性的setter、getter **/</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的地方依然那样引用(husband.setAge(22))保持不变。</p><p>到了这里我们确实可以看出，封装确实可以使我们容易地修改类的内部实现，而无需修改使用了该类的客户代码。</p><p>我们在看这个好处：可以对成员变量进行更精确的控制。</p><p>还是那个Husband，一般来说我们在引用这个对象的时候是不容易出错的，但是有时你迷糊了，写成了这样：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Husband husband = new Husband()<span class="comment">;</span></span><br><span class="line">        husband.age = <span class="number">300</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>也许你是因为粗心写成了，你发现了还好，如果没有发现那就麻烦大了，逼近谁见过300岁的老妖怪啊！</p><p>但是使用封装我们就可以避免这个问题，我们对age的访问入口做一些控制(setter)如：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Husband</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 对属性的封装</span></span><br><span class="line"><span class="comment">     * 一个人的姓名、性别、年龄、妻子都是这个人的私有属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> String sex ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;    <span class="comment">/* 改成 String类型的*/</span></span><br><span class="line">    <span class="keyword">private</span> Wife wife;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span>(<span class="params"><span class="keyword">int</span> age</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(age &gt; <span class="number">120</span>)&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"ERROR：error age input...."</span>);    <span class="comment">//提示錯誤信息</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 省略其他属性的setter、getter **/</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面都是对setter方法的控制，其实通过使用封装我们也能够对对象的出口做出很好的控制。例如性别我们在数据库中一般都是已1、0方式来存储的，但是在前台我们又不能展示1、0，这里我们只需要在getter()方法里面做一些转换即可。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSexName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"0"</span>.<span class="keyword">equals</span>(sex))&#123;</span><br><span class="line">            sexName = <span class="string">"女"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"1"</span>.<span class="keyword">equals</span>(sex))&#123;</span><br><span class="line">            sexName = <span class="string">"男"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            sexName = <span class="string">"人妖???"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sexName;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在使用的时候我们只需要使用sexName即可实现正确的性别显示。同理也可以用于针对不同的状态做出不同的操作。</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public String getCzHTML()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"1"</span>.equals(zt))&#123;</span><br><span class="line">            czHTML = <span class="string">"&lt;a href='</span>javascript:void(<span class="number">0</span>)<span class="string">' onclick='</span>qy(<span class="string">"+id+"</span>)<span class="string">'&gt;启用&lt;/a&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            czHTML = <span class="string">"&lt;a href='</span>javascript:void(<span class="number">0</span>)<span class="string">' onclick='</span>jy(<span class="string">"+id+"</span>)<span class="string">'&gt;禁用&lt;/a&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> czHTML;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;三大特性之—封装&quot;&gt;&lt;a href=&quot;#三大特性之—封装&quot; class=&quot;headerlink&quot; title=&quot;三大特性之—封装&quot;&gt;&lt;/a&gt;三大特性之—封装&lt;/h2&gt;&lt;p&gt;封装从字面上来理解就是包装的意思，专业点就是信息隐藏，是指利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体，数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。系统的其他对象只能通过包裹在数据外面的已经授权的操作来与这个封装的对象进行交流和交互。也就是说用户是无需知道对象内部的细节（当然也无从知道），但可以通过该对象对外的提供的接口来访问该对象。&lt;br&gt;
    
    </summary>
    
      <category term="java提高" scheme="//aha.me/categories/java%E6%8F%90%E9%AB%98/"/>
    
    
      <category term="java提高" scheme="//aha.me/tags/java%E6%8F%90%E9%AB%98/"/>
    
  </entry>
  
  <entry>
    <title>使用Ajax向服务端传送form表单数据 文件上传</title>
    <link href="//aha.me/2019/02/16/%E4%BD%BF%E7%94%A8Ajax%E5%90%91%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BC%A0%E9%80%81form%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>//aha.me/2019/02/16/使用Ajax向服务端传送form表单数据-文件上传/</id>
    <published>2019-02-16T14:30:04.000Z</published>
    <updated>2019-02-16T14:33:24.700Z</updated>
    
    <content type="html"><![CDATA[<p>今天在做附件Demo的时候，发现form表单的submit按钮会自动刷新页面，但在很多情况下，页面的刷新会很大程度影响体验。于是想到用Ajax来代替submit向服务端发送数据，网络上的说法是通过JQuery的serialize()方法序列化表单，但实验之后发现该方法只能传递一般的参数，上传的文件并不能被序列化传递到服务端。</p><p>继续查找资料发现可以使用formData方法来使用Ajax请求向服务端上传form表单附件：<br><a id="more"></a><br>HTML代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:8080/file/servlet/UploadHandleServlet"</span></span></span><br><span class="line"><span class="tag"><span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> &gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">userName/</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>附件:<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>  </span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"增加附件"</span> <span class="attr">onclick</span>=<span class="string">"AddMore()"</span>&gt;</span>  </span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">id</span>=<span class="string">"submit"</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;/<span class="name">td</span>&gt;</span>             </span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>附件下载:<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"fileLoad"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;/<span class="name">table</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData($(<span class="string">"#form"</span>)[<span class="number">0</span>]);</span><br><span class="line">    $.ajax(&#123;  </span><br><span class="line">        url:<span class="string">"http://localhost:8080/file/servlet/UploadHandleServlet"</span>,  </span><br><span class="line">        type:<span class="string">"post"</span>,    </span><br><span class="line">        data:formData,  </span><br><span class="line">        <span class="keyword">async</span>: <span class="literal">false</span>,    </span><br><span class="line">        cache: <span class="literal">false</span>,    </span><br><span class="line">        contentType: <span class="literal">false</span>,    </span><br><span class="line">        processData: <span class="literal">false</span>,  </span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">            <span class="comment">// something to do... </span></span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在做附件Demo的时候，发现form表单的submit按钮会自动刷新页面，但在很多情况下，页面的刷新会很大程度影响体验。于是想到用Ajax来代替submit向服务端发送数据，网络上的说法是通过JQuery的serialize()方法序列化表单，但实验之后发现该方法只能传递一般的参数，上传的文件并不能被序列化传递到服务端。&lt;/p&gt;
&lt;p&gt;继续查找资料发现可以使用formData方法来使用Ajax请求向服务端上传form表单附件：&lt;br&gt;
    
    </summary>
    
      <category term="文件上传" scheme="//aha.me/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
      <category term="AJAX" scheme="//aha.me/tags/AJAX/"/>
    
      <category term="文件上传" scheme="//aha.me/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>layero是什么意思 虚拟dom 解决弹出框虚拟dom找不到，树无法加载</title>
    <link href="//aha.me/2019/02/16/layero%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D-%E8%99%9A%E6%8B%9Fdom-%E8%A7%A3%E5%86%B3%E5%BC%B9%E5%87%BA%E6%A1%86%E8%99%9A%E6%8B%9Fdom%E6%89%BE%E4%B8%8D%E5%88%B0%EF%BC%8C%E6%A0%91%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD/"/>
    <id>//aha.me/2019/02/16/layero是什么意思-虚拟dom-解决弹出框虚拟dom找不到，树无法加载/</id>
    <published>2019-02-16T14:28:01.000Z</published>
    <updated>2019-02-16T14:29:33.350Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>layero = layer object = layer 的对象 = 弹出层的对象<br>就相当于你平时的 $(‘#id’)<br>iframe 不是也有 id class 之类的么，id 就是选择器…<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = $(<span class="string">"#ConfigTree"</span>);</span><br><span class="line">       dtree.render(&#123;</span><br><span class="line">           <span class="comment">//elem: "#ConfigTree",  //绑定元素</span></span><br><span class="line">           obj:obj,</span><br><span class="line">           initLevel: <span class="number">1</span>,</span><br><span class="line">           url: Main.getContextPath() + <span class="string">"/sys/menu/findConfigList?"</span> + <span class="string">"access_token="</span> + localStorage.getItem(<span class="string">"token"</span>),</span><br><span class="line">           <span class="comment">//异步接口</span></span><br><span class="line">           checkbar: <span class="literal">true</span>,</span><br><span class="line">           done:<span class="function"><span class="keyword">function</span> (<span class="params">data,obj</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">var</span> menuId=$(<span class="string">"#menuId"</span>).val();</span><br><span class="line">               <span class="keyword">if</span>(menuId!=<span class="literal">null</span>)&#123;</span><br><span class="line">                   dtree.chooseDataInit(<span class="string">"ConfigTree"</span>,menuId);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           checkbarType: <span class="string">"no-all"</span>, <span class="comment">// 默认就是all，其他的值为： no-all   p-casc   self</span></span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;layero = layer object = layer 的对象 = 弹出层的对象&lt;br&gt;就相当于你平时的 $(‘#id’)&lt;br&gt;iframe 不是也有 id class 之类的么，id 就是选择器…&lt;br&gt;
    
    </summary>
    
      <category term="错误解决" scheme="//aha.me/categories/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="错误解决" scheme="//aha.me/tags/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>使用Bootstrap modal（模态窗）关闭后layui无法渲染表单</title>
    <link href="//aha.me/2019/02/16/%E4%BD%BF%E7%94%A8Bootstrap-modal%EF%BC%88%E6%A8%A1%E6%80%81%E7%AA%97%EF%BC%89%E5%85%B3%E9%97%AD%E5%90%8Elayui%E6%97%A0%E6%B3%95%E6%B8%B2%E6%9F%93%E8%A1%A8%E5%8D%95/"/>
    <id>//aha.me/2019/02/16/使用Bootstrap-modal（模态窗）关闭后layui无法渲染表单/</id>
    <published>2019-02-16T14:26:03.000Z</published>
    <updated>2019-02-16T14:26:42.770Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       $(<span class="string">"#editModal"</span>).on(<span class="string">"shown.bs.modal"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">           <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               form.render(); <span class="comment">//重新渲染表单</span></span><br><span class="line">           &#125;,<span class="number">500</span>)</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>解决方法：使用model加载后事件监听，再使用计时器500毫秒后重新渲染表单(因为要等model页面加载完毕，才可以渲染)</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       $(&lt;span class=&quot;string&quot;&gt;&quot;#editModal&quot;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&quot;shown.bs.modal&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               form.render(); &lt;span class=&quot;comment&quot;&gt;//重新渲染表单&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;,&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="错误解决" scheme="//aha.me/categories/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="错误解决" scheme="//aha.me/tags/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录自己理解的一些设计模式</title>
    <link href="//aha.me/2019/02/16/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E7%90%86%E8%A7%A3%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>//aha.me/2019/02/16/记录自己理解的一些设计模式/</id>
    <published>2019-02-16T14:23:38.000Z</published>
    <updated>2019-02-16T14:24:27.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><a id="more"></a><p>策略模式应该是最基础的一个设计模式，它是对行为的一个抽象。jdk中的Comparator比较器就是一个使用策略设计模式的策略。</p><p>比如有一个Student学生类，有name和age两个属性。如果有个需求需要打印学生名单，并按照字母顺序排序，可以使用Comparator接口并在内部使用name进行比较即可。 如果哪一天需要按照年龄进行排序，那么只需要修改Comparator即可，也就是使用一个新的策略，其它完全不变。</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂模式的意义在于对象的创建、管理可以使用工厂去管理，而不是创建者自身。最典型的工厂模式使用者就是Spring，Spring内部的容器就是一个工厂，所有的bean都由这个容器管理，包括它们的创建、销毁、注入都被这个容器管理。</p><p>工厂模式分简单工厂和抽象工厂。它们的区别在于抽象工厂抽象程度更高，把工厂也抽象成了一个接口，这样可以再每添加一个新的对象的时候而不需要修改工厂的代码。</p><p>比如有个Repository接口，用于存储数据，有DatabaseRepository，CacheRepository，FileRepository分别在数据库，缓存，文件中存储数据，定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Repository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseRepository</span> <span class="keyword">implements</span> <span class="title">Repository</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save in database"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheRepository</span> <span class="keyword">implements</span> <span class="title">Repository</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save in cache"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileRepository</span> <span class="keyword">implements</span> <span class="title">Repository</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save in file"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单工厂的使用"><a href="#简单工厂的使用" class="headerlink" title="简单工厂的使用"></a>简单工厂的使用</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryFactory</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Repository create(<span class="keyword">String</span> type) &#123;</span><br><span class="line">        Repository repository = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"db"</span>:<span class="type"></span></span><br><span class="line"><span class="type">                repository </span>= <span class="keyword">new</span> <span class="type">DatabaseRepository</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"cache"</span>:<span class="type"></span></span><br><span class="line"><span class="type">                repository </span>= <span class="keyword">new</span> <span class="type">CacheRepository</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"file"</span>:<span class="type"></span></span><br><span class="line"><span class="type">                repository </span>= <span class="keyword">new</span> <span class="type">FileRepository</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> repository;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        RepositoryFactory factory = <span class="keyword">new</span> <span class="type">RepositoryFactory</span>();</span><br><span class="line">        factory.create(<span class="string">"db"</span>).save(<span class="keyword">new</span> <span class="type">Object</span>());</span><br><span class="line">        factory.create(<span class="string">"cache"</span>).save(<span class="keyword">new</span> <span class="type">Object</span>());</span><br><span class="line">        factory.create(<span class="string">"file"</span>).save(<span class="keyword">new</span> <span class="type">Object</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简单工厂的弊端在于每添加一个新的Repository，都必须修改RepositoryFactory中的代码</p></blockquote><h2 id="抽象工厂的使用"><a href="#抽象工厂的使用" class="headerlink" title="抽象工厂的使用"></a>抽象工厂的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RepositoryFactoryProvider</span> </span>&#123;</span><br><span class="line">    <span class="function">Repository <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseRepositoryFactory</span> <span class="keyword">implements</span> <span class="title">RepositoryFactoryProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Repository <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DatabaseRepository();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheRepositoryFactory</span> <span class="keyword">implements</span> <span class="title">RepositoryFactoryProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Repository <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CacheRepository();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileRepositoryFactory</span> <span class="keyword">implements</span> <span class="title">RepositoryFactoryProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Repository <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileRepository();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象工厂的测试："><a href="#抽象工厂的测试：" class="headerlink" title="抽象工厂的测试："></a>抽象工厂的测试：</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RepositoryFactoryProvider dbProvider = <span class="keyword">new</span> DatabaseRepositoryFactory();</span><br><span class="line">dbProvider.<span class="keyword">create</span>().<span class="keyword">save</span>(<span class="keyword">new</span> Object());</span><br><span class="line">RepositoryFactoryProvider cacheProvider = <span class="keyword">new</span> CacheRepositoryFactory();</span><br><span class="line">cacheProvider.<span class="keyword">create</span>().<span class="keyword">save</span>(<span class="keyword">new</span> Object());</span><br><span class="line">RepositoryFactoryProvider fileProvider = <span class="keyword">new</span> FileRepositoryFactory();</span><br><span class="line">fileProvider.<span class="keyword">create</span>().<span class="keyword">save</span>(<span class="keyword">new</span> Object());</span><br></pre></td></tr></table></figure><p>抽象工厂把工厂也进行了抽象话，所以添加一个新的Repository的话，只需要新增一个RepositoryFactory即可，原有代码不需要修改。</p><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>装饰者模式的作用就在于它可以在不改变原有类的基础上动态地给类添加新的功能。之前写过一篇通过源码分析MyBatis的缓存文章，mybatis中的query就是使用了装饰者设计模式。</p><p>用一段简单的代码来模拟一下mybatis中query的实现原理：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@ToString</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123; <span class="comment">// 查询结果类，相当于一个domain</span></span><br><span class="line">  <span class="keyword">private</span> Object obj;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">String</span> sql;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Query</span> </span>&#123; <span class="comment">// 查询接口，有简单查询和缓存查询</span></span><br><span class="line">  Result query(<span class="keyword">String</span> sql);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleQuery</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Query</span></span> </span>&#123; <span class="comment">// 简单查询，相当于直接查询数据库，这里直接返回Result，相当于是数据库查询的结果</span></span><br><span class="line">  @Override</span><br><span class="line">  <span class="keyword">public</span> Result query(<span class="keyword">String</span> sql) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Result</span>(<span class="keyword">new</span> <span class="type">Object</span>(), sql);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheQuery</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Query</span></span> </span>&#123; <span class="comment">// 缓存查询，如果查询相同的sql，不直接查询数据库，而是返回map中存在的Result</span></span><br><span class="line">  <span class="keyword">private</span> Query query;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, Result&gt; cache = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">public</span> CacheQuery(Query query) &#123;</span><br><span class="line">      <span class="built_in">this</span>.query = query;</span><br><span class="line">  &#125;</span><br><span class="line">  @Override</span><br><span class="line">  <span class="keyword">public</span> Result query(<span class="keyword">String</span> sql) &#123;</span><br><span class="line">      <span class="keyword">if</span>(cache.containsKey(sql)) &#123;</span><br><span class="line">          <span class="keyword">return</span> cache.<span class="keyword">get</span>(sql);</span><br><span class="line">      &#125;</span><br><span class="line">      Result result = query.query(sql);</span><br><span class="line">      cache.put(sql, result);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Query</span> simpleQuery = new SimpleQuery();</span><br><span class="line">System.<span class="keyword">out</span>.println(simpleQuery.<span class="keyword">query</span>(<span class="string">"select * from t_student"</span>) == simpleQuery.<span class="keyword">query</span>(<span class="string">"select * from t_student"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">Query</span> cacheQuery = new CacheQuery(simpleQuery);</span><br><span class="line">System.<span class="keyword">out</span>.println(cacheQuery.<span class="keyword">query</span>(<span class="string">"select * from t_student"</span>) == cacheQuery.<span class="keyword">query</span>(<span class="string">"select * from t_student"</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这里CacheQuery就是一个装饰类，SimpleQuery是一个被装饰者。我们通过装饰者设计模式动态地给SimpleQuery添加了缓存功能，而不需要修改SimpleQuery的代码。</p><p>当然，装饰者模式也有缺点，就是会存在太多的类。</p><p>如果我们需要添加一个过滤的查询(sql中有敏感字的就直接返回null，而不查询数据库)，只需要可以添加一个FilterQuery装饰者即可：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterQuery</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Query</span></span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Query query;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="keyword">String</span>&gt; words = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> FilterQuery(Query query) &#123;</span><br><span class="line">        <span class="built_in">this</span>.query = query;</span><br><span class="line">        words.add(<span class="string">"fuck"</span>);</span><br><span class="line">        words.add(<span class="string">"sex"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Result query(<span class="keyword">String</span> sql) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">String</span> word : <span class="type">words</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(sql.contains(word)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> query.query(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Query filterQuery = <span class="keyword">new</span> <span class="type">FilterQuery</span>(simpleQuery);</span><br><span class="line">System.out.println(filterQuery.query(<span class="string">"select * from t_student where name = 'fuck'"</span>));  <span class="comment">// null</span></span><br><span class="line">System.out.println(filterQuery.query(<span class="string">"select * from t_student where name = 'format'"</span>)); <span class="comment">// Result(obj=java.lang.Object@1b4fb997, sql=select * from t_student where name = 'format')</span></span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式的作用是使用一个代理类来代替原先类进行操作。比较常见的就是aop中就是使用代理模式完成事务的处理。</p><p>代理模式分静态代理和动态代理，静态代理的原理就是对目标对象进行封装，最后调用目标对象的方法即可。</p><p>动态代理跟静态代理的区别就是动态代理中的代理类是程序运行的时候生成的。Spring中对于接口的代理使用jdk内置的Proxy和InvocationHandler实现，对于类的代理使用cglib完成。</p><p>以1个UserService为例，使用jdk自带的代理模式完成计算方法调用时间的需求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserService接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// UserService实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"print all users"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// InvocationHandler策略，这里打印了方法调用前后的时间</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start : "</span> + System.currentTimeMillis());</span><br><span class="line">        Object result = method.invoke(userService, args);</span><br><span class="line">        System.out.println(<span class="string">"end : "</span> + System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h2&gt;
    
    </summary>
    
      <category term="设计模式" scheme="//aha.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="//aha.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>配置 sql打印拦截器</title>
    <link href="//aha.me/2019/02/16/%E9%85%8D%E7%BD%AE-sql%E6%89%93%E5%8D%B0%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>//aha.me/2019/02/16/配置-sql打印拦截器/</id>
    <published>2019-02-16T14:11:24.000Z</published>
    <updated>2019-02-16T14:12:41.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatisConfig"><a href="#MyBatisConfig" class="headerlink" title="MyBatisConfig"></a>MyBatisConfig</h2><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.yxkj</span><span class="selector-class">.aha</span><span class="selector-class">.MybatisConfig</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span><span class="selector-class">.condition</span><span class="selector-class">.ConditionalOnProperty</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Bean</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Configuration</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Auther: zch</span></span><br><span class="line"><span class="comment"> * @Date: 2018/12/21 16:02</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="keyword">Configuration</span></span><br><span class="line"><span class="keyword">public</span> class MyBatisConfig &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 sql打印拦截器</span></span><br><span class="line"><span class="comment">     * application.yml中 febs.showsql: true 时生效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return SqlStatementInterceptor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="keyword">Bean</span></span><br><span class="line">    @ConditionalOnProperty(name = <span class="string">"febs.showsql"</span>, havingValue = <span class="string">"true"</span>)</span><br><span class="line">    SqlStatementInterceptor sqlStatementInterceptor() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">SqlStatementInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SqlStatementInterceptor"><a href="#SqlStatementInterceptor" class="headerlink" title="SqlStatementInterceptor"></a>SqlStatementInterceptor</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">package com.yxkj.aha.MybatisConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * @Auther: zch</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * @Date: 2018/12/21 15:57</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * @Description:</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.cache.CacheKey;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.ParameterMapping;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.TypeHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">List</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Intercepts</span>(value = &#123;</span><br><span class="line">        <span class="meta">@Signature</span>(type = Executor.<span class="keyword">class</span>, method = <span class="string">"update"</span>, args = &#123;MappedStatement.<span class="keyword">class</span>, <span class="built_in">Object</span>.<span class="keyword">class</span>&#125;),</span><br><span class="line">        <span class="meta">@Signature</span>(type = Executor.<span class="keyword">class</span>, method = <span class="string">"query"</span>, args = &#123;MappedStatement.<span class="keyword">class</span>, <span class="built_in">Object</span>.<span class="keyword">class</span>, RowBounds.<span class="keyword">class</span>, ResultHandler.<span class="keyword">class</span>, CacheKey.<span class="keyword">class</span>, BoundSql.<span class="keyword">class</span>&#125;),</span><br><span class="line">        <span class="meta">@Signature</span>(type = Executor.<span class="keyword">class</span>, method = <span class="string">"query"</span>, args = &#123;MappedStatement.<span class="keyword">class</span>, <span class="built_in">Object</span>.<span class="keyword">class</span>, RowBounds.<span class="keyword">class</span>, ResultHandler.<span class="keyword">class</span>&#125;)&#125;)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SqlStatementInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="built_in">Object</span> intercept(Invocation invocation) throws Throwable &#123;</span><br><span class="line">        <span class="built_in">Object</span> returnValue;</span><br><span class="line">        long start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 执行 SQL语句</span></span><br><span class="line">        returnValue = invocation.proceed();</span><br><span class="line">        long end = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 耗时</span></span><br><span class="line">        long time = end - start;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="built_in">Object</span>[] args = invocation.getArgs();</span><br><span class="line">            MappedStatement ms = (MappedStatement) args[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">Object</span> parameter = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//获取参数，if语句成立，表示sql语句有参数，参数格式是map形式</span></span><br><span class="line">            <span class="keyword">if</span> (args.length &gt; <span class="number">1</span>)</span><br><span class="line">                parameter = invocation.getArgs()[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 获取到节点的 id,即 sql语句的 id</span></span><br><span class="line">            <span class="built_in">String</span> sqlId = ms.getId();</span><br><span class="line">            <span class="comment">// BoundSql就是封装 MyBatis最终产生的 sql类</span></span><br><span class="line">            BoundSql boundSql = ms.getBoundSql(parameter);</span><br><span class="line">            <span class="comment">// 获取节点的配置</span></span><br><span class="line">            Configuration configuration = ms.getConfiguration();</span><br><span class="line">            <span class="comment">// 获取到最终的 sql语句</span></span><br><span class="line">            printSql(configuration, boundSql, sqlId, time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"sql拦截异常:&#123;&#125; "</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">void</span> printSql(Configuration configuration, BoundSql boundSql, <span class="built_in">String</span> sqlId, long time) &#123;</span><br><span class="line">        <span class="built_in">String</span> sql = showSql(configuration, boundSql);</span><br><span class="line">        logger.info(<span class="string">"【SQL语句Id】&gt;&gt;&gt;&gt; &#123;&#125;"</span>, sqlId);</span><br><span class="line">        logger.info(<span class="string">"【SQL语句耗时】&gt;&gt;&gt;&gt; &#123;&#125; ms"</span>, time);</span><br><span class="line">        logger.info(<span class="string">"【SQL语句】&gt;&gt;&gt;&gt; &#123;&#125;"</span>, sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">String</span> getParameterValue(<span class="built_in">Object</span> obj) &#123;</span><br><span class="line">        <span class="built_in">String</span> value = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj instanceof <span class="built_in">String</span>) &#123;</span><br><span class="line">            value = <span class="string">"'"</span> + obj.toString() + <span class="string">"'"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj instanceof Date) &#123;</span><br><span class="line">            DateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.CHINA);</span><br><span class="line">            value = <span class="string">"'"</span> + formatter.format(<span class="keyword">new</span> Date()) + <span class="string">"'"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">                value = obj.toString();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                value = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">String</span> showSql(Configuration configuration, BoundSql boundSql) &#123;</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        <span class="built_in">Object</span> parameterObject = boundSql.getParameterObject();</span><br><span class="line">        <span class="built_in">List</span>&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">        <span class="comment">// sql语句中多个空格都用一个空格代替</span></span><br><span class="line">        <span class="built_in">String</span> sql = boundSql.getSql().replaceAll(<span class="string">"[\\s]+"</span>, <span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(parameterMappings) &amp;&amp; parameterObject != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取类型处理器注册器，类型处理器的功能是进行java类型和数据库类型的转换　　　　　　</span></span><br><span class="line">            <span class="comment">// 如果根据 parameterObject.getClass(）可以找到对应的类型，则替换</span></span><br><span class="line">            TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();</span><br><span class="line">            <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">                sql = sql.replaceFirst(<span class="string">"\\?"</span>, Matcher.quoteReplacement(getParameterValue(parameterObject)));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// MetaObject主要是封装了 originalObject对象，提供了 get和 set的方法用于获取和设置 originalObject的属性值</span></span><br><span class="line">                <span class="comment">// 主要支持对 JavaBean、Collection、Map三种类型对象的操作</span></span><br><span class="line">                MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class="line">                <span class="keyword">for</span> (ParameterMapping parameterMapping : parameterMappings) &#123;</span><br><span class="line">                    <span class="built_in">String</span> propertyName = parameterMapping.getProperty();</span><br><span class="line">                    <span class="keyword">if</span> (metaObject.hasGetter(propertyName)) &#123;</span><br><span class="line">                        <span class="built_in">Object</span> obj = metaObject.getValue(propertyName);</span><br><span class="line">                        sql = sql.replaceFirst(<span class="string">"\\?"</span>, Matcher.quoteReplacement(getParameterValue(obj)));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class="line">                        <span class="built_in">Object</span> obj = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">                        <span class="comment">// 该分支是动态 sql</span></span><br><span class="line">                        sql = sql.replaceFirst(<span class="string">"\\?"</span>, Matcher.quoteReplacement(getParameterValue(obj)));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sql = sql.replaceFirst(<span class="string">"\\?"</span>, <span class="string">"缺失"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="built_in">Object</span> plugin(<span class="built_in">Object</span> arg0) &#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(arg0, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="keyword">void</span> setProperties(Properties properties) &#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MyBatisConfig&quot;&gt;&lt;a href=&quot;#MyBatisConfig&quot; class=&quot;headerlink&quot; title=&quot;MyBatisConfig&quot;&gt;&lt;/a&gt;MyBatisConfig&lt;/h2&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="//aha.me/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="//aha.me/tags/Mybatis/"/>
    
      <category term="sql打印拦截器" scheme="//aha.me/tags/sql%E6%89%93%E5%8D%B0%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>layui 表单验证</title>
    <link href="//aha.me/2019/02/16/layui-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    <id>//aha.me/2019/02/16/layui-表单验证/</id>
    <published>2019-02-16T14:03:20.000Z</published>
    <updated>2019-02-16T14:05:46.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="from"><a href="#from" class="headerlink" title="from"></a>from</h2><a id="more"></a><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-form-item"</span> pane&gt;</span><br><span class="line">        &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-form-label"</span>&gt;用户名&lt;/label&gt;</span><br><span class="line">        </span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-input-block"</span>&gt;</span><br><span class="line">            &lt;input id=<span class="string">"username"</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> lay-verify=<span class="string">"required|username"</span> name=<span class="string">"username"</span> th:value=<span class="string">"*&#123;username&#125;"</span> autocomplete=<span class="string">"off"</span> placeholder=<span class="string">"请输入用户名"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-input"</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-footer"</span>&gt;</span><br><span class="line">        &lt;button <span class="class"><span class="keyword">type</span></span>=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"button button-rounded button-small"</span> data-dismiss=<span class="string">"modal"</span>&gt;关闭&lt;/button&gt;</span><br><span class="line">        &lt;button <span class="class"><span class="keyword">type</span></span>=<span class="string">"button"</span> lay-submit lay-filter=<span class="string">"displayform"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"button button-primary button-rounded button-small"</span>&gt;保存</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;sc&gt;</span><br><span class="line"> form.on(<span class="symbol">'submit</span>(displayform)', function (data) &#123;</span><br><span class="line">            doSave();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//阻止表单跳转。如果需要表单跳转，去掉这段即可。</span></span><br><span class="line">        &#125;);</span><br><span class="line">&lt;sc&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意button 提交按钮必须在from里<br>必须引用才能产生效果<br>layui.use([‘jquery’, ‘form’, ‘laydate’], function () {})</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;from&quot;&gt;&lt;a href=&quot;#from&quot; class=&quot;headerlink&quot; title=&quot;from&quot;&gt;&lt;/a&gt;from&lt;/h2&gt;
    
    </summary>
    
      <category term="layui" scheme="//aha.me/categories/layui/"/>
    
    
      <category term="layui" scheme="//aha.me/tags/layui/"/>
    
  </entry>
  
  <entry>
    <title>layui 表单验证 2 验证判重</title>
    <link href="//aha.me/2019/02/16/layui-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81-2-%E9%AA%8C%E8%AF%81%E5%88%A4%E9%87%8D/"/>
    <id>//aha.me/2019/02/16/layui-表单验证-2-验证判重/</id>
    <published>2019-02-16T14:01:10.000Z</published>
    <updated>2019-02-16T14:01:52.039Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">form.verify(&#123;</span><br><span class="line">           username: <span class="function"><span class="keyword">function</span>(<span class="params">value, item</span>)</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> aid =$(<span class="string">"input[name='id']"</span>).val()==<span class="string">""</span>;</span><br><span class="line">               <span class="built_in">console</span>.log(aid);</span><br><span class="line">               <span class="keyword">var</span> checkName;</span><br><span class="line">               Api.putJson(&#123;</span><br><span class="line">                       url: Main.getContextPath() + <span class="string">"/user/checkOldUserName"</span>,</span><br><span class="line">                       data: &#123;<span class="attr">username</span>:value&#125;,</span><br><span class="line">                       <span class="keyword">async</span>: <span class="literal">false</span>,<span class="comment">//异步转为同步 ，目的是将用户名从服务器拿回才进行下一步操作</span></span><br><span class="line">                       success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                           <span class="built_in">console</span>.log(data.code);</span><br><span class="line">                           checkName=data.code;</span><br><span class="line">                       &#125;,</span><br><span class="line">                       error: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                           checkName=<span class="number">0</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;);</span><br><span class="line">                   <span class="keyword">if</span> (checkName==<span class="number">-1</span>) &#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="string">"该用户名已经存在"</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">if</span> (checkName==<span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="string">"网络错误，请联系管理员"</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>必须同步，否则判断不了值是否存在，<br>注意username需要放在input里</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;form.verify(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           username: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value, item&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aid =$(&lt;span class=&quot;string&quot;&gt;&quot;input[name=&#39;id&#39;]&quot;&lt;/span&gt;).val()==&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(aid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; checkName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               Api.putJson(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       url: Main.getContextPath() + &lt;span class=&quot;string&quot;&gt;&quot;/user/checkOldUserName&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       data: &amp;#123;&lt;span class=&quot;attr&quot;&gt;username&lt;/span&gt;:value&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;//异步转为同步 ，目的是将用户名从服务器拿回才进行下一步操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data.code);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           checkName=data.code;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       error: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           checkName=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (checkName==&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;该用户名已经存在&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (checkName==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;网络错误，请联系管理员&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
      <category term="前端" scheme="//aha.me/categories/springBoot/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="layui" scheme="//aha.me/tags/layui/"/>
    
  </entry>
  
  <entry>
    <title>lambda表达式 解决ids删除</title>
    <link href="//aha.me/2019/02/16/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E8%A7%A3%E5%86%B3ids%E5%88%A0%E9%99%A4/"/>
    <id>//aha.me/2019/02/16/lambda表达式-解决ids删除/</id>
    <published>2019-02-16T13:57:58.000Z</published>
    <updated>2019-02-16T13:58:54.881Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line"> public void <span class="keyword">addHomeWord(HomeWordVo </span>homeWordVo) &#123;</span><br><span class="line"></span><br><span class="line">     final HomeWord homeWord=new HomeWord()<span class="comment">;</span></span><br><span class="line">     <span class="keyword">BeanUtils.copyProperties(homeWordVo,homeWord);</span></span><br><span class="line"><span class="keyword"> </span>    this.save(homeWord)<span class="comment">;</span></span><br><span class="line">     String ids = homeWordVo.getDeptId()<span class="comment">;</span></span><br><span class="line">     Arrays.asList(ids.split(<span class="string">","</span>)).forEach(deptId-&gt;&#123;</span><br><span class="line">         HomeWordDept dept = new HomeWordDept()<span class="comment">;</span></span><br><span class="line">         dept.setDeptId(deptId)<span class="comment">;</span></span><br><span class="line">         dept.setHomeWordId(String.valueOf(homeWord.getId()))<span class="comment">;</span></span><br><span class="line">         homeWordDeptMapper.<span class="keyword">insert(dept);</span></span><br><span class="line"><span class="keyword"> </span>    &#125;)<span class="comment">;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>先把ids（12,32,12,12）进行分割成数组<br>然后进行保存</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Transactional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; public void &lt;span class=&quot;keyword&quot;&gt;addHomeWord(HomeWordVo &lt;/span&gt;homeWordVo) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     final HomeWord homeWord=new HomeWord()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;BeanUtils.copyProperties(homeWordVo,homeWord);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt; &lt;/span&gt;    this.save(homeWord)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     String ids = homeWordVo.getDeptId()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Arrays.asList(ids.split(&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;)).forEach(deptId-&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         HomeWordDept dept = new HomeWordDept()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         dept.setDeptId(deptId)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         dept.setHomeWordId(String.valueOf(homeWord.getId()))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         homeWordDeptMapper.&lt;span class=&quot;keyword&quot;&gt;insert(dept);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt; &lt;/span&gt;    &amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="lambda" scheme="//aha.me/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>对事务进行开启</title>
    <link href="//aha.me/2019/02/16/%E5%AF%B9%E4%BA%8B%E5%8A%A1%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%90%AF/"/>
    <id>//aha.me/2019/02/16/对事务进行开启/</id>
    <published>2019-02-16T13:47:25.000Z</published>
    <updated>2019-02-16T13:51:06.875Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = <span class="type">Propagation</span>.<span class="type">SUPPORTS</span>, readOnly = <span class="literal">true</span>, rollbackFor = <span class="type">Exception</span>.<span class="keyword">class</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HomeWordService</span> <span class="keyword">extends</span> <span class="title">BaseService&lt;HomeWord&gt;</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="对整个类进行统一开启"><a href="#对整个类进行统一开启" class="headerlink" title="对整个类进行统一开启"></a>对整个类进行统一开启</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">deleteHomeWord</span><span class="params">(String ids)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="对删改进行事务操作"><a href="#对删改进行事务操作" class="headerlink" title="对删改进行事务操作"></a>对删改进行事务操作</h3>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;(propagation = &lt;span class=&quot;type&quot;&gt;Propagation&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;SUPPORTS&lt;/span&gt;, readOnly = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, rollbackFor = &lt;span class=&quot;type&quot;&gt;Exception&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HomeWordService&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseService&amp;lt;HomeWord&amp;gt;&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="事务" scheme="//aha.me/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>使用属性文件</title>
    <link href="//aha.me/2019/01/31/%E4%BD%BF%E7%94%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6/"/>
    <id>//aha.me/2019/01/31/使用属性文件/</id>
    <published>2019-01-31T06:44:48.000Z</published>
    <updated>2019-02-16T12:14:27.427Z</updated>
    
    <content type="html"><![CDATA[<p>代码清单 3-22 配置属性<br>database.driverName=com . mysql . jdbc . Driver<br>database.url=jdbc : mysql : //localhost : 3306/chapter3<br>database . username=root<br>database . passwor d=l23456<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这是 Spring Boot 默认的文件 它会通过其机制读取到上下文中 这样可 以引 用它了。 对于它引用，有两种方法 首先是用 Spring 表达式。只限于读取属性 不涉及运算。关于其运算，<br>后面再谈及。先创建一个新 DataB Properties ，如代码清单 3-23 示。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseProperties</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;mybatis.mapper-locations&#125;</span>"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String driverName = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String getDriverName() &#123;</span><br><span class="line">        <span class="keyword">return</span> driverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setDriverName(String driverName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.driverName = driverName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 就可 Value 注解 使用${} …… ｝这样 的占位符读取配置在属性文件的内 容。这里<br>Value 注解，既可 以加载属性也可以加在方法上， 启动 Sprin Boot 就可 到下面的日 志了。</p><p>有时候我们也可以使用注解＠ConfigurationProperties 通过它使得配置上<br>有所减少 ，例如，下面我们修改 DataBaseProperties 的代码</p><h3 id="便用＠Configuration-Properties-减少-Value使用"><a href="#便用＠Configuration-Properties-减少-Value使用" class="headerlink" title="便用＠Configuration Properties 减少@Value使用"></a>便用＠Configuration Properties 减少@Value使用</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"febs"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseProperties</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> showsql;</span><br><span class="line">    <span class="keyword">private</span> String hello = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    DataBaseProperties dataBaseProperties;</span><br></pre></td></tr></table></figure><h3 id="减少properties文件"><a href="#减少properties文件" class="headerlink" title="减少properties文件"></a>减少properties文件</h3><p>得如果把所有的内容都配置到 application.properties ，显然这个文件将有很多内<br>容。为了更好地配置，我们可以选择使用新的属性文件 例如， 数据库的属性可以配置在 jdbc operties<br>中，于是先把代码清单 -22 中给出的配置从 application properties 中迁到jdbc.properties 中， 然后使<br>@Prope rSource 去定义对应的属性文件，把它加载到 Spring 的上下文中<br>@SpringBootApplication</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@PropertySource</span>(value=&#123;<span class="string">"classpath:jdbc.properties"</span>&#125;,ignoreResourceNotFound=true)</span><br><span class="line">public class AhaApplication &#123;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line"><span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(AhaApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kk.<span class="attribute">showsql</span>=<span class="literal">true</span></span><br><span class="line">kk.<span class="attribute">hello</span>=hello</span><br></pre></td></tr></table></figure><blockquote><p>value可以配置多个配置文件。使用 classpath前缀 意味着去类文件路径下找到属性文件<br>ignoreResourceNotFound 则是是否忽略配置文件找不到的问题 noreResourceNotFound 的默认值为<br>false ，也就是没有找到属性文件 就会报错；这里配置为 true ，也就是找不到就忽略掉，不会报错</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码清单 3-22 配置属性&lt;br&gt;database.driverName=com . mysql . jdbc . Driver&lt;br&gt;database.url=jdbc : mysql : //localhost : 3306/chapter3&lt;br&gt;database . username=root&lt;br&gt;database . passwor d=l23456&lt;br&gt;
    
    </summary>
    
      <category term="spring 使用属性文件" scheme="//aha.me/categories/spring-%E4%BD%BF%E7%94%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="spring 使用属性文件" scheme="//aha.me/tags/spring-%E4%BD%BF%E7%94%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>【Linux 从入门到精通】</title>
    <link href="//aha.me/2019/01/31/%E3%80%90Linux-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%91/"/>
    <id>//aha.me/2019/01/31/【Linux-从入门到精通】/</id>
    <published>2019-01-31T03:08:41.000Z</published>
    <updated>2019-02-16T12:14:27.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【Linux-从入门到精通】"><a href="#【Linux-从入门到精通】" class="headerlink" title="【Linux 从入门到精通】"></a>【Linux 从入门到精通】</h3><p>后端开发工程师必备的一手潇洒的 Linux 命令。</p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a>ls 命令</h4><p>功能：列出目录内容<br>常用<br><a id="more"></a></p><ul><li>ls -l ,此命令非常常用，简化版命令可以使用 ll。</li><li>ls -al, 查看所有的文件，包括隐藏文件。</li></ul><h4 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a>cd 命令</h4><p>功能：切换目录<br>常用</p><ul><li>cd ~，切换用户命令</li><li>cd /，切换到根目录</li><li>cd ..，切换到上一级目录</li><li>cd -，切换到上一次访问的目录</li></ul><h4 id="pwd-命令"><a href="#pwd-命令" class="headerlink" title="pwd 命令"></a>pwd 命令</h4><p>功能：显示工作目录<br>mkdir 命令<br>功能：创建目录<br>常用：</p><ul><li>mkdir -p xxx，父目录不存在的情况下先创建父目录。</li><li>mkdir -r xxx，显示命令执行过程中的详细信息。</li></ul><h3 id="文件管理-文件浏览"><a href="#文件管理-文件浏览" class="headerlink" title="文件管理-文件浏览"></a>文件管理-文件浏览</h3><h4 id="cat-命令"><a href="#cat-命令" class="headerlink" title="cat 命令"></a>cat 命令</h4><p>功能：显示文本文件内容<br>常用：</p><ul><li>cat xxx，显示指定文件的所有内容。</li></ul><h4 id="more-命令"><a href="#more-命令" class="headerlink" title="more 命令"></a>more 命令</h4><p>功能：分页显示文件内容，还支持直接跳转行等功能。<br>常用：</p><ul><li>more xxx</li></ul><p>操作</p><ul><li>enter，向下 n 行，默认是 1 行。</li><li>空格键，向下滚动一屏</li><li>b ，返回上一屏</li><li>q，退出</li></ul><h4 id="less-命令"><a href="#less-命令" class="headerlink" title="less 命令"></a>less 命令</h4><p>功能：分页显示文件内容，操作更详细<br>常用：</p><ul><li>less -m，显示类似于 more 命令的百分比</li><li>less -N，显示每行的行号</li></ul><p>操作：</p><ul><li>空格键，前进一页</li><li>b，后退一页</li><li>d，前进半页</li><li>u，后退半页</li><li>enter，前进一行</li><li>y，后退一行</li><li>/xxx，向下搜索（用的多）</li><li>？xxx，向上搜索（用的多）</li><li>v，进入 vim 编辑器</li><li>左右方向键，相当于水平滚动条</li><li>q，退出</li></ul><h4 id="tail-命令"><a href="#tail-命令" class="headerlink" title="tail 命令"></a>tail 命令</h4><p>功能：用于显示指定文件末尾内容。<br>常用：</p><ul><li>tail -n，显示 n 行</li><li>tail -f，循环读取</li></ul><h3 id="文件管理-文件操作"><a href="#文件管理-文件操作" class="headerlink" title="文件管理-文件操作"></a>文件管理-文件操作</h3><h4 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h4><p>功能：复制文件或目录<br>常用：</p><ul><li>cp xx1 xx2，复制 xx1 为 xx2,这样只能复制文件。</li><li>cp -r a b，复制目录一定要加上 -r，当中执行了递归操作。</li></ul><h4 id="mv-命令"><a href="#mv-命令" class="headerlink" title="mv 命令"></a>mv 命令</h4><p>功能：移动或更名现有的文件或者目录<br>常用：</p><ul><li>mv a1 b1 ,修改 a1 变成 b1</li><li>mv -f a b/a1，如果目标文件或者目录与现有文件或者目录重复，则直接覆盖现有的文件或者目录。</li></ul><h4 id="rm-命令"><a href="#rm-命令" class="headerlink" title="rm 命令"></a>rm 命令</h4><p>功能：删除文件或者目录<br>常用：</p><ul><li>rm xx，删除文件，会有提示是否删除文件</li><li>rm -f xx，强制删除，没有提示。</li><li>rm -a xx，删除目录，会有提示是否删除目录</li><li>rm -rf xx，强制删除目录，没有提示，也就是传说中的删库跑路之必备命令。</li></ul><h4 id="find-命令"><a href="#find-命令" class="headerlink" title="find 命令"></a>find 命令</h4><p>功能：查找文件或者目录<br>常用：</p><ul><li>find -name xxx，查找所有名字为 xxx 的文件或者目录。</li><li>find /usr/ -name xxx，查找所有在 usr 目录下的文件或者目录。</li></ul><h3 id="文档编辑"><a href="#文档编辑" class="headerlink" title="文档编辑"></a>文档编辑</h3><h4 id="vi-或-vim-命令"><a href="#vi-或-vim-命令" class="headerlink" title="vi 或 vim 命令"></a>vi 或 vim 命令</h4><p>功能：编辑文件<br>常用：</p><ul><li>vim xxx，编辑 xxx 文件</li></ul><p>常用：</p><ul><li>vim xxx，进入“一般模式”</li><li>i，进入“插入模式”</li><li>esc，退出到“一般模式”</li><li>在“一般模式”下，输入“:wq”，保存并退出</li></ul><h3 id="管道"><a href="#管道" class="headerlink" title="管道 |"></a>管道 |</h3><p>linux 提供的管道符号 “|” ，作用是“命令1”的输出内容，将作为“命令2”的输入内容，一般和 grep 命令一起使用<br>格式：命令1 | 命令2</p><p>grep<br>功能：用于过滤/搜索特定字符，可以使用正则表达式能表示多种命令配合使用，使用上十分灵活。<br>常用：<br>grep -i mysql install.log，查看 install.log 中含有 “mysql” 字符的内容<br>系统命令<br>ps 命令<br>功能：提供对进程的一次性查看。及执行 ps 命令的那个时刻进程信息。<br>常用：<br>ps -e，显示所有程序<br>ps -f，显示 UID,PPIP 与 STIME 栏位<br>ps -ef | grep -i mysql，配合 grep 显示所有 mysql 的程序<br>kill 命令<br>功能：删除执行中的程序或工作<br>常用：<br>kill -9 4396，强制终止 pid = 4396 的程序<br>ifconfig 命令<br>功能：显示网络设备<br>ping 命令<br>功能：测试与目标主机的连通性<br>常用：<br>ping <a href="http://www.baidu.com，测试能否访问百度" target="_blank" rel="noopener">www.baidu.com，测试能否访问百度</a><br>ping -c 4 <a href="http://www.baidu.com，访问四次之后终止" target="_blank" rel="noopener">www.baidu.com，访问四次之后终止</a><br>tar 命令<br>功能：文件备份压缩<br>常用：<br>tar -zxvf a.tar，将 a.tar 解压缩<br>tar -zcvf a b，将 a 压缩到 b 目录下<br>关机重启<br>常用：<br>重启：reboot<br>立即关机：halt<br>文件权限<br>chmod 命令<br>功能：变更文件或目录的权限<br>常用：<br>chmod u-rwx xxx，取消 xxx 目录用户对其“读写执行”权限<br>chomd g-rwx xxx, 取消 xxx 目录组对其“读写执行”权限<br>chmod 777 xxx，给 xxx 目录添加所有权限<br>网络配置<br>网络命令配置<br>功能：查看网卡配置<br>常用：<br>cat /etc/sysconfig/network-scripts/ifcfg-eth0，查看网络配置</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【Linux-从入门到精通】&quot;&gt;&lt;a href=&quot;#【Linux-从入门到精通】&quot; class=&quot;headerlink&quot; title=&quot;【Linux 从入门到精通】&quot;&gt;&lt;/a&gt;【Linux 从入门到精通】&lt;/h3&gt;&lt;p&gt;后端开发工程师必备的一手潇洒的 Linux 命令。&lt;/p&gt;
&lt;h3 id=&quot;磁盘管理&quot;&gt;&lt;a href=&quot;#磁盘管理&quot; class=&quot;headerlink&quot; title=&quot;磁盘管理&quot;&gt;&lt;/a&gt;磁盘管理&lt;/h3&gt;&lt;h4 id=&quot;ls-命令&quot;&gt;&lt;a href=&quot;#ls-命令&quot; class=&quot;headerlink&quot; title=&quot;ls 命令&quot;&gt;&lt;/a&gt;ls 命令&lt;/h4&gt;&lt;p&gt;功能：列出目录内容&lt;br&gt;常用&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="//aha.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="//aha.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>微课堂网页在线编程助手</title>
    <link href="//aha.me/2019/01/30/%E5%BE%AE%E8%AF%BE%E5%A0%82%E7%BD%91%E9%A1%B5%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E5%8A%A9%E6%89%8B/"/>
    <id>//aha.me/2019/01/30/微课堂网页在线编程助手/</id>
    <published>2019-01-30T06:58:45.000Z</published>
    <updated>2019-02-16T12:14:27.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微课堂"><a href="#微课堂" class="headerlink" title="微课堂"></a>微课堂</h1><h4 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>微课堂是一个简单高效的后台权限管理系统。项目基础框架采用全新的Java Web开发框架 —— Spring Boot2.0.4，消除了繁杂的XML配置，使得二次开发更为简单；数据访问层采用Mybatis，同时引入了通用Mapper和PageHelper插件，可快速高效的对单表进行增删改查操作，消除了大量传统XML配置SQL的代码；安全框架采用Spring Security 5.0.7，可实现对按钮级别的权限控制，并集成了社交账户登录（QQ和微信）以及手机验证码登录；前端页面使用Bootstrap构建，主题风格为时下Google最新设计语言Material Design，并提供多套配色以供选择<br><a id="more"></a></p><h2 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h2><blockquote><p>技术选型</p></blockquote><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li>基础框架：Spring Boot 2.0.4.RELEASE</li><li>持久层框架：Mybatis 3.4.5</li><li>安全框架：Spring Security 5.0.7</li><li>摸板引擎：Thymeleaf 3.0.9.RELEASE</li><li>数据库连接池：Hikari</li><li>缓存框架：Redis</li><li>日志打印：logback</li><li>其他：Spring Social，Spring OAuth2，fastjson，poi，javacsv，quartz等。<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3></li><li>基础框架：Bootstrap 4</li><li>JavaScript框架：jQuery</li><li>消息组件：Bootstrap notify</li><li>提示框插件：SweetAlert2</li><li>树形插件：jsTree</li><li>树形表格插件：jqTreeGrid</li><li>表格插件：BootstrapTable</li><li>表单校验插件：jQuery-validate</li><li>多选下拉框插件：multiple-select</li><li>图表插件：Highcharts</li><li>时间插件：daterangepicker<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3></li><li>语言：Java 8</li><li>IDE：Eclipse Oxygen &amp; IDEA 2018.1.4(Ultimate Edition)</li><li>依赖管理：Maven</li><li>数据库：MySQL5.<h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3>SVN，git</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>因为项目用到了JDK 8的一些特性，所以JDK最低版本不能低于8。</p><p>JDK 8官方下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads</a>。</p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>项目缓存数据库使用的是Redis，所以在导入项目前需先安装Redis。<br>Redis Windows版本下载地址：<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a><br>。直接下载zip版本解压到任意目录即可。<br>下载后，使用cmd命令切换到Redis根目录，然后运行<code>redis-server.exe redis.windows.conf</code>动即可。项目中与Redis相关的配置可在application.yml中修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line">    <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># Redis 密码</span></span><br><span class="line"><span class="attr">    password:</span></span><br><span class="line"><span class="attr">    jedis:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">500</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">2000</span></span><br><span class="line">        <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="number">10000</span></span><br><span class="line">    <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>项目数据库采用MySQL社区版，版本为5.7。<br>下载地址：<a href="：https://dev.mysql.com/downloads/windows/installer/5.7.html">：https://dev.mysql.com/downloads/windows/installer/5.7.html</a><br>别的版本的MySQL也可以，但需要根据实际情况修改对应的SQL语句。</p><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>安装了git的用户也可以直接使用下面的命令进行克隆：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://gitee.com/zch2017lrf/micro_classroom</span><br></pre></td></tr></table></figure><h3 id="项目导入"><a href="#项目导入" class="headerlink" title="项目导入"></a>项目导入</h3><p>IDE工具选择Eclipse或者Intellij IDEA均可。</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>导入完项目后，接下来开始创建数据库。使用Navicat（或者别的数据库客户端）创建一个新的数据库，名称为febs_security（或者别的你喜欢的名字），并选择UTF8编码：</p><p><img src="https://images.gitee.com/uploads/images/2019/0113/192514_c1c46169_1876174.png" alt="输入图片说明" title="QQ截图20180910161305.png"></p><p><img src="https://images.gitee.com/uploads/images/2019/0113/192611_51cf872e_1876174.png" alt="输入图片说明" title="QQ截图20180910162759.png"></p><blockquote><p>如果数据库版本不是5.7的在执行SQL文件的时候会报错，这时候只需要根据报错信息简单修改SQL语句，然后重新执行即可。<br>创建完数据库，接着导入SQL文件。在项目的根目录下有个名称为febs_security.sql的SQL文件：<br>这里简单描述一下这些表的作用。</p></blockquote><p>其中T_开头的表为系统表：</p><table><thead><tr><th>表名</th><th>描述</th></tr></thead><tbody><tr><td>persistent_logins</td><td>用于存储“记住我”的token信息</td></tr><tr><td>t_userconnection</td><td>用于存储社交账号绑定关系</td></tr><tr><td>t_user</td><td>用户表，用于存储用户信息</td></tr><tr><td>t_role</td><td>角色表，用于存储角色信息</td></tr><tr><td>t_user_role</td><td>用于关联用户和角色，目的在于为用户分配角色</td></tr><tr><td>t_menu</td><td>菜单表，用于存储菜单和按钮信息（以及相应的权限）</td></tr><tr><td>t_role_menu</td><td>用于关联角色和菜单，目的在于为角色分配菜单和按钮权限</td></tr><tr><td>t_dept</td><td>部门表，用于存储部门信息</td></tr><tr><td>t_dict</td><td>字典表，用于存储字典信息</td></tr><tr><td>t_log</td><td>日志表，用于存储用户操作日志</td></tr><tr><td>t_job</td><td>调度任务表，用于存储调度任务信息</td></tr><tr><td>t_job_log</td><td>调度日志表，用于存储任务调度日志</td></tr></tbody></table><p>这里对于用户，角色和权限之间的关系使用的是经典的RBAC（Role-Based Access Control，基于角色的访问控制）模型。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。在这种模型中，用户与角色之间，角色与权限之间，一般者是多对多的关系。如下图所示：<br><img src="https://images.gitee.com/uploads/images/2019/0113/193127_0794938a_1876174.png" alt="输入图片说明" title="QQ截图20171214123601.png"><br>在本项目中，权限相关的信息位于T_MENU表的perms字段中，并没有单独将权限拆分出来。这样设计是为了让权限和菜单/按钮的对应关系更为直观，也减少了不必要的数据表关联。</p><p>剩下的qrtz_开头的表用于维护任务调度。</p><p>项目中数据库链接信息可在application.yml中修改：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">datasource</span>:</span><br><span class="line">    <span class="attribute">url</span>: <span class="attribute">jdbc</span>:<span class="attribute">mysql</span>:<span class="comment">//127.0.0.1:3306/febs_security?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attribute">username</span>: root</span><br><span class="line">    <span class="attribute">password</span>: <span class="number">123456</span></span><br><span class="line">    <span class="attribute">driver-class-name</span>: com.mysql.jdbc.Driver</span><br><span class="line">    <span class="attribute">hikari</span>:</span><br><span class="line">      <span class="attribute">minimum-idle</span>: <span class="number">5</span></span><br><span class="line">      <span class="attribute">maximum-pool-size</span>: <span class="number">15</span></span><br><span class="line">      <span class="attribute">connection-test-query</span>: select <span class="number">1</span></span><br><span class="line">      <span class="attribute">max-lifetime</span>: <span class="number">1800000</span></span><br><span class="line">      <span class="attribute">connection-timeout</span>: <span class="number">30000</span></span><br><span class="line">      <span class="attribute">pool-name</span>: FebsHikariCP</span><br></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>在完成了上述步骤后，找到FebsApplication启动类（位于febs-web模块），右键选择 Run ‘Application’即可。</p><p>启动后访问地址为：<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a>，用户名：alex，密码：123456。</p><h2 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h2><blockquote><p>系统分为以下五个模块：</p></blockquote><table><thead><tr><th>模块</th><th>说明</th></tr></thead><tbody><tr><td>febs-common</td><td>基础模块，主要包含一些工具类，基础配置</td></tr><tr><td>febs-system</td><td>系统模块，增删改查服务</td></tr><tr><td>febs-quartz</td><td>任务调度模块，处理定时任务</td></tr><tr><td>febs-security</td><td>安全模块，和安全有关的都在这个模块里</td></tr><tr><td>febs-web</td><td>web模块，包含前端部分和控制层</td></tr></tbody></table><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://images.gitee.com/uploads/images/2019/0113/194046_d1963f1d_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190113193645.png"><br><img src="https://images.gitee.com/uploads/images/2019/0113/194058_807fdac7_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190113193701.png"><br><img src="https://images.gitee.com/uploads/images/2019/0113/194109_ffb448ba_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190113193716.png"><br><img src="https://images.gitee.com/uploads/images/2019/0113/194127_540081a3_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190113193724.png"><br><img src="https://images.gitee.com/uploads/images/2019/0113/194139_d4ea1ba2_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190113193736.png"><br><img src="https://images.gitee.com/uploads/images/2019/0113/194150_13c08621_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190113193756.png"><br><img src="https://images.gitee.com/uploads/images/2019/0113/194202_8761cc29_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190113193803.png"><br><img src="https://images.gitee.com/uploads/images/2019/0113/194212_ae879f9f_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190113193821.png"><br><img src="https://images.gitee.com/uploads/images/2019/0113/194223_55a262f2_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190113193827.png"><br><img src="https://images.gitee.com/uploads/images/2019/0113/194235_f3bff05b_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190113193834.png"><br><img src="https://images.gitee.com/uploads/images/2019/0113/194246_2c3e879a_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190113193857.png"><br><img src="https://images.gitee.com/uploads/images/2019/0113/194256_771ea8cc_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190113193920.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;微课堂&quot;&gt;&lt;a href=&quot;#微课堂&quot; class=&quot;headerlink&quot; title=&quot;微课堂&quot;&gt;&lt;/a&gt;微课堂&lt;/h1&gt;&lt;h4 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目介绍&quot; class=&quot;headerlink&quot; title=&quot;项目介绍&quot;&gt;&lt;/a&gt;项目介绍&lt;/h4&gt;&lt;p&gt;微课堂是一个简单高效的后台权限管理系统。项目基础框架采用全新的Java Web开发框架 —— Spring Boot2.0.4，消除了繁杂的XML配置，使得二次开发更为简单；数据访问层采用Mybatis，同时引入了通用Mapper和PageHelper插件，可快速高效的对单表进行增删改查操作，消除了大量传统XML配置SQL的代码；安全框架采用Spring Security 5.0.7，可实现对按钮级别的权限控制，并集成了社交账户登录（QQ和微信）以及手机验证码登录；前端页面使用Bootstrap构建，主题风格为时下Google最新设计语言Material Design，并提供多套配色以供选择&lt;br&gt;
    
    </summary>
    
      <category term="个人作品" scheme="//aha.me/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
      <category term="微课堂" scheme="//aha.me/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/%E5%BE%AE%E8%AF%BE%E5%A0%82/"/>
    
    
      <category term="个人作品" scheme="//aha.me/tags/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
      <category term="微课堂" scheme="//aha.me/tags/%E5%BE%AE%E8%AF%BE%E5%A0%82/"/>
    
  </entry>
  
  <entry>
    <title>iwiilsay后台前端</title>
    <link href="//aha.me/2019/01/30/iwiilsay%E5%90%8E%E5%8F%B0%E5%89%8D%E7%AB%AF-%E5%9F%BA%E4%BA%8Evue-vue-router-element-ui/"/>
    <id>//aha.me/2019/01/30/iwiilsay后台前端-基于vue-vue-router-element-ui/</id>
    <published>2019-01-30T06:53:42.000Z</published>
    <updated>2019-02-16T12:14:27.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端技术栈"><a href="#前端技术栈" class="headerlink" title="前端技术栈"></a>前端技术栈</h2><p>1.Vue<br>2.ElementUI<br>3.axios<br>4.vue-router<br><a id="more"></a></p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://images.gitee.com/uploads/images/2019/0114/212404_42127239_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190114212127.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212413_e86c3aad_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190114212142.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212422_792d99b4_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190114212153.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212430_ea3b3fa9_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190114212206.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212438_16fd1c8d_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190114212213.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212446_8779c010_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190114212225.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212453_04ca43ac_1876174.png" alt="输入图片说明" title="QQ浏览器截图20190114212235.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前端技术栈&quot;&gt;&lt;a href=&quot;#前端技术栈&quot; class=&quot;headerlink&quot; title=&quot;前端技术栈&quot;&gt;&lt;/a&gt;前端技术栈&lt;/h2&gt;&lt;p&gt;1.Vue&lt;br&gt;2.ElementUI&lt;br&gt;3.axios&lt;br&gt;4.vue-router&lt;br&gt;
    
    </summary>
    
      <category term="个人作品" scheme="//aha.me/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
      <category term="iwiilsay后台前端" scheme="//aha.me/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/iwiilsay%E5%90%8E%E5%8F%B0%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="个人作品" scheme="//aha.me/tags/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
      <category term="iwiilsay后台前端" scheme="//aha.me/tags/iwiilsay%E5%90%8E%E5%8F%B0%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>iwiilsay小程序</title>
    <link href="//aha.me/2019/01/30/iwiilsay%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>//aha.me/2019/01/30/iwiilsay小程序/</id>
    <published>2019-01-30T06:45:58.000Z</published>
    <updated>2019-02-16T12:14:27.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iwiilsay-基touch-ui开发"><a href="#iwiilsay-基touch-ui开发" class="headerlink" title="iwiilsay 基touch ui开发"></a>iwiilsay 基touch ui开发</h1><h4 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h4><p>Touch WX是一套完全免费的微信小程序开发框架，扩展了小程序的能力。特点如下：<br>1、组件扩充：<br>增加了30多种常用的组件用于官方组件的补充。<br><a id="more"></a><br>2、功能扩充：<br>兼容阿里的iconfont图标库，海量矢量图标随意使用；补充了常用样式库、支持less语法、支持全局配置主题色等</p><p>3、开发体验改善：<br>四文件方式改为单文件方式，通过VSCode编辑器+插件的方式开发，拥有web开发体验；</p><p>4、小程序转为H5应用：<br>可以与H5开发框架Touch UI工程相互转换，发布成webApp。开发一套代码，拥有两套应用。</p><p>这套框架的原理是：<br>将Touch WX工程中所写的代码进行编译，直接输出为微信小程序工程原始代码。扩充的30多种组件，完全是基于小程序官方的自定义组件机制实现（row&amp;col除外）。</p><p>所以它支持小程序的全部语法，怎么开发小程序，就怎么开发Touch WX。</p><p>不过因为是单文件的开发方式，在文件的代码结构上稍有不同。请注意这一点。</p><p>这样好处在于：</p><p>1、开发者迁移成本很小。<br>可以轻松的将已有的小程序移植为Touch WX工程，来使用它的扩展能力；</p><p>2、便于排查错误。<br>当遇到问题时，开发者也可以随时查看输出的小程序原始代码来定位问题所在。不会搞不清楚到底是框架问题还是自己代码的问题；</p><p>3、按需编译<br>由于小程序对体积有限制，在使用框架开发时，只有使用到的组件才会编译输出为小程序源码。没用到的不会输出。</p><p>4、不会对框架产生依赖。<br>以后不想用了这套框架，可以直接对已经输出的小程序工程进行维护。</p><h4 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h4><p>微信开发者工具安装<br>下载地址:<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></p><p>node安装<br>我们推荐使用node 6.10.0，node下载地址：</p><p><a href="https://npm.taobao.org/mirrors/node/v6.10.0/node-v6.10.0-x64.msi" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node/v6.10.0/node-v6.10.0-x64.msi</a> Windows64位下载</p><p><a href="https://npm.taobao.org/mirrors/node/v6.10.0/node-v6.10.0-x86.msi" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node/v6.10.0/node-v6.10.0-x86.msi</a> Windows32位下载</p><p><a href="https://npm.taobao.org/mirrors/node/v6.10.0/node-v6.10.0.pkg" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node/v6.10.0/node-v6.10.0.pkg</a> macOS系统下载</p><p>开发工具下载<br>进入官网进行下载。Visual Studio Code下载地址：<a href="https://code.visualstudio.com" target="_blank" rel="noopener">https://code.visualstudio.com</a></p><p>Touch WX构成<br>Touch WX插件，提供右键菜单，通过可视化的方式来执行命令</p><p>touchui-wx-cli 脚手架环境 ，需要手动全局安装</p><p>touchui-wx-components组件库， 在使用插件创建工程时会自动安装项目依赖，其中包含了这部分。</p><p>安装插件<br>1、下载安装完成后，打开Visual Studio Code。我们需要安装一些插件来帮助我们更好的进行开发。</p><p>Touch WX框架提供的插件：Touch WX，提供启动／停止开发服务、编译、转换等功能。</p><h3 id="微信小程序效果图"><a href="#微信小程序效果图" class="headerlink" title="微信小程序效果图"></a>微信小程序效果图</h3><p><img src="https://images.gitee.com/uploads/images/2019/0114/212713_5fd9933d_1876174.png" alt="输入图片说明" title="01.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212728_f8b8d21d_1876174.png" alt="输入图片说明" title="02.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212735_bbb717a1_1876174.png" alt="输入图片说明" title="03.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212747_e50475be_1876174.png" alt="输入图片说明" title="04.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212753_501e93bf_1876174.png" alt="输入图片说明" title="05.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212759_c215e220_1876174.png" alt="输入图片说明" title="06.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212805_3150a610_1876174.png" alt="输入图片说明" title="07.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212811_484fc37b_1876174.png" alt="输入图片说明" title="08.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212820_1defdc94_1876174.png" alt="输入图片说明" title="09.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212827_ef2f37fe_1876174.png" alt="输入图片说明" title="10.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212834_d78ce4b1_1876174.png" alt="输入图片说明" title="11.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212841_b5a1595e_1876174.png" alt="输入图片说明" title="12.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212849_c4ae3878_1876174.png" alt="输入图片说明" title="13.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212900_7a90c8d1_1876174.png" alt="输入图片说明" title="14.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212907_a047cc84_1876174.png" alt="输入图片说明" title="15.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212916_b881fbba_1876174.png" alt="输入图片说明" title="16.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212924_fc62f2c6_1876174.png" alt="输入图片说明" title="17.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212931_d9d91480_1876174.png" alt="输入图片说明" title="18.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212941_a2a1923e_1876174.png" alt="输入图片说明" title="19.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/212948_767ca805_1876174.png" alt="输入图片说明" title="20.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/213009_24d2ae6b_1876174.png" alt="输入图片说明" title="21.png"><br><img src="https://images.gitee.com/uploads/images/2019/0114/213019_015a5de3_1876174.png" alt="输入图片说明" title="22.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iwiilsay-基touch-ui开发&quot;&gt;&lt;a href=&quot;#iwiilsay-基touch-ui开发&quot; class=&quot;headerlink&quot; title=&quot;iwiilsay 基touch ui开发&quot;&gt;&lt;/a&gt;iwiilsay 基touch ui开发&lt;/h1&gt;&lt;h4 id=&quot;软件架构&quot;&gt;&lt;a href=&quot;#软件架构&quot; class=&quot;headerlink&quot; title=&quot;软件架构&quot;&gt;&lt;/a&gt;软件架构&lt;/h4&gt;&lt;p&gt;Touch WX是一套完全免费的微信小程序开发框架，扩展了小程序的能力。特点如下：&lt;br&gt;1、组件扩充：&lt;br&gt;增加了30多种常用的组件用于官方组件的补充。&lt;br&gt;
    
    </summary>
    
      <category term="个人作品" scheme="//aha.me/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
      <category term="iwiilsay小程序" scheme="//aha.me/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/iwiilsay%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="个人作品" scheme="//aha.me/tags/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
      <category term="iwiilsay小程序" scheme="//aha.me/tags/iwiilsay%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>仿土巴兔小程序</title>
    <link href="//aha.me/2019/01/30/%E4%BB%BF%E5%9C%9F%E5%B7%B4%E5%85%94%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>//aha.me/2019/01/30/仿土巴兔小程序/</id>
    <published>2019-01-30T06:39:06.000Z</published>
    <updated>2019-02-16T12:14:27.421Z</updated>
    
    <content type="html"><![CDATA[<div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084745_aaaff66d_1876174.png"></div><br><a id="more"></a><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084745_aaaff66d_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084802_0c58ce5b_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084811_603b9864_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084819_327941b8_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084835_951caa32_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084844_6c055c6e_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084852_582a45a9_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084903_50f0c5cf_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084912_9471f395_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084921_aaa62f88_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084946_f54ec1a0_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/084957_bcb093d6_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/085006_8c853046_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/085017_94fc0f26_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/085027_750f3bfe_1876174.png "></div><br><div align="center"> <img src="https://images.gitee.com/uploads/images/2019/0117/085039_e8915b2f_1876174.png "></div>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;https://images.gitee.com/uploads/images/2019/0117/084745_aaaff66d_1876174.png&quot;&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="个人作品" scheme="//aha.me/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
      <category term="仿土巴兔小程序" scheme="//aha.me/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/%E4%BB%BF%E5%9C%9F%E5%B7%B4%E5%85%94%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="个人作品" scheme="//aha.me/tags/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
      <category term="仿土巴兔小程序" scheme="//aha.me/tags/%E4%BB%BF%E5%9C%9F%E5%B7%B4%E5%85%94%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>『数据结构与算法』—— 复杂度</title>
    <link href="//aha.me/2019/01/30/%E3%80%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%8F%E2%80%94%E2%80%94-%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>//aha.me/2019/01/30/『数据结构与算法』——-复杂度/</id>
    <published>2019-01-30T03:47:04.000Z</published>
    <updated>2019-02-16T12:14:27.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h3><p>复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半。</p><p>测试结果非常依赖测试环境</p><p>测试结果受数据规模的影响很大</p><p>我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法。<br><a id="more"></a></p><h3 id="大-O-复杂度表示法"><a href="#大-O-复杂度表示法" class="headerlink" title="大 O 复杂度表示法"></a>大 O 复杂度表示法</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cal(<span class="keyword">int</span> n) &#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">sum</span> = <span class="keyword">sum</span> + i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">sum</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 2nunit_time 的执行时间，所以这段代码总的执行时间就是 (2n+2)unit_time。可以看出来，所有代码的执行时间 T(n) 与每行代码的执行次数成正比。</p><p>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比。</p><p>$T(n) = O(f(n))$</p><p>这就是大 O 时间复杂度表示法，大 O 时间复杂度实际上并不具体代表代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以也叫做 渐进时间复杂度，简称 时间复杂度。</p><h3 id="分析时间复杂度"><a href="#分析时间复杂度" class="headerlink" title="分析时间复杂度"></a>分析时间复杂度</h3><p>只关注循环执行次数最多的一点代码</p><p>我们在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了。</p><p>加法法则：总复杂度等于量级最大的那段代码的复杂度</p><p>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</p><h3 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h3><p>时间复杂度的全称是 渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度全称就是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。</p><h3 id="复杂度种类"><a href="#复杂度种类" class="headerlink" title="复杂度种类"></a>复杂度种类</h3><p>最好情况时间复杂度</p><p>最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。</p><p>最坏情况时间复杂度</p><p>最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。</p><p>平均情况时间复杂度</p><p>均摊时间复杂度<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 全局变量，大小为 10 的数组 array，长度 len，下标 i。</span><br><span class="line">int array[] =<span class="built_in"> new </span>int[10]; </span><br><span class="line">int len = 10;</span><br><span class="line">int i = 0;</span><br><span class="line"></span><br><span class="line">// 往数组中添加一个元素</span><br><span class="line">void add(int element) &#123;</span><br><span class="line">  <span class="built_in"> if </span>(i &gt;= len) &#123; // 数组空间不够了</span><br><span class="line">     // 重新申请一个 2 倍大小的数组空间</span><br><span class="line">    <span class="built_in"> int </span>new_array[] =<span class="built_in"> new </span>int[len*2];</span><br><span class="line">     // 把原来<span class="built_in"> array </span>数组中的数据依次 copy 到 new_array</span><br><span class="line">     for (int j = 0; j &lt; len; ++j) &#123;</span><br><span class="line">       new_array[j] = array[j];</span><br><span class="line">     &#125;</span><br><span class="line">     // new_array 复制给 array，array 现在大小就是 2 倍 len 了</span><br><span class="line">    <span class="built_in"> array </span>= new_array;</span><br><span class="line">     len = 2 * len;</span><br><span class="line">   &#125;</span><br><span class="line">   // 将 element 放到下标为 i 的位置，下标 i 加一</span><br><span class="line">   array[i] = element;</span><br><span class="line">   ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最好 $O(1)$，最坏 $O(n)$，平均 $O(n)$，均摊 $O(1)$</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;重要性&quot;&gt;&lt;a href=&quot;#重要性&quot; class=&quot;headerlink&quot; title=&quot;重要性&quot;&gt;&lt;/a&gt;重要性&lt;/h3&gt;&lt;p&gt;复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半。&lt;/p&gt;
&lt;p&gt;测试结果非常依赖测试环境&lt;/p&gt;
&lt;p&gt;测试结果受数据规模的影响很大&lt;/p&gt;
&lt;p&gt;我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="//aha.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="//aha.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>模运算优化</title>
    <link href="//aha.me/2019/01/30/%E6%A8%A1%E8%BF%90%E7%AE%97%E4%BC%98%E5%8C%96/"/>
    <id>//aha.me/2019/01/30/模运算优化/</id>
    <published>2019-01-30T00:47:42.000Z</published>
    <updated>2019-02-16T12:14:27.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模运算优化"><a href="#模运算优化" class="headerlink" title="模运算优化"></a>模运算优化</h2><p>令 x = 1&lt;&lt;4，即 x 为 2 的 4 次方，它具有以下性质：</p><p>x   : 00010000<br>x-1 : 00001111<br>令一个数 y 与 x-1 做与运算，可以去除 y 位级表示的第 4 位以上数：</p><a id="more"></a><p>y       : 10110010<br>x-1     : 00001111<br>y&amp;(x-1) : 00000010<br>这个性质和 y 对 x 取模效果是一样的：</p><p>y   : 10110010<br>x   : 00010000<br>y%x : 00000010<br>我们知道，位运算的代价比求模运算小的多，因此在进行这种计算时用位运算的话能带来更高的性能。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">99</span>%<span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="number">99</span>&amp;(<span class="number">4</span><span class="number">-1</span>));</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模运算优化&quot;&gt;&lt;a href=&quot;#模运算优化&quot; class=&quot;headerlink&quot; title=&quot;模运算优化&quot;&gt;&lt;/a&gt;模运算优化&lt;/h2&gt;&lt;p&gt;令 x = 1&amp;lt;&amp;lt;4，即 x 为 2 的 4 次方，它具有以下性质：&lt;/p&gt;
&lt;p&gt;x   : 00010000&lt;br&gt;x-1 : 00001111&lt;br&gt;令一个数 y 与 x-1 做与运算，可以去除 y 位级表示的第 4 位以上数：&lt;/p&gt;
    
    </summary>
    
      <category term="模运算优化" scheme="//aha.me/categories/%E6%A8%A1%E8%BF%90%E7%AE%97%E4%BC%98%E5%8C%96/"/>
    
      <category term="Java性能优化" scheme="//aha.me/categories/%E6%A8%A1%E8%BF%90%E7%AE%97%E4%BC%98%E5%8C%96/Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="模运算优化" scheme="//aha.me/tags/%E6%A8%A1%E8%BF%90%E7%AE%97%E4%BC%98%E5%8C%96/"/>
    
      <category term="Java性能优化" scheme="//aha.me/tags/Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>容器源码分析2</title>
    <link href="//aha.me/2019/01/29/%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/"/>
    <id>//aha.me/2019/01/29/容器源码分析2/</id>
    <published>2019-01-29T08:48:18.000Z</published>
    <updated>2019-02-16T12:14:27.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="容器源码分析2"><a href="#容器源码分析2" class="headerlink" title="容器源码分析2"></a>容器源码分析2</h2><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> HashEntry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V value;</span><br><span class="line">    <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; <span class="keyword">next</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>ConcurrentHashMap 和 HashMap 实现上类似，最主要的差别是 ConcurrentHashMap 采用了分段锁（Segment），每个分段锁维护着几个桶（HashEntry），多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高（并发度就是 Segment 的个数）。</p><p>Segment 继承自 ReentrantLock。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SCAN_RETRIES =</span><br><span class="line">        Runtime.getRuntime().availableProcessors() &gt; <span class="number">1</span> ? 64 : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br></pre></td></tr></table></figure></p><p>默认的并发级别为 16，也就是说默认创建 16 个 Segment。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br></pre></td></tr></table></figure><p><img src="/assets/img/3fdfc89d-719e-4d93-b518-29fa612b3b18.png" alt="3fdfc89d-719e-4d93-b518-29fa612b3b18.png"></p><h4 id="size-操作"><a href="#size-操作" class="headerlink" title="size 操作"></a>size 操作</h4><p>每个 Segment 维护了一个 count 变量来统计该 Segment 中的键值对个数。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The <span class="built_in">number</span> <span class="keyword">of</span> elements. Accessed only either within locks</span><br><span class="line"> * <span class="keyword">or</span> among other volatile reads <span class="keyword">that</span> maintain visibility.</span><br><span class="line"> */</span><br><span class="line">transient int <span class="built_in">count</span>;</span><br></pre></td></tr></table></figure></p><p>在执行 size 操作时，需要遍历所有 Segment 然后把 count 累计起来。</p><p>ConcurrentHashMap 在执行 size 操作时先尝试不加锁，如果连续两次不加锁操作得到的结果一致，那么可以认为这个结果是正确的。</p><p>尝试次数使用 RETRIES_BEFORE_LOCK 定义，该值为 2，retries 初始值为 -1，因此尝试次数为 3。</p><p>如果尝试的次数超过 3 次，就需要对每个 Segment 加锁。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Number of unsynchronized retries in size and containsValue</span></span><br><span class="line"><span class="comment"> * methods before resorting to locking. This is used to avoid</span></span><br><span class="line"><span class="comment"> * unbounded retries if tables undergo continuous modification</span></span><br><span class="line"><span class="comment"> * which would make it impossible to obtain an accurate result.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RETRIES_BEFORE_LOCK = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> size() &#123;</span><br><span class="line">    <span class="comment">// Try a few times to get accurate count. On failure due to</span></span><br><span class="line">    <span class="comment">// continuous async changes in table, resort to locking.</span></span><br><span class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments = <span class="keyword">this</span>.segments;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">boolean</span> overflow; <span class="comment">// true if size overflows 32 bits</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">sum</span>;         <span class="comment">// sum of modCounts</span></span><br><span class="line">    <span class="keyword">long</span> last = <span class="number">0</span>L;   <span class="comment">// previous sum</span></span><br><span class="line">    <span class="keyword">int</span> retries = <span class="number">-1</span>; <span class="comment">// first iteration isn't retry</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 超过尝试次数，则对每个 Segment 加锁</span></span><br><span class="line">            <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                    ensureSegment(j).lock(); <span class="comment">// force creation</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">sum</span> = <span class="number">0</span>L;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            overflow = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</span><br><span class="line">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class="line">                <span class="keyword">if</span> (seg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">sum</span> += seg.modCount;</span><br><span class="line">                    <span class="keyword">int</span> c = seg.<span class="keyword">count</span>;</span><br><span class="line">                    <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</span><br><span class="line">                        overflow = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 连续两次得到的结果一致，则认为这个结果是正确的</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">sum</span> == last)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            last = <span class="keyword">sum</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                segmentAt(segments, j).unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> overflow ? Integer.MAX_VALUE : size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="JDK-1-8-的改动"><a href="#JDK-1-8-的改动" class="headerlink" title="JDK 1.8 的改动"></a>JDK 1.8 的改动</h4><p>JDK 1.7 使用分段锁机制来实现并发更新操作，核心类为 Segment，它继承自重入锁 ReentrantLock，并发度与 Segment 数量相等。</p><p>JDK 1.8 使用了 CAS 操作来支持更高的并发度，在 CAS 操作失败时使用内置锁 synchronized。</p><p>并且 JDK 1.8 的实现也在链表过长时会转换为红黑树。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;容器源码分析2&quot;&gt;&lt;a href=&quot;#容器源码分析2&quot; class=&quot;headerlink&quot; title=&quot;容器源码分析2&quot;&gt;&lt;/a&gt;容器源码分析2&lt;/h2&gt;&lt;h3 id=&quot;ConcurrentHashMap&quot;&gt;&lt;a href=&quot;#ConcurrentHashMap&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentHashMap&quot;&gt;&lt;/a&gt;ConcurrentHashMap&lt;/h3&gt;&lt;h4 id=&quot;存储结构&quot;&gt;&lt;a href=&quot;#存储结构&quot; class=&quot;headerlink&quot; title=&quot;存储结构&quot;&gt;&lt;/a&gt;存储结构&lt;/h4&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hash;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; K key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; V value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt; &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="容器源码分析2" scheme="//aha.me/categories/%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/"/>
    
    
      <category term="容器源码分析2" scheme="//aha.me/tags/%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/"/>
    
  </entry>
  
  <entry>
    <title>容器源码分析</title>
    <link href="//aha.me/2019/01/29/%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>//aha.me/2019/01/29/容器源码分析/</id>
    <published>2019-01-29T06:27:29.000Z</published>
    <updated>2019-02-16T12:14:27.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="容器源码分析"><a href="#容器源码分析" class="headerlink" title="容器源码分析"></a>容器源码分析</h2><p>如果没有特别说明，以下源码分析基于 JDK 1.8。</p><p>在 IDEA 中 double shift 调出 Search EveryWhere，查找源码文件，找到之后就可以阅读源码。</p><a id="more"></a><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><p>实现了 RandomAccess 接口，因此支持随机访问。这是理所当然的，因为 ArrayList 是基于数组实现的。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArrayList&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></span><br><span class="line"><span class="class">        <span class="title">implements</span> <span class="title">List&lt;E&gt;</span>, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure></p><p>数组的默认大小为 10。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><p>添加元素时使用 ensureCapacityInternal() 方法来保证容量足够，如果不够时，需要使用 grow() 方法进行扩容，新容量的大小为 oldCapacity + (oldCapacity &gt;&gt; 1)，也就是旧容量的 1.5 倍。</p><p>扩容操作需要调用 Arrays.copyOf() 把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)，可以看出 ArrayList 删除元素的代价是非常高的。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E remove(<span class="built_in">int</span> <span class="built_in">index</span>) &#123;</span><br><span class="line">    rangeCheck(<span class="built_in">index</span>);</span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(<span class="built_in">index</span>);</span><br><span class="line">    <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - <span class="built_in">index</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, <span class="built_in">index</span>+<span class="number">1</span>, elementData, <span class="built_in">index</span>, numMoved);</span><br><span class="line">    elementData[--<span class="built_in">size</span>] = null; // clear to let GC <span class="keyword">do</span> its work</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Fail-Fast"><a href="#Fail-Fast" class="headerlink" title="Fail-Fast"></a>Fail-Fast</h4><p>modCount 用来记录 ArrayList 结构发生变化的次数。结构发生变化是指添加或者删除至少一个元素的所有操作，或者是调整内部数组的大小，仅仅只是设置元素的值不算结构发生变化。</p><p>在进行序列化或者迭代等操作时，需要比较操作前后 modCount 是否改变，如果改变了需要抛出 ConcurrentModificationException。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">    throws java.io.IOException&#123;</span><br><span class="line">    // <span class="built_in">Write</span> <span class="keyword">out</span> element <span class="built_in">count</span>, and <span class="built_in">any</span> hidden stuff</span><br><span class="line">    <span class="built_in">int</span> expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    // <span class="built_in">Write</span> <span class="keyword">out</span> <span class="built_in">size</span> as capacity for behavioural compatibility with clone()</span><br><span class="line">    s.writeInt(<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">    // <span class="built_in">Write</span> <span class="keyword">out</span> <span class="built_in">all</span> elements <span class="keyword">in</span> the proper order.</span><br><span class="line">    for (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount <span class="comment">!= expectedModCount) &#123;</span></span><br><span class="line">        throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>ArrayList 基于数组实现，并且具有动态扩容特性，因此保存元素的数组不一定都会被使用，那么就没必要全部进行序列化。</p><p>保存元素的数组 elementData 使用 transient 修饰，该关键字声明数组默认不会被序列化。</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transient Object[] elementData; // non-<span class="keyword">private</span> <span class="keyword">to</span> simplify nested <span class="class"><span class="keyword">class</span> <span class="title">access</span></span></span><br></pre></td></tr></table></figure><p>ArrayList 实现了 writeObject() 和 readObject() 来控制只序列化数组中有元素填充那部分内容。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)</span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in capacity</span></span><br><span class="line">    s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">        ensureCapacityInternal(<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Object</span>[] a = elementData;</span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            a[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">    throws java.io.IOException&#123;</span><br><span class="line">    // <span class="built_in">Write</span> <span class="keyword">out</span> element <span class="built_in">count</span>, and <span class="built_in">any</span> hidden stuff</span><br><span class="line">    <span class="built_in">int</span> expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    // <span class="built_in">Write</span> <span class="keyword">out</span> <span class="built_in">size</span> as capacity for behavioural compatibility with clone()</span><br><span class="line">    s.writeInt(<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">    // <span class="built_in">Write</span> <span class="keyword">out</span> <span class="built_in">all</span> elements <span class="keyword">in</span> the proper order.</span><br><span class="line">    for (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount <span class="comment">!= expectedModCount) &#123;</span></span><br><span class="line">        throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化时需要使用 ObjectOutputStream 的 writeObject() 将对象转换为字节流并输出。而 writeObject() 方法在传入的对象存在 writeObject() 的时候会去反射调用该对象的 writeObject() 来实现序列化。反序列化使用的是 ObjectInputStream 的 readObject() 方法，原理类似。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> <span class="type">ArrayList</span>();</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> <span class="type">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="type">FileOutputStream</span>(file));</span><br><span class="line">oos.writeObject(list);</span><br></pre></td></tr></table></figure><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>它的实现与 ArrayList 类似，但是使用了 synchronized 进行同步。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">elementData</span><span class="params">(index)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="与-ArrayList-的比较"><a href="#与-ArrayList-的比较" class="headerlink" title="与 ArrayList 的比较"></a>与 ArrayList 的比较</h4><ul><li>Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；</li><li>Vector 每次扩容请求其大小的 2 倍空间，而 ArrayList 是 1.5 倍。</li></ul><h4 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h4><p>可以使用 Collections.synchronizedList(); 得到一个线程安全的 ArrayList。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; synList = Collections.synchronizedList(<span class="built_in">list</span>);</span><br></pre></td></tr></table></figure></p><p>也可以使用 concurrent 并发包下的 CopyOnWriteArrayList 类。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure></p><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>写操作在一个复制的数组上进行，读操作还是在原始数组中进行，读写分离，互不影响。</p><p>写操作需要加锁，防止并发写入时导致写入数据丢失。</p><p>写操作结束之后需要把原始数组指向新的复制数组。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> boolean <span class="title">add</span>(<span class="params">E e</span>)</span> &#123;</span><br><span class="line">    final ReentrantLock <span class="keyword">lock</span> = <span class="keyword">this</span>.<span class="keyword">lock</span>;</span><br><span class="line">    <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">lock</span>.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">final <span class="keyword">void</span> <span class="title">setArray</span>(<span class="params">Object[] a</span>)</span> &#123;</span><br><span class="line">    array = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(<span class="meta-string">"unchecked"</span>)</span></span><br><span class="line"><span class="keyword">private</span> E <span class="keyword">get</span>(Object[] a, int index) &#123;</span><br><span class="line">    <span class="keyword">return</span> (E) a[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>CopyOnWriteArrayList 在写操作的同时允许读操作，大大提高了读操作的性能，因此很适合读多写少的应用场景。</p><p>但是 CopyOnWriteArrayList 有其缺陷：</p><ul><li>内存占用：在写操作时需要复制一个新的数组，使得内存占用为原来的两倍左右；</li><li>数据不一致：读操作不能读取实时性的数据，因为部分写操作的数据还未同步到读数组中。<br>所以 CopyOnWriteArrayList 不适合内存敏感以及对实时性要求很高的场景。</li></ul><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><h4 id="概览-1"><a href="#概览-1" class="headerlink" title="概览"></a>概览</h4><p>基于双向链表实现，使用 Node 存储链表节点信息。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private static class <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; next;</span><br><span class="line">    <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每个链表存储了 first 和 last 指针：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">transient <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; first;</span><br><span class="line">transient <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; last;</span><br></pre></td></tr></table></figure></p><p><img src="/assets/img/49495c95-52e5-4c9a-b27b-92cf235ff5ec.png" alt="49495c95-52e5-4c9a-b27b-92cf235ff5ec.png"></p><h4 id="与-ArrayList-的比较-1"><a href="#与-ArrayList-的比较-1" class="headerlink" title="与 ArrayList 的比较"></a>与 ArrayList 的比较</h4><ul><li>ArrayList 基于动态数组实现，LinkedList 基于双向链表实现；</li><li>ArrayList 支持随机访问，LinkedList 不支持；</li><li>LinkedList 在任意位置添加删除元素更快。</li></ul><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>为了便于理解，以下源码分析以 JDK 1.7 为主。</p><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><p>内部包含了一个 Entry 类型的数组 table。<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transient Entry[] <span class="keyword">table</span>;</span><br></pre></td></tr></table></figure></p><p>Entry 存储着键值对。它包含了四个字段，从 next 字段我们可以看出 Entry 是一个链表。即数组中的每个位置被当成一个桶，一个桶存放一个链表。HashMap 使用拉链法来解决冲突，同一个链表中存放哈希值相同的 Entry。<br><img src="/assets/img/8fe838e3-ef77-4f63-bf45-417b6bc5c6bb.png" alt="8fe838e3-ef77-4f63-bf45-417b6bc5c6bb.png"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line">    Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        next = n;</span><br><span class="line">        key = k;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map.Entry e = (Map.Entry)o;</span><br><span class="line">        Object k1 = getKey();</span><br><span class="line">        Object k2 = e.getKey();</span><br><span class="line">        <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">            Object v1 = getValue();</span><br><span class="line">            Object v2 = e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="拉链法的工作原理"><a href="#拉链法的工作原理" class="headerlink" title="拉链法的工作原理"></a>拉链法的工作原理</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"K1"</span>, <span class="string">"V1"</span>);</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"K2"</span>, <span class="string">"V2"</span>);</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"K3"</span>, <span class="string">"V3"</span>);</span><br></pre></td></tr></table></figure><p>新建一个 HashMap，默认大小为 16；<br>插入 &lt;K1,V1&gt; 键值对，先计算 K1 的 hashCode 为 115，使用除留余数法得到所在的桶下标 115%16=3。<br>插入 &lt;K2,V2&gt; 键值对，先计算 K2 的 hashCode 为 118，使用除留余数法得到所在的桶下标 118%16=6。<br>插入 &lt;K3,V3&gt; 键值对，先计算 K3 的 hashCode 为 118，使用除留余数法得到所在的桶下标 118%16=6，插在 &lt;K2,V2&gt; 前面。<br>应该注意到链表的插入是以头插法方式进行的，例如上面的 &lt;K3,V3&gt; 不是插在 &lt;K2,V2&gt; 后面，而是插入在链表头部。</p><p> 查找需要分成两步进行：</p><p>  计算键值对所在的桶；<br>   在链表上顺序查找，时间复杂度显然和链表的长度成正比。<br><img src="/assets/img/49d6de7b-0d0d-425c-9e49-a1559dc23b10.png" alt="49d6de7b-0d0d-425c-9e49-a1559dc23b10.png"></p><h4 id="put-操作"><a href="#put-操作" class="headerlink" title="put 操作"></a>put 操作</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span>(<span class="params">K key, V <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 键为 null 单独处理</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(<span class="keyword">value</span>);</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="comment">// 确定桶下标</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">// 先找出是否已经存在键为 key 的键值对，如果存在的话就更新这个键值对的值为 value</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.<span class="keyword">equals</span>(k))) &#123;</span><br><span class="line">            V oldValue = e.<span class="keyword">value</span>;</span><br><span class="line">            e.<span class="keyword">value</span> = <span class="keyword">value</span>;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 插入新键值对</span></span><br><span class="line">    addEntry(hash, key, <span class="keyword">value</span>, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashMap 允许插入键为 null 的键值对。但是因为无法调用 null 的 hashCode() 方法，也就无法确定该键值对的桶下标，只能通过强制指定一个桶下标来存放。HashMap 使用第 0 个桶存放键为 null 的键值对。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span>(<span class="params">V <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="literal">null</span>) &#123;</span><br><span class="line">            V oldValue = e.<span class="keyword">value</span>;</span><br><span class="line">            e.<span class="keyword">value</span> = <span class="keyword">value</span>;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(<span class="number">0</span>, <span class="literal">null</span>, <span class="keyword">value</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用链表的头插法，也就是新的键值对插在链表的头部，而不是链表的尾部。(jdk1.7)</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> addEntry(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">int</span> bucketIndex) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">size</span> &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">        hash = (<span class="keyword">null</span> != <span class="built_in">key</span>) ? hash(<span class="built_in">key</span>) : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createEntry(hash, <span class="built_in">key</span>, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> createEntry(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">int</span> bucketIndex) &#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    <span class="comment">// 头插法，链表头部指向新的键值对</span></span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, <span class="built_in">key</span>, value, e);</span><br><span class="line">    <span class="built_in">size</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Entry(<span class="built_in">int</span> h, K k, V v, Entry&lt;K,V&gt; <span class="built_in">n</span>) &#123;</span><br><span class="line">    <span class="built_in">value</span> = v;</span><br><span class="line">    next = <span class="built_in">n</span>;</span><br><span class="line">    key = k;</span><br><span class="line">    hash = h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="确定桶下标"><a href="#确定桶下标" class="headerlink" title="确定桶下标"></a>确定桶下标</h4><p>很多操作都需要先确定一个键值对所在的桶下标。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">int hash</span> = hash(key);</span><br><span class="line"><span class="attribute">int i</span> = indexFor(hash, table.length);</span><br></pre></td></tr></table></figure></p><h5 id="计算-hash-值"><a href="#计算-hash-值" class="headerlink" title="计算 hash 值"></a>计算 hash 值</h5><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="built_in">int</span> hash(<span class="keyword">Object</span> k) &#123;</span><br><span class="line">    <span class="built_in">int</span> h = hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> <span class="keyword">String</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((<span class="keyword">String</span>) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h5><p>令 x = 1&lt;&lt;4，即 x 为 2 的 4 次方，它具有以下性质：</p><p>x   : 00010000<br>x-1 : 00001111<br>令一个数 y 与 x-1 做与运算，可以去除 y 位级表示的第 4 位以上数：</p><p>y       : 10110010<br>x-1     : 00001111<br>y&amp;(x-1) : 00000010<br>这个性质和 y 对 x 取模效果是一样的：</p><p>y   : 10110010<br>x   : 00010000<br>y%x : 00000010<br>我们知道，位运算的代价比求模运算小的多，因此在进行这种计算时用位运算的话能带来更高的性能。</p><p>确定桶下标的最后一步是将 key 的 hash 值对桶个数取模：hash%capacity，如果能保证 capacity 为 2 的 n 次方，那么就可以将这个操作转换为位运算。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="扩容-基本原理"><a href="#扩容-基本原理" class="headerlink" title="扩容-基本原理"></a>扩容-基本原理</h4><p>设 HashMap 的 table 长度为 M，需要存储的键值对数量为 N，如果哈希函数满足均匀性的要求，那么每条链表的长度大约为 N/M，因此平均查找次数的复杂度为 O(N/M)。</p><p>为了让查找的成本降低，应该尽可能使得 N/M 尽可能小，因此需要保证 M 尽可能大，也就是说 table 要尽可能大。HashMap 采用动态扩容来根据当前的 N 值来调整 M 值，使得空间效率和时间效率都能得到保证。</p><p>和扩容相关的参数主要有：capacity、size、threshold 和 load_factor。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td> capacity</td><td>table 的容量大小，默认为 16。需要注意的是 capacity 必须保证为 2 的 n 次方。</td></tr><tr><td> size</td><td>键值对数量。</td></tr><tr><td> threshold</td><td>size 的临界值，当 size 大于等于 threshold 就必须进行扩容操作。</td></tr><tr><td> loadFactor</td><td>装载因子，table 能够使用的比例，threshold = capacity * loadFactor。</td></tr></tbody></table> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75</span>f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Entry[] table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> <span class="keyword">size</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br></pre></td></tr></table></figure><p> 从下面的添加元素代码中可以看出，当需要扩容时，令 capacity 为原来的两倍。</p> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span>(<span class="params"><span class="keyword">int</span> hash, K key, V <span class="keyword">value</span>, <span class="keyword">int</span> bucketIndex</span>)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, <span class="keyword">value</span>, e);</span><br><span class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 扩容使用 resize() 实现，需要注意的是，扩容操作同样需要把 oldTable 的所有键值对重新插入 newTable 中，因此这一步是很费时的。<br> <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> void resize(int <span class="keyword">new</span><span class="type">Capacity</span>) &#123;</span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    int oldCapacity = oldTable.length;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Entry[] <span class="keyword">new</span><span class="type">Table</span> = <span class="keyword">new</span> <span class="type">Entry</span>[<span class="keyword">new</span><span class="type">Capacity</span>];</span><br><span class="line">    transfer(<span class="keyword">new</span><span class="type">Table</span>);</span><br><span class="line">    table = <span class="keyword">new</span><span class="type">Table</span>;</span><br><span class="line">    threshold = (int)(<span class="keyword">new</span><span class="type">Capacity</span> * loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void transfer(Entry[] <span class="keyword">new</span><span class="type">Table</span>) &#123;</span><br><span class="line">    Entry[] src = table;</span><br><span class="line">    int <span class="keyword">new</span><span class="type">Capacity</span> = <span class="keyword">new</span><span class="type">Table</span>.length;</span><br><span class="line">    <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; src.length; j++) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            src[j] = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                int i = indexFor(e.hash, <span class="keyword">new</span><span class="type">Capacity</span>);</span><br><span class="line">                e.next = <span class="keyword">new</span><span class="type">Table</span>[i];</span><br><span class="line">                <span class="keyword">new</span><span class="type">Table</span>[i] = e;</span><br><span class="line">                e = next;</span><br><span class="line">            &#125; <span class="keyword">while</span> (e != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="扩容-重新计算桶下标"><a href="#扩容-重新计算桶下标" class="headerlink" title="扩容-重新计算桶下标"></a>扩容-重新计算桶下标</h4><p> 在进行扩容时，需要把键值对重新放到对应的桶上。HashMap 使用了一个特殊的机制，可以降低重新计算桶下标的操作。</p><p>假设原数组长度 capacity 为 16，扩容之后 new capacity 为 32：</p><p>capacity     : 00010000<br>new capacity : 00100000<br>对于一个 Key，</p><p>它的哈希值如果在第 5 位上为 0，那么取模得到的结果和之前一样；<br>如果为 1，那么得到的结果为原来的结果 +16。</p><h4 id="计算数组容量"><a href="#计算数组容量" class="headerlink" title="计算数组容量"></a>计算数组容量</h4><p>HashMap 构造函数允许用户传入的容量不是 2 的 n 次方，因为它可以自动地将传入的容量转换为 2 的 n 次方。</p><p>先考虑如何求一个数的掩码，对于 10010000，它的掩码为 11111111，可以使用以下方法得到：</p><p>mask |= mask &gt;&gt; 1    11011000<br>mask |= mask &gt;&gt; 2    11111110<br>mask |= mask &gt;&gt; 4    11111111<br>mask+1 是大于原始数字的最小的 2 的 n 次方。</p><p>num     10010000<br>mask+1 100000000<br>以下是 HashMap 中计算数组容量的代码：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static final <span class="built_in">int</span> tableSizeFor(<span class="built_in">int</span> cap) &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span> = cap - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    return (<span class="built_in">n</span> &lt; <span class="number">0</span>) ? <span class="number">1</span> <span class="symbol">:</span> (<span class="built_in">n</span> &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY <span class="symbol">:</span> <span class="built_in">n</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="链表转红黑树"><a href="#链表转红黑树" class="headerlink" title="链表转红黑树"></a>链表转红黑树</h4><p>从 JDK 1.8 开始，一个桶存储的链表长度大于 8 时会将链表转换为红黑树。</p><h4 id="与-HashTable-的比较"><a href="#与-HashTable-的比较" class="headerlink" title="与 HashTable 的比较"></a>与 HashTable 的比较</h4><p>HashTable 使用 synchronized 来进行同步。<br>HashMap 可以插入键为 null 的 Entry。<br>HashMap 的迭代器是 fail-fast 迭代器。<br>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;容器源码分析&quot;&gt;&lt;a href=&quot;#容器源码分析&quot; class=&quot;headerlink&quot; title=&quot;容器源码分析&quot;&gt;&lt;/a&gt;容器源码分析&lt;/h2&gt;&lt;p&gt;如果没有特别说明，以下源码分析基于 JDK 1.8。&lt;/p&gt;
&lt;p&gt;在 IDEA 中 double shift 调出 Search EveryWhere，查找源码文件，找到之后就可以阅读源码。&lt;/p&gt;
    
    </summary>
    
      <category term="集合" scheme="//aha.me/categories/%E9%9B%86%E5%90%88/"/>
    
    
      <category term="容器" scheme="//aha.me/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>队列同步器</title>
    <link href="//aha.me/2019/01/29/%E9%98%9F%E5%88%97%E5%90%8C%E6%AD%A5%E5%99%A8/"/>
    <id>//aha.me/2019/01/29/队列同步器/</id>
    <published>2019-01-29T03:38:30.000Z</published>
    <updated>2019-02-16T12:14:27.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="队列同步器"><a href="#队列同步器" class="headerlink" title="队列同步器"></a>队列同步器</h2><p>队列同步器AbstractQueuedSynchronizer（以下简称同步器），是用来构建锁或者其他同步组<br>件的基础框架，它使用了一个int成员变量表示同步状态，通过内置的FIFO队列来完成资源获<br>取线程的排队工作，并发包的作者（Doug Lea）期望它能够成为实现大部分同步需求的基础。</p><a id="more"></a><p>同步器的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状<br>态，在抽象方法的实现过程中免不了要对同步状态进行更改，这时就需要使用同步器提供的3<br>个方法（getState()、setState(int newState)和compareAndSetState(int expect,int update)）来进行操<br>作，因为它们能够保证状态的改变是安全的。子类推荐被定义为自定义同步组件的静态内部<br>类，同步器自身没有实现任何同步接口，它仅仅是定义了若干同步状态获取和释放的方法来<br>供自定义同步组件使用，同步器既可以支持独占式地获取同步状态，也可以支持共享式地获<br>取同步状态，这样就可以方便实现不同类型的同步组件（ReentrantLock、<br>ReentrantReadWriteLock和CountDownLatch等）。</p><p>同步器是实现锁（也可以是任意同步组件）的关键，在锁的实现中聚合同步器，利用同步<br>器实现锁的语义。可以这样理解二者之间的关系：锁是面向使用者的，它定义了使用者与锁交<br>互的接口（比如可以允许两个线程并行访问），隐藏了实现细节；同步器面向的是锁的实现者，<br>它简化了锁的实现方式，屏蔽了同步状态管理、线程的排队、等待与唤醒等底层操作。锁和同<br>步器很好地隔离了使用者和实现者所需关注的领域。</p><h3 id="队列同步器的接口与示例"><a href="#队列同步器的接口与示例" class="headerlink" title="队列同步器的接口与示例"></a>队列同步器的接口与示例</h3><p> 同步器的设计是基于模板方法模式的，也就是说，使用者需要继承同步器并重写指定的<br>方法，随后将同步器组合在自定义同步组件的实现中，并调用同步器提供的模板方法，而这些<br>模板方法将会调用使用者重写的方法。<br>重写同步器指定的方法时，需要使用同步器提供的如下3个方法来访问或修改同步状态。<br>·getState()：获取当前同步状态。<br>·setState(int newState)：设置当前同步状态。<br>·compareAndSetState(int expect,int update)：使用CAS设置当前状态，该方法能够保证状态<br>设置的原子性。<br>同步器可重写的方法与描述如表5-3所示。</p><p><img src="/assets/img/20190129114546.png" alt="20190129114546.png"></p><p>顾名思义，独占锁就是在同一时刻只能有一个线程获取到锁，而其他获取锁的线程只能<br>处于同步队列中等待，只有获取锁的线程释放了锁，后继的线程才能够获取锁，如代码清单5-<br>2所示</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mutex</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"><span class="comment">// 静态内部类，自定义同步器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line"><span class="comment">// 是否处于占用状态</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当状态为0的时候获取锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放锁，将状态设置为0</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (getState() == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span></span><br><span class="line">IllegalMonitorStateException();</span><br><span class="line">setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">setState(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回一个Condition，每个condition都包含了一个condition队列</span></span><br><span class="line"><span class="function">Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 仅需要将操作代理到Sync上即可</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123; sync.acquire(<span class="number">1</span>); &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123; <span class="function"><span class="keyword">return</span> sync.<span class="title">tryAcquire</span><span class="params">(<span class="number">1</span>)</span></span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123; sync.release(<span class="number">1</span>); &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123; <span class="function"><span class="keyword">return</span> sync.<span class="title">newCondition</span><span class="params">()</span></span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123; <span class="function"><span class="keyword">return</span> sync.<span class="title">isHeldExclusively</span><span class="params">()</span></span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasQueuedThreads</span><span class="params">()</span> </span>&#123; <span class="function"><span class="keyword">return</span> sync.<span class="title">hasQueuedThreads</span><span class="params">()</span></span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述示例中，独占锁Mutex是一个自定义同步组件，它在同一时刻只允许一个线程占有<br>锁。Mutex中定义了一个静态内部类，该内部类继承了同步器并实现了独占式获取和释放同步<br>状态。在tryAcquire(int acquires)方法中，如果经过CAS设置成功（同步状态设置为1），则代表获<br>取了同步状态，而在tryRelease(int releases)方法中只是将同步状态重置为0。用户使用Mutex时<br>并不会直接和内部同步器的实现打交道，而是调用Mutex提供的方法，在Mutex的实现中，以获<br>取锁的lock()方法为例，只需要在方法实现中调用同步器的模板方法acquire(int args)即可，当<br>前线程调用该方法获取同步状态失败后会被加入到同步队列中等待，这样就大大降低了实现<br>一个可靠自定义同步组件的门槛。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;队列同步器&quot;&gt;&lt;a href=&quot;#队列同步器&quot; class=&quot;headerlink&quot; title=&quot;队列同步器&quot;&gt;&lt;/a&gt;队列同步器&lt;/h2&gt;&lt;p&gt;队列同步器AbstractQueuedSynchronizer（以下简称同步器），是用来构建锁或者其他同步组&lt;br&gt;件的基础框架，它使用了一个int成员变量表示同步状态，通过内置的FIFO队列来完成资源获&lt;br&gt;取线程的排队工作，并发包的作者（Doug Lea）期望它能够成为实现大部分同步需求的基础。&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="队列同步器" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E9%98%9F%E5%88%97%E5%90%8C%E6%AD%A5%E5%99%A8/"/>
    
    
      <category term="Java中的锁" scheme="//aha.me/tags/Java%E4%B8%AD%E7%9A%84%E9%94%81/"/>
    
      <category term="队列同步器" scheme="//aha.me/tags/%E9%98%9F%E5%88%97%E5%90%8C%E6%AD%A5%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Lock接口</title>
    <link href="//aha.me/2019/01/29/Lock%E6%8E%A5%E5%8F%A3/"/>
    <id>//aha.me/2019/01/29/Lock接口/</id>
    <published>2019-01-29T03:28:45.000Z</published>
    <updated>2019-02-16T12:14:27.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h2><p>锁是用来控制多个线程访问共享资源的方式，一般来说，一个锁能够防止多个线程同时<br>访问共享资源（但是有些锁可以允许多个线程并发的访问共享资源，比如读写锁）。在Lock接<br>口出现之前，Java程序是靠synchronized关键字实现锁功能的，而Java SE 5之后，并发包中新增<br>了Lock接口（以及相关实现类）用来实现锁功能，它提供了与synchronized关键字类似的同步功<br>能，只是在使用时需要显式地获取和释放锁。虽然它缺少了（通过synchronized块或者方法所提<br>供的）隐式获取释放锁的便捷性，但是却拥有了锁获取与释放的可操作性、可中断的获取锁以<br>及超时获取锁等多种synchronized关键字所不具备的同步特性。</p><a id="more"></a><p>使用synchronized关键字将会隐式地获取锁，但是它将锁的获取和释放固化了，也就是先<br>获取再释放。当然，这种方式简化了同步的管理，可是扩展性没有显示的锁获取和释放来的<br>好。例如，针对一个场景，手把手进行锁获取和释放，先获得锁A，然后再获取锁B，当锁B获得<br>后，释放锁A同时获取锁C，当锁C获得后，再释放B同时获取锁D，以此类推。这种场景下，<br>synchronized关键字就不那么容易实现了，而使用Lock却容易许多。<br>Lock的使用也很简单，代码清单5-1是Lock的使用的方式。</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Lock</span> <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock()<span class="comment">;</span></span><br><span class="line"><span class="keyword">lock</span>.<span class="keyword">lock</span>()<span class="comment">;</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line"><span class="keyword">lock</span>.unlock()<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在finally块中释放锁，目的是保证在获取到锁之后，最终能够被释放。<br>不要将获取锁的过程写在try块中，因为如果在获取锁（自定义锁的实现）时发生了异常，<br>异常抛出的同时，也会导致锁无故释放。</p><p>Lock接口提供的synchronized关键字所不具备的主要特性如表5-1所示。</p><p><img src="/assets/img/20190129113145.png" alt="20190129113145.png"></p><p>Lock是一个接口，它定义了锁获取和释放的基本操作，Lock的API如表5-2所示。</p><p><img src="/assets/img/20190129113617.png" alt="20190129113617.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Lock接口&quot;&gt;&lt;a href=&quot;#Lock接口&quot; class=&quot;headerlink&quot; title=&quot;Lock接口&quot;&gt;&lt;/a&gt;Lock接口&lt;/h2&gt;&lt;p&gt;锁是用来控制多个线程访问共享资源的方式，一般来说，一个锁能够防止多个线程同时&lt;br&gt;访问共享资源（但是有些锁可以允许多个线程并发的访问共享资源，比如读写锁）。在Lock接&lt;br&gt;口出现之前，Java程序是靠synchronized关键字实现锁功能的，而Java SE 5之后，并发包中新增&lt;br&gt;了Lock接口（以及相关实现类）用来实现锁功能，它提供了与synchronized关键字类似的同步功&lt;br&gt;能，只是在使用时需要显式地获取和释放锁。虽然它缺少了（通过synchronized块或者方法所提&lt;br&gt;供的）隐式获取释放锁的便捷性，但是却拥有了锁获取与释放的可操作性、可中断的获取锁以&lt;br&gt;及超时获取锁等多种synchronized关键字所不具备的同步特性。&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="Java中的锁" scheme="//aha.me/tags/Java%E4%B8%AD%E7%9A%84%E9%94%81/"/>
    
      <category term="Lock接口" scheme="//aha.me/tags/Lock%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>线程应用实例</title>
    <link href="//aha.me/2019/01/29/%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    <id>//aha.me/2019/01/29/线程应用实例/</id>
    <published>2019-01-29T02:45:31.000Z</published>
    <updated>2019-02-16T12:14:27.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程应用实例"><a href="#线程应用实例" class="headerlink" title="线程应用实例"></a>线程应用实例</h2><h3 id="等待超时模式"><a href="#等待超时模式" class="headerlink" title="等待超时模式"></a>等待超时模式</h3><p>开发人员经常会遇到这样的方法调用场景：调用一个方法时等待一段时间（一般来说是给<br>定一个时间段），如果该方法能够在给定的时间段之内得到结果，那么将结果立刻返回，反之，<br>超时返回默认结果。<br><a id="more"></a></p><p>前面的章节介绍了等待/通知的经典范式，即加锁、条件循环和处理逻辑3个步骤，而这种<br>范式无法做到超时等待。而超时等待的加入，只需要对经典范式做出非常小的改动，改动内容<br>如下所示。<br>假设超时时间段是T，那么可以推断出在当前时间now+T之后就会超时。<br>定义如下变量。<br>·等待持续时间：REMAINING=T。<br>·超时时间：FUTURE=now+T。<br>这时仅需要wait(REMAINING)即可，在wait(REMAINING)返回之后会将执行：<br>REMAINING=FUTURE–now。如果REMAINING小于等于0，表示已经超时，直接退出，否则将<br>继续执行wait(REMAINING)。<br>上述描述等待超时模式的伪代码如下。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对当前对象加锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">Object</span> <span class="built_in">get</span>(<span class="keyword">long</span> mills) <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="keyword">long</span> future = System.currentTimeMillis() + mills;</span><br><span class="line"><span class="keyword">long</span> remaining = mills;</span><br><span class="line"><span class="comment">// 当超时大于0并且result返回值不满足要求</span></span><br><span class="line"><span class="keyword">while</span> ((result == <span class="keyword">null</span>) &amp;&amp; remaining &gt; <span class="number">0</span>) &#123;</span><br><span class="line">wait(remaining);</span><br><span class="line">remaining = future - System.currentTimeMillis();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，等待超时模式就是在等待/通知范式基础上增加了超时控制，这使得该模式相<br>比原有范式更具有灵活性，因为即使方法执行时间过长，也不会“永久”阻塞调用者，而是会按<br>照调用者的要求“按时”返回。</p><h3 id="一个简单的数据库连接池示例"><a href="#一个简单的数据库连接池示例" class="headerlink" title="一个简单的数据库连接池示例"></a>一个简单的数据库连接池示例</h3><p>我们使用等待超时模式来构造一个简单的数据库连接池，在示例中模拟从连接池中获<br>取、使用和释放连接的过程，而客户端获取连接的过程被设定为等待超时的模式，也就是在<br>1000毫秒内如果无法获取到可用连接，将会返回给客户端一个null。设定连接池的大小为10<br>个，然后通过调节客户端的线程数来模拟无法获取连接的场景。<br>首先看一下连接池的定义。它通过构造函数初始化连接的最大上限，通过一个双向队列<br>来维护连接，调用方需要先调用fetchConnection(long)方法来指定在多少毫秒内超时获取连接，<br>当连接使用完成后，需要调用releaseConnection(Connection)方法将连接放回线程池，示例如代<br>码清单4-16所示。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> LinkedList&lt;Connection&gt; pool = <span class="keyword">new</span> LinkedList&lt;Connection&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConnectionPool</span><span class="params">(<span class="keyword">int</span> initialSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (initialSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; initialSize; i++) &#123;</span><br><span class="line">pool.addLast(ConnectionDriver.createConnection());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">releaseConnection</span><span class="params">(Connection connection)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (pool) &#123;</span><br><span class="line"><span class="comment">// 连接释放后需要进行通知，这样其他消费者能够感知到连接池中已经归还了一个连接</span></span><br><span class="line">pool.addLast(connection);</span><br><span class="line">pool.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在mills内无法获取到连接，将会返回null</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">Connection <span class="title">fetchConnection</span><span class="params">(<span class="keyword">long</span> mills)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (pool) &#123;</span><br><span class="line"><span class="comment">// 完全超时</span></span><br><span class="line"><span class="keyword">if</span> (mills &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (pool.isEmpty()) &#123;</span><br><span class="line">pool.wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">return</span> pool.<span class="title">removeFirst</span><span class="params">()</span></span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">long</span> future = System.currentTimeMillis() + mills;</span><br><span class="line"><span class="keyword">long</span> remaining = mills;</span><br><span class="line"><span class="keyword">while</span> (pool.isEmpty() &amp;&amp; remaining &gt; <span class="number">0</span>) &#123;</span><br><span class="line">pool.wait(remaining);</span><br><span class="line">remaining = future - System.currentTimeMillis();</span><br><span class="line">&#125;</span><br><span class="line">Connection result = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (!pool.isEmpty()) &#123;</span><br><span class="line">result = pool.removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于java.sql.Connection是一个接口，最终的实现是由数据库驱动提供方来实现的，考虑到<br>只是个示例，我们通过动态代理构造了一个Connection，该Connection的代理实现仅仅是在<br>commit()方法调用时休眠100毫秒，示例如代码清单4-17所示。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionDriver</span> &#123;</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span> Object invoke(Object proxy, Method method, Object[] args) <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="keyword">if</span> (method.getName().equals(<span class="string">"commit"</span>)) &#123;</span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个Connection的代理，在commit时休眠100毫秒</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Connection createConnection() &#123;</span><br><span class="line"><span class="keyword">return</span> (Connection) Proxy.newProxyInstance(ConnectionDriver.<span class="keyword">class</span>.getClassLoader(),</span><br><span class="line"><span class="keyword">new</span> Class&lt;&gt;[] &#123; Connection.<span class="keyword">class</span> &#125;, <span class="keyword">new</span> ConnectionHandler());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面通过一个示例来测试简易数据库连接池的工作情况，模拟客户端ConnectionRunner获<br>取、使用、最后释放连接的过程，当它使用时连接将会增加获取到连接的数量，反之，将会增<br>加未获取到连接的数量，示例如代码清单4-18所示</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ConnectionPoolTest &#123;</span><br><span class="line"><span class="keyword">static</span> ConnectionPool pool = <span class="keyword">new</span> ConnectionPool(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 保证所有ConnectionRunner能够同时开始</span></span><br><span class="line"><span class="keyword">static</span> CountDownLatch start = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// main线程将会等待所有ConnectionRunner结束后才能继续执行</span></span><br><span class="line"><span class="keyword">static</span> CountDownLatch end;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 线程数量，可以修改线程数量进行观察</span></span><br><span class="line"><span class="keyword">int</span> threadCount = <span class="number">10</span>;</span><br><span class="line">end = <span class="keyword">new</span> CountDownLatch(threadCount);</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">20</span>;</span><br><span class="line">AtomicInteger got = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">AtomicInteger notGot = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ConnetionRunner(<span class="keyword">count</span>, got, notGot),</span><br><span class="line"><span class="string">"ConnectionRunnerThread"</span>);</span><br><span class="line">thread.start();</span><br><span class="line">&#125;</span><br><span class="line">start.countDown();</span><br><span class="line">end.await();</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"total invoke: "</span> + (threadCount * <span class="keyword">count</span>));</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"got connection: "</span> + got);</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"not got connection "</span> + notGot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> ConnetionRunner <span class="keyword">implements</span> Runnable &#123;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">count</span>;</span><br><span class="line">AtomicInteger got;</span><br><span class="line">AtomicInteger notGot;</span><br><span class="line"><span class="keyword">public</span> ConnetionRunner(<span class="keyword">int</span> <span class="keyword">count</span>, AtomicInteger got, AtomicInteger notGot) &#123;</span><br><span class="line"><span class="keyword">this</span>.<span class="keyword">count</span> = <span class="keyword">count</span>;</span><br><span class="line"><span class="keyword">this</span>.got = got;</span><br><span class="line"><span class="keyword">this</span>.notGot = notGot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">start.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">count</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 从线程池中获取连接，如果1000ms内无法获取到，将会返回null</span></span><br><span class="line"><span class="comment">// 分别统计连接获取的数量got和未获取到的数量notGot</span></span><br><span class="line">Connection connection = pool.fetchConnection(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.createStatement();</span><br><span class="line">connection.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">pool.releaseConnection(connection);</span><br><span class="line">got.incrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">notGot.incrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">count</span>--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">end.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述示例中使用了CountDownLatch来确保ConnectionRunnerThread能够同时开始执行，并<br>且在全部结束之后，才使main线程从等待状态中返回。当前设定的场景是10个线程同时运行<br>获取连接池（10个连接）中的连接，通过调节线程数量来观察未获取到连接的情况。线程数、总<br>获取次数、获取到的数量、未获取到的数量以及未获取到的比率，如表4-3所示（笔者机器CPU：<br>i7-3635QM，内存为8GB，实际输出可能与此表不同）</p><p>从表中的数据统计可以看出，在资源一定的情况下（连接池中的10个连接），随着客户端<br>线程的逐步增加，客户端出现超时无法获取连接的比率不断升高。虽然客户端线程在这种超<br>时获取的模式下会出现连接无法获取的情况，但是它能够保证客户端线程不会一直挂在连接<br>获取的操作上，而是“按时”返回，并告知客户端连接获取出现问题，是系统的一种自我保护机<br>制。数据库连接池的设计也可以复用到其他的资源获取的场景，针对昂贵资源（比如数据库连<br>接）的获取都应该加以超时限制。</p><h3 id="线程池技术及其示例"><a href="#线程池技术及其示例" class="headerlink" title="线程池技术及其示例"></a>线程池技术及其示例</h3><p>对于服务端的程序，经常面对的是客户端传入的短小（执行时间短、工作内容较为单一）<br>任务，需要服务端快速处理并返回结果。如果服务端每次接受到一个任务，创建一个线程，然<br>后进行执行，这在原型阶段是个不错的选择，但是面对成千上万的任务递交进服务器时，如果<br>还是采用一个任务一个线程的方式，那么将会创建数以万记的线程，这不是一个好的选择。因<br>为这会使操作系统频繁的进行线程上下文切换，无故增加系统的负载，而线程的创建和消亡<br>都是需要耗费系统资源的，也无疑浪费了系统资源。<br>线程池技术能够很好地解决这个问题，它预先创建了若干数量的线程，并且不能由用户<br>直接对线程的创建进行控制，在这个前提下重复使用固定或较为固定数目的线程来完成任务<br>的执行。这样做的好处是，一方面，消除了频繁创建和消亡线程的系统资源开销，另一方面，<br>面对过量任务的提交能够平缓的劣化。</p><p>下面先看一个简单的线程池接口定义，示例如代码清单4-19所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThreadPool</span>&lt;<span class="title">Job</span> <span class="keyword">extends</span> <span class="title">Runnable</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">// 执行一个Job，这个Job需要实现Runnable</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Job job)</span></span>;</span><br><span class="line"><span class="comment">// 关闭线程池</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 增加工作者线程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addWorkers</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="comment">// 减少工作者线程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeWorker</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="comment">// 得到正在等待执行的任务数量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getJobSize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端可以通过execute(Job)方法将Job提交入线程池执行，而客户端自身不用等待Job的<br>执行完成。除了execute(Job)方法以外，线程池接口提供了增大/减少工作者线程以及关闭线程<br>池的方法。这里工作者线程代表着一个重复执行Job的线程，而每个由客户端提交的Job都将进<br>入到一个工作队列中等待工作者线程的处理。<br>接下来是线程池接口的默认实现，示例如代码清单4-20所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultThreadPool</span>&lt;<span class="title">Job</span> <span class="keyword">extends</span> <span class="title">Runnable</span>&gt; <span class="keyword">implements</span> <span class="title">ThreadPool</span>&lt;<span class="title">Job</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">// 线程池最大限制数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_WORKER_NUMBERS = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 线程池默认的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_WORKER_NUMBERS = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 线程池最小的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_WORKER_NUMBERS = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 这是一个工作列表，将会向里面插入工作</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;Job&gt; jobs = <span class="keyword">new</span> LinkedList&lt;Job&gt;();</span><br><span class="line"><span class="comment">// 工作者列表</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Worker&gt; workers = Collections.synchronizedList(<span class="keyword">new</span></span><br><span class="line">ArrayList&lt;Worker&gt;());</span><br><span class="line"><span class="comment">// 工作者线程的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> workerNum = DEFAULT_WORKER_NUMBERS;</span><br><span class="line"><span class="comment">// 线程编号生成</span></span><br><span class="line"><span class="keyword">private</span> AtomicLong threadNum = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">initializeWokers(DEFAULT_WORKER_NUMBERS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultThreadPool</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">workerNum = num &gt; MAX_WORKER_NUMBERS MAX_WORKER_NUMBERS : num &lt; MIN_WORKER_</span><br><span class="line">NUMBERS MIN_WORKER_NUMBERS : num;</span><br><span class="line">initializeWokers(workerNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Job job)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (job != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 添加一个工作，然后进行通知</span></span><br><span class="line"><span class="keyword">synchronized</span> (jobs) &#123;</span><br><span class="line">jobs.addLast(job);</span><br><span class="line">jobs.notify();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Worker worker : workers) &#123;</span><br><span class="line">worker.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWorkers</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (jobs) &#123;</span><br><span class="line"><span class="comment">// 限制新增的Worker数量不能超过最大值</span></span><br><span class="line"><span class="keyword">if</span> (num + <span class="keyword">this</span>.workerNum &gt; MAX_WORKER_NUMBERS) &#123;</span><br><span class="line">num = MAX_WORKER_NUMBERS - <span class="keyword">this</span>.workerNum;</span><br><span class="line">&#125;</span><br><span class="line">initializeWokers(num);</span><br><span class="line"><span class="keyword">this</span>.workerNum += num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeWorker</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (jobs) &#123;</span><br><span class="line"><span class="keyword">if</span> (num &gt;= <span class="keyword">this</span>.workerNum) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"beyond workNum"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按照给定的数量停止Worker</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt; num) &#123;</span><br><span class="line">Worker worker = workers.get(count)</span><br><span class="line"><span class="keyword">if</span> (workers.remove(worker)) &#123;</span><br><span class="line">worker.shutdown();</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.workerNum -= count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getJobSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> jobs.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化线程工作者</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initializeWokers</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">workers.add(worker);</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(worker, <span class="string">"ThreadPool-Worker-"</span> + threadNum.</span><br><span class="line">incrementAndGet());</span><br><span class="line">thread.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工作者，负责消费任务</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 是否工作</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (running) &#123;</span><br><span class="line">Job job = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">synchronized</span> (jobs) &#123;</span><br><span class="line"><span class="comment">// 如果工作者列表是空的，那么就wait</span></span><br><span class="line"><span class="keyword">while</span> (jobs.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">jobs.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line"><span class="comment">// 感知到外部对WorkerThread的中断操作，返回</span></span><br><span class="line">Thread.currentThread().interrupt();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取出一个Job</span></span><br><span class="line">job = jobs.removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (job != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">job.run();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">// 忽略Job执行中的Exception</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">running = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从线程池的实现可以看到，当客户端调用execute(Job)方法时，会不断地向任务列表jobs中<br>添加Job，而每个工作者线程会不断地从jobs上取出一个Job进行执行，当jobs为空时，工作者线<br>程进入等待状态。<br>添加一个Job后，对工作队列jobs调用了其notify()方法，而不是notifyAll()方法，因为能够<br>确定有工作者线程被唤醒，这时使用notify()方法将会比notifyAll()方法获得更小的开销（避免<br>将等待队列中的线程全部移动到阻塞队列中）。<br>可以看到，线程池的本质就是使用了一个线程安全的工作队列连接工作者线程和客户端<br>线程，客户端线程将任务放入工作队列后便返回，而工作者线程则不断地从工作队列上取出<br>工作并执行。当工作队列为空时，所有的工作者线程均等待在工作队列上，当有客户端提交了<br>一个任务之后会通知任意一个工作者线程，随着大量的任务被提交，更多的工作者线程会被<br>唤醒。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线程应用实例&quot;&gt;&lt;a href=&quot;#线程应用实例&quot; class=&quot;headerlink&quot; title=&quot;线程应用实例&quot;&gt;&lt;/a&gt;线程应用实例&lt;/h2&gt;&lt;h3 id=&quot;等待超时模式&quot;&gt;&lt;a href=&quot;#等待超时模式&quot; class=&quot;headerlink&quot; title=&quot;等待超时模式&quot;&gt;&lt;/a&gt;等待超时模式&lt;/h3&gt;&lt;p&gt;开发人员经常会遇到这样的方法调用场景：调用一个方法时等待一段时间（一般来说是给&lt;br&gt;定一个时间段），如果该方法能够在给定的时间段之内得到结果，那么将结果立刻返回，反之，&lt;br&gt;超时返回默认结果。&lt;br&gt;
    
    </summary>
    
      <category term="多线程" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程应用实例" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="多线程" scheme="//aha.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程应用实例" scheme="//aha.me/tags/%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>线程间通信</title>
    <link href="//aha.me/2019/01/29/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>//aha.me/2019/01/29/线程间通信/</id>
    <published>2019-01-29T00:24:01.000Z</published>
    <updated>2019-02-16T12:14:27.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><blockquote><p>线程开始运行，拥有自己的栈空间，就如同一个脚本一样，按照既定的代码一步一步地执行，直到终止。但是，每个运行中的线程，如果仅仅是孤立地运行，那么没有一点儿价值，或者说价值很少，如果多个线程能够相互配合完成工作，这将会带来巨大的价值。</p></blockquote><a id="more"></a><h3 id="volatile和synchronized关键字"><a href="#volatile和synchronized关键字" class="headerlink" title="volatile和synchronized关键字"></a>volatile和synchronized关键字</h3><p>  Java支持多个线程同时访问一个对象或者对象的成员变量，由于每个线程可以拥有这个变量的拷贝（虽然对象以及成员变量分配的内存是在共享内存中的，但是每个执行的线程还是可以拥有一份拷贝，这样做的目的是加速程序的执行，这是现代多核处理器的一个显著特性），所以程序在执行过程中，一个线程看到的变量并不一定是最新的。关键字volatile可以用来修饰字段（成员变量），就是告知程序任何对该变量的访问均需要</p><p>  从共享内存中获取，而对它的改变必须同步刷新回共享内存，它能保证所有线程对变量访问的可见性。</p><p>举个例子，定义一个表示程序是否运行的成员变量boolean on=true，那么另一个线程可能<br>对它执行关闭动作（on=false），这里涉及多个线程对变量的访问，因此需要将其定义成为<br>volatile boolean on＝true，这样其他线程对它进行改变时，可以让所有线程感知到变化，因为所<br>有对on变量的访问和修改都需要以共享内存为准。但是，过多地使用volatile是不必要的，因为<br>它会降低程序执行的效率。<br>关键字synchronized可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程<br>在同一个时刻，只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性<br>和排他性。<br>在代码清单4-10所示的例子中，使用了同步块和同步方法，通过使用javap工具查看生成<br>的class文件信息来分析synchronized关键字的实现细节，示例如下。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="keyword">Synchronized</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="comment">// 对Synchronized Class对象进行加锁</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">Synchronized</span>.<span class="keyword">class</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态同步方法，对Synchronized Class对象进行加锁</span></span><br><span class="line">m();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> m() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>在Synchronized.class同级目录执行javap–v Synchronized.class，部分相关输出如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line"><span class="comment">// 方法修饰符，表示：public staticflags: ACC_PUBLIC, ACC_STATIC</span></span><br><span class="line">Code:</span><br><span class="line"><span class="built_in">stack</span>=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line"><span class="number">0</span>: ldc #<span class="number">1</span> <span class="comment">// class com/murdock/books/multithread/book/Synchronized</span></span><br><span class="line"><span class="number">2</span>: dup</span><br><span class="line"><span class="number">3</span>: monitorenter <span class="comment">// monitorenter：监视器进入，获取锁</span></span><br><span class="line"><span class="number">4</span>: monitorexit <span class="comment">// monitorexit：监视器退出，释放锁</span></span><br><span class="line"><span class="number">5</span>: invokestatic #<span class="number">16</span> <span class="comment">// Method m:()V</span></span><br><span class="line"><span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> synchronized <span class="keyword">void</span> m();</span><br><span class="line"><span class="comment">// 方法修饰符，表示： public static synchronized</span></span><br><span class="line">flags: ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED</span><br><span class="line">Code:</span><br><span class="line"><span class="built_in">stack</span>=<span class="number">0</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line"><span class="number">0</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure></p></blockquote><p>上面class信息中，对于同步块的实现使用了monitorenter和monitorexit指令，而同步方法则<br>是依靠方法修饰符上的ACC_SYNCHRONIZED来完成的。无论采用哪种方式，其本质是对一<br>个对象的监视器（monitor）进行获取，而这个获取过程是排他的，也就是同一时刻只能有一个<br>线程获取到由synchronized所保护对象的监视器。<br>任意一个对象都拥有自己的监视器，当这个对象由同步块或者这个对象的同步方法调用<br>时，执行方法的线程必须先获取到该对象的监视器才能进入同步块或者同步方法，而没有获<br>取到监视器（执行该方法）的线程将会被阻塞在同步块和同步方法的入口处，进入BLOCKED<br>状态。</p><p>从图4-2中可以看到，任意线程对Object（Object由synchronized保护）的访问，首先要获得<br>Object的监视器。如果获取失败，线程进入同步队列，线程状态变为BLOCKED。当访问Object<br>的前驱（获得了锁的线程）释放了锁，则该释放操作唤醒阻塞在同步队列中的线程，使其重新<br>尝试对监视器的获取。</p><h3 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h3><p>一个线程修改了一个对象的值，而另一个线程感知到了变化，然后进行相应的操作，整个<br>过程开始于一个线程，而最终执行又是另一个线程。前者是生产者，后者就是消费者，这种模<br>式隔离了“做什么”（what）和“怎么做”（How），在功能层面上实现了解耦，体系结构上具备了良<br>好的伸缩性，但是在Java语言中如何实现类似的功能呢？<br>简单的办法是让消费者线程不断地循环检查变量是否符合预期，如下面代码所示，在<br>while循环中设置不满足的条件，如果条件满足则退出while循环，从而完成消费者的工作。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">while</span> (value != desire) &#123;</span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-class">.sleep</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">doSomething</span>();</span><br></pre></td></tr></table></figure><p>上面这段伪代码在条件不满足时就睡眠一段时间，这样做的目的是防止过快的“无效”尝<br>试，这种方式看似能够解实现所需的功能，但是却存在如下问题。<br>1）难以确保及时性。在睡眠时，基本不消耗处理器资源，但是如果睡得过久，就不能及时<br>发现条件已经变化，也就是及时性难以保证。<br>2）难以降低开销。如果降低睡眠的时间，比如休眠1毫秒，这样消费者能更加迅速地发现<br>条件变化，但是却可能消耗更多的处理器资源，造成了无端的浪费。<br>以上两个问题，看似矛盾难以调和，但是Java通过内置的等待/通知机制能够很好地解决<br>这个矛盾并实现所需的功能。<br>等待/通知的相关方法是任意Java对象都具备的，因为这些方法被定义在所有对象的超类<br>java.lang.Object上，方法和描述如表4-2所示。</p><p><img src="/assets/img/20190129093642.png" alt="20190129093642.png"></p><p>等待/通知机制，是指一个线程A调用了对象O的wait()方法进入等待状态，而另一个线程B<br>调用了对象O的notify()或者notifyAll()方法，线程A收到通知后从对象O的wait()方法返回，进而<br>执行后续操作。上述两个线程通过对象O来完成交互，而对象上的wait()和notify/notifyAll()的<br>关系就如同开关信号一样，用来完成等待方和通知方之间的交互工作。<br>在代码清单4-11所示的例子中，创建了两个线程——WaitThread和NotifyThread，前者检查<br>flag值是否为false，如果符合要求，进行后续操作，否则在lock上等待，后者在睡眠了一段时间<br>后对lock进行通知，示例如下所示</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userD</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> boolean flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">static</span> Object lock = <span class="keyword">new</span> <span class="type">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) throws Exception &#123;</span><br><span class="line">        Thread waitThread = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">Wait</span>(), <span class="string">"WaitThread"</span>);</span><br><span class="line">        waitThread.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        Thread notifyThread = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">Notify</span>(), <span class="string">"NotifyThread"</span>);</span><br><span class="line">        notifyThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Wait</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Runnable</span></span> </span>&#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> void run() &#123;</span><br><span class="line"><span class="comment">// 加锁，拥有lock的Monitor</span></span><br><span class="line">            synchronized (lock) &#123;</span><br><span class="line"><span class="comment">// 当条件不满足时，继续wait，同时释放了lock的锁</span></span><br><span class="line">                <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread() + <span class="string">" flag is true. wait @ "</span> + <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> <span class="type">Date</span>()));</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">// 条件满足时，完成工作</span></span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">" flag is false. running @ "</span> + <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> <span class="type">Date</span>()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Notify</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Runnable</span></span> </span>&#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> void run() &#123;</span><br><span class="line"><span class="comment">// 加锁，拥有lock的Monitor</span></span><br><span class="line">            synchronized (lock) &#123;</span><br><span class="line"><span class="comment">// 获取lock的锁，然后进行通知，通知时不会释放lock的锁，</span></span><br><span class="line"><span class="comment">// 直到当前线程释放了lock后，WaitThread才能从wait方法中返回</span></span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">" hold lock. notify @ "</span> +</span><br><span class="line">                        <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> <span class="type">Date</span>()));</span><br><span class="line">                lock.notifyAll();</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 再次加锁</span></span><br><span class="line">            synchronized (lock) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">" hold lock again. sleep @ "</span> + <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> <span class="type">Date</span>()));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下（输出内容可能不同，主要区别在时间上）。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[WaitThread,5,main]</span> <span class="selector-tag">flag</span> <span class="selector-tag">is</span> <span class="selector-tag">true</span>. <span class="selector-tag">wait</span> @ <span class="selector-tag">22</span><span class="selector-pseudo">:23</span><span class="selector-pseudo">:03</span></span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[NotifyThread,5,main]</span> <span class="selector-tag">hold</span> <span class="selector-tag">lock</span>. <span class="selector-tag">notify</span> @ <span class="selector-tag">22</span><span class="selector-pseudo">:23</span><span class="selector-pseudo">:04</span></span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[NotifyThread,5,main]</span> <span class="selector-tag">hold</span> <span class="selector-tag">lock</span> <span class="selector-tag">again</span>. <span class="selector-tag">sleep</span> @ <span class="selector-tag">22</span><span class="selector-pseudo">:23</span><span class="selector-pseudo">:09</span></span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[WaitThread,5,main]</span> <span class="selector-tag">flag</span> <span class="selector-tag">is</span> <span class="selector-tag">false</span>. <span class="selector-tag">running</span> @ <span class="selector-tag">22</span><span class="selector-pseudo">:23</span><span class="selector-pseudo">:14</span></span><br></pre></td></tr></table></figure><p>上述第3行和第4行输出的顺序可能会互换，而上述例子主要说明了调用wait()、notify()以<br>及notifyAll()时需要注意的细节，如下。<br>1）使用wait()、notify()和notifyAll()时需要先对调用对象加锁。<br>2）调用wait()方法后，线程状态由RUNNING变为WAITING，并将当前线程放置到对象的<br>等待队列。<br>3）notify()或notifyAll()方法调用后，等待线程依旧不会从wait()返回，需要调用notify()或<br>notifAll()的线程释放锁之后，等待线程才有机会从wait()返回。<br>4）notify()方法将等待队列中的一个等待线程从等待队列中移到同步队列中，而notifyAll()<br>方法则是将等待队列中所有的线程全部移到同步队列，被移动的线程状态由WAITING变为<br>BLOCKED。<br>5）从wait()方法返回的前提是获得了调用对象的锁。</p><p><img src="/assets/img/20190129100347.png" alt="20190129100347.png"></p><p>在图4-3中，WaitThread首先获取了对象的锁，然后调用对象的wait()方法，从而放弃了锁<br>并进入了对象的等待队列WaitQueue中，进入等待状态。由于WaitThread释放了对象的锁，<br>NotifyThread随后获取了对象的锁，并调用对象的notify()方法，将WaitThread从WaitQueue移到<br>SynchronizedQueue中，此时WaitThread的状态变为阻塞状态。NotifyThread释放了锁之后，<br>WaitThread再次获取到锁并从wait()方法返回继续执行。</p><h3 id="等待-通知的经典范式"><a href="#等待-通知的经典范式" class="headerlink" title="等待/通知的经典范式"></a>等待/通知的经典范式</h3><p>从4.3.2节中的WaitNotify示例中可以提炼出等待/通知的经典范式，该范式分为两部分，分<br>别针对等待方（消费者）和通知方（生产者）。<br>等待方遵循如下原则。<br>1）获取对象的锁。<br>2）如果条件不满足，那么调用对象的wait()方法，被通知后仍要检查条件。<br>3）条件满足则执行对应的逻辑。<br>对应的伪代码如下。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">synchronized</span>(对象) &#123;</span><br><span class="line"><span class="selector-tag">while</span>(条件不满足) &#123;</span><br><span class="line">对象<span class="selector-class">.wait</span>();</span><br><span class="line">&#125;</span><br><span class="line">对应的处理逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通知方遵循如下原则。<br>1）获得对象的锁。<br>2）改变条件。<br>3）通知所有等待在对象上的线程。<br>对应的伪代码如下。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">synchronized</span>(对象) &#123;</span><br><span class="line">改变条件</span><br><span class="line">对象<span class="selector-class">.notifyAll</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Thread-join-的使用"><a href="#Thread-join-的使用" class="headerlink" title="Thread.join()的使用"></a>Thread.join()的使用</h3><p>如果一个线程A执行了thread.join()语句，其含义是：当前线程A等待thread线程终止之后才<br>从thread.join()返回。线程Thread除了提供join()方法之外，还提供了join(long millis)和join(long<br>millis,int nanos)两个具备超时特性的方法。这两个超时方法表示，如果线程thread在给定的超时<br>时间里没有终止，那么将会从该超时方法中返回。<br>在代码清单4-13所示的例子中，创建了10个线程，编号0~9，每个线程调用前一个线程的<br>join()方法，也就是线程0结束了，线程1才能从join()方法中返回，而线程0需要等待main线程结<br>束</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="keyword">Join</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">Thread <span class="keyword">previous</span> = Thread.currentThread();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 每个线程拥有前一个线程的引用，需要等待前一个线程终止，才能从等待中返回</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Domino(<span class="keyword">previous</span>), String.valueOf(i));</span><br><span class="line">thread.start();</span><br><span class="line"><span class="keyword">previous</span> = thread;</span><br><span class="line">&#125;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">System.out.<span class="keyword">println</span>(Thread.currentThread().getName() + <span class="string">" terminate."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> Domino <span class="keyword">implements</span> Runnable &#123;</span><br><span class="line"><span class="keyword">private</span> Thread thread;</span><br><span class="line"><span class="keyword">public</span> Domino(Thread thread) &#123;</span><br><span class="line"><span class="keyword">this</span>.thread = thread;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">thread.<span class="keyword">join</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="keyword">println</span>(Thread.currentThread().getName() + <span class="string">" terminate."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main <span class="keyword">terminate</span>.<span class="number">0</span> terminate1 terminate2 <span class="keyword">terminate</span>.<span class="number">3</span> <span class="keyword">terminate</span>.<span class="number">4</span> <span class="keyword">terminate</span>.<span class="number">5</span> <span class="keyword">terminate</span>.<span class="number">6</span> <span class="keyword">terminate</span>.<span class="number">7</span> <span class="keyword">terminate</span>.<span class="number">8</span> terminate9 terminat</span><br></pre></td></tr></table></figure><p>从上述输出可以看到，每个线程终止的前提是前驱线程的终止，每个线程等待前驱线程<br>终止后，才从join()方法返回，这里涉及了等待/通知机制（等待前驱线程结束，接收前驱线程结束通知）。<br>代码清单4-14是JDK中Thread.join()方法的源码（进行了部分调整）。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加锁当前线程对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">// 条件不满足，继续等待</span></span><br><span class="line"><span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">wait(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 条件符合，方法返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当线程终止时，会调用线程自身的notifyAll()方法，会通知所有等待在该线程对象上的线<br>程。可以看到join()方法的逻辑结构与4.3.3节中描述的等待/通知经典范式一致，即加锁、循环<br>和处理逻辑3个步骤。</p><h3 id="ThreadLocal的使用"><a href="#ThreadLocal的使用" class="headerlink" title="ThreadLocal的使用"></a>ThreadLocal的使用</h3><p>ThreadLocal，即线程变量，是一个以ThreadLocal对象为键、任意对象为值的存储结构。这<br>个结构被附带在线程上，也就是说一个线程可以根据一个ThreadLocal对象查询到绑定在这个<br>线程上的一个值。<br>可以通过set(T)方法来设置一个值，在当前线程下再通过get()方法获取到原先设置的值。<br>在代码清单4-15所示的例子中，构建了一个常用的Profiler类，它具有begin()和end()两个<br>方法，而end()方法返回从begin()方法调用开始到end()方法被调用时的时间差，单位是毫秒。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Profiler</span> </span>&#123;</span><br><span class="line"><span class="comment">// 第一次get()方法调用时会进行初始化（如果set方法没有调用），每个线程会调用一次</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Long&gt; TIME_THREADLOCAL = <span class="keyword">new</span> ThreadLocal&lt;Long&gt;() &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="function">Long <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">return</span> System.<span class="title">currentTimeMillis</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">TIME_THREADLOCAL.set(System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="function"><span class="keyword">long</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> System.currentTimeMillis() - TIME_THREADLOCAL.get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Profiler.begin();</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"Cost: "</span> + Profiler.end() + <span class="string">" mills"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Profiler可以被复用在方法调用耗时统计的功能上，在方法的入口前执行begin()方法，在<br>方法调用后执行end()方法，好处是两个方法的调用不用在一个方法或者类中，比如在AOP（面<br>向方面编程）中，可以在方法调用前的切入点执行begin()方法，而在方法调用后的切入点执行<br>end()方法，这样依旧可以获得方法的执行耗时。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线程间通信&quot;&gt;&lt;a href=&quot;#线程间通信&quot; class=&quot;headerlink&quot; title=&quot;线程间通信&quot;&gt;&lt;/a&gt;线程间通信&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;线程开始运行，拥有自己的栈空间，就如同一个脚本一样，按照既定的代码一步一步地执行，直到终止。但是，每个运行中的线程，如果仅仅是孤立地运行，那么没有一点儿价值，或者说价值很少，如果多个线程能够相互配合完成工作，这将会带来巨大的价值。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="多线程" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程间通信" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="多线程" scheme="//aha.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程间通信" scheme="//aha.me/tags/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>启动和终止线程</title>
    <link href="//aha.me/2019/01/28/%E5%90%AF%E5%8A%A8%E5%92%8C%E7%BB%88%E6%AD%A2%E7%BA%BF%E7%A8%8B/"/>
    <id>//aha.me/2019/01/28/启动和终止线程/</id>
    <published>2019-01-28T09:29:00.000Z</published>
    <updated>2019-02-16T12:14:27.388Z</updated>
    
    <content type="html"><![CDATA[<h3 id="构造线程"><a href="#构造线程" class="headerlink" title="构造线程"></a>构造线程</h3><p>在运行线程之前首先要构造一个线程对象，线程对象在构造的时候需要提供线程所需要<br>的属性，如线程所属的线程组、线程优先级、是否是Daemon线程等信息。代码清单4-6所示的</p><a id="more"></a><p>代码摘自java.lang.Thread中对线程进行初始化的部分。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> init(ThreadGroup g, Runnable <span class="keyword">target</span>, String name,<span class="keyword">long</span> stackSize,</span><br><span class="line">AccessControlContext acc) &#123;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"name cannot be null"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当前线程就是该线程的父线程</span></span><br><span class="line">Thread parent = currentThread();</span><br><span class="line"><span class="keyword">this</span>.group = g;</span><br><span class="line"><span class="comment">// 将daemon、priority属性设置为父线程的对应属性</span></span><br><span class="line"><span class="keyword">this</span>.daemon = parent.isDaemon();</span><br><span class="line"><span class="keyword">this</span>.priority = parent.getPriority();</span><br><span class="line"><span class="keyword">this</span>.name = name.toCharArray();</span><br><span class="line"><span class="keyword">this</span>.<span class="keyword">target</span> = <span class="keyword">target</span>;</span><br><span class="line">setPriority(priority);</span><br><span class="line"><span class="comment">// 将父线程的InheritableThreadLocal复制过来</span></span><br><span class="line"><span class="keyword">if</span> (parent.inheritableThreadLocals != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">this</span>.inheritableThreadLocals=ThreadLocal.createInheritedMap(parent.</span><br><span class="line">inheritableThreadLocals);</span><br><span class="line"><span class="comment">// 分配一个线程ID</span></span><br><span class="line">tid = nextThreadID();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述过程中，一个新构造的线程对象是由其parent线程来进行空间分配的，而child线程<br>继承了parent是否为Daemon、优先级和加载资源的contextClassLoader以及可继承的<br>ThreadLocal，同时还会分配一个唯一的ID来标识这个child线程。至此，一个能够运行的线程对<br>象就初始化好了，在堆内存中等待着运行。</p><h3 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h3><p>线程对象在初始化完成之后，调用start()方法就可以启动这个线程。线程start()方法的含义<br>是：当前线程（即parent线程）同步告知Java虚拟机，只要线程规划器空闲，应立即启动调用<br>start()方法的线程。</p><blockquote><p>启动一个线程前，最好为这个线程设置线程名称，因为这样在使用jstack分析程<br>序或者进行问题排查时，就会给开发人员提供一些提示，自定义的线程最好能够起个名字。</p></blockquote><h3 id="理解中断"><a href="#理解中断" class="headerlink" title="理解中断"></a>理解中断</h3><p>中断可以理解为线程的一个标识位属性，它表示一个运行中的线程是否被其他线程进行<br>了中断操作。中断好比其他线程对该线程打了个招呼，其他线程通过调用该线程的interrupt()<br>方法对其进行中断操作。<br>线程通过检查自身是否被中断来进行响应，线程通过方法isInterrupted()来进行判断是否<br>被中断，也可以调用静态方法Thread.interrupted()对当前线程的中断标识位进行复位。如果该<br>线程已经处于终结状态，即使该线程被中断过，在调用该线程对象的isInterrupted()时依旧会返<br>回false。<br>从Java的API中可以看到，许多声明抛出InterruptedException的方法（例如Thread.sleep(long<br>millis)方法）这些方法在抛出InterruptedException之前，Java虚拟机会先将该线程的中断标识位<br>清除，然后抛出InterruptedException，此时调用isInterrupted()方法将会返回false。<br>在代码清单4-7所示的例子中，首先创建了两个线程，SleepThread和BusyThread，前者不停<br>地睡眠，后者一直运行，然后对这两个线程分别进行中断操作，观察二者的中断标识位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interrupted</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// sleepThread不停的尝试睡眠</span></span><br><span class="line">Thread sleepThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> SleepRunner(), <span class="string">"SleepThread"</span>);</span><br><span class="line">sleepThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// busyThread不停的运行</span></span><br><span class="line">Thread busyThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> BusyRunner(), <span class="string">"BusyThread"</span>);</span><br><span class="line">busyThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">sleepThread.start();</span><br><span class="line">busyThread.start();</span><br><span class="line"><span class="comment">// 休眠5秒，让sleepThread和busyThread充分运行</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">sleepThread.interrupt();</span><br><span class="line">busyThread.interrupt();</span><br><span class="line">System.out.println(<span class="string">"SleepThread interrupted is "</span> + sleepThread.isInterrupted());</span><br><span class="line">System.out.println(<span class="string">"BusyThread interrupted is "</span> + busyThread.isInterrupted());</span><br><span class="line"><span class="comment">// 防止sleepThread和busyThread立刻退出</span></span><br><span class="line">SleepUtils.second(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">SleepUtils.second(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BusyRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出如下</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SleepThread interrupted <span class="keyword">is</span> <span class="literal">false</span></span><br><span class="line">BusyThread interrupted <span class="keyword">is</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>从结果可以看出，抛出InterruptedException的线程SleepThread，其中断标识位被清除了，<br>而一直忙碌运作的线程BusyThread，中断标识位没有被清除。</p><h3 id="过期的suspend-、resume-和stop"><a href="#过期的suspend-、resume-和stop" class="headerlink" title="过期的suspend()、resume()和stop()"></a>过期的suspend()、resume()和stop()</h3><p>大家对于CD机肯定不会陌生，如果把它播放音乐比作一个线程的运作，那么对音乐播放<br>做出的暂停、恢复和停止操作对应在线程Thread的API就是suspend()、resume()和stop()。<br>在代码清单4-8所示的例子中，创建了一个线程PrintThread，它以1秒的频率进行打印，而<br>主线程对其进行暂停、恢复和停止操作。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deprecated</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) throws Exception &#123;</span><br><span class="line">DateFormat format = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line">Thread printThread = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">Runner</span>(), <span class="string">"PrintThread"</span>);</span><br><span class="line">printThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">printThread.start();</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 将PrintThread进行暂停，输出内容工作停止</span></span><br><span class="line">printThread.suspend();</span><br><span class="line">System.out.println(<span class="string">"main suspend PrintThread at "</span> + format.format(<span class="keyword">new</span> <span class="type">Date</span>()));</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 将PrintThread进行恢复，输出内容继续</span></span><br><span class="line">printThread.resume();</span><br><span class="line">System.out.println(<span class="string">"main resume PrintThread at "</span> + format.format(<span class="keyword">new</span> <span class="type">Date</span>()));</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 将PrintThread进行终止，输出内容停止</span></span><br><span class="line">printThread.stop();</span><br><span class="line">System.out.println(<span class="string">"main stop PrintThread at "</span> + format.format(<span class="keyword">new</span> <span class="type">Date</span>()));</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Runnable</span></span> </span>&#123;</span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> void run() &#123;</span><br><span class="line">DateFormat format = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" Run at "</span> +</span><br><span class="line">format.format(<span class="keyword">new</span> <span class="type">Date</span>()));</span><br><span class="line">SleepUtils.second(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出如下（输出内容中的时间与示例执行的具体时间相关）。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">PrintThread</span> <span class="selector-tag">Run</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:34</span><span class="selector-pseudo">:36</span></span><br><span class="line"><span class="selector-tag">PrintThread</span> <span class="selector-tag">Run</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:34</span><span class="selector-pseudo">:37</span></span><br><span class="line"><span class="selector-tag">PrintThread</span> <span class="selector-tag">Run</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:34</span><span class="selector-pseudo">:38</span></span><br><span class="line"><span class="selector-tag">main</span> <span class="selector-tag">suspend</span> <span class="selector-tag">PrintThread</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:34</span><span class="selector-pseudo">:39</span></span><br><span class="line"><span class="selector-tag">main</span> <span class="selector-tag">resume</span> <span class="selector-tag">PrintThread</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:34</span><span class="selector-pseudo">:42</span></span><br><span class="line"><span class="selector-tag">PrintThread</span> <span class="selector-tag">Run</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:34</span><span class="selector-pseudo">:42</span></span><br><span class="line"><span class="selector-tag">PrintThread</span> <span class="selector-tag">Run</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:34</span><span class="selector-pseudo">:43</span></span><br><span class="line"><span class="selector-tag">PrintThread</span> <span class="selector-tag">Run</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:34</span><span class="selector-pseudo">:44</span></span><br><span class="line"><span class="selector-tag">main</span> <span class="selector-tag">stop</span> <span class="selector-tag">PrintThread</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:34</span><span class="selector-pseudo">:45</span></span><br></pre></td></tr></table></figure><p>在执行过程中，PrintThread运行了3秒，随后被暂停，3秒后恢复，最后经过3秒被终止。<br>通过示例的输出可以看到，suspend()、resume()和stop()方法完成了线程的暂停、恢复和终<br>止工作，而且非常“人性化”。但是这些API是过期的，也就是不建议使用的。<br>不建议使用的原因主要有：以suspend()方法为例，在调用后，线程不会释放已经占有的资<br>源（比如锁），而是占有着资源进入睡眠状态，这样容易引发死锁问题。同样，stop()方法在终结<br>一个线程时不会保证线程的资源正常释放，通常是没有给予线程完成资源释放工作的机会，<br>因此会导致程序可能工作在不确定状态下。</p><blockquote><p>正因为suspend()、resume()和stop()方法带来的副作用，这些方法才被标注为不建<br>议使用的过期方法，而暂停和恢复操作可以用后面提到的等待/通知机制来替代</p></blockquote><h3 id="安全地终止线程"><a href="#安全地终止线程" class="headerlink" title="安全地终止线程"></a>安全地终止线程</h3><p>在4.2.3节中提到的中断状态是线程的一个标识位，而中断操作是一种简便的线程间交互<br>方式，而这种交互方式最适合用来取消或停止任务。除了中断以外，还可以利用一个boolean变<br>量来控制是否需要停止任务并终止该线程。<br>在代码清单4-9所示的例子中，创建了一个线程CountThread，它不断地进行变量累加，而<br>主线程尝试对其进行中断操作和停止操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shutdown</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Runner one = <span class="keyword">new</span> Runner();</span><br><span class="line">Thread countThread = <span class="keyword">new</span> Thread(one, <span class="string">"CountThread"</span>);</span><br><span class="line">countThread.start();</span><br><span class="line"><span class="comment">// 睡眠1秒，main线程对CountThread进行中断，使CountThread能够感知中断而结束</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">countThread.interrupt();</span><br><span class="line">Runner two = <span class="keyword">new</span> Runner();</span><br><span class="line">countThread = <span class="keyword">new</span> Thread(two, <span class="string">"CountThread"</span>);</span><br><span class="line">countThread.start();</span><br><span class="line"><span class="comment">// 睡眠1秒，main线程对Runner two进行取消，使CountThread能够感知on为false而结束</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">two.cancel();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> i;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> on = <span class="keyword">true</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (on &amp;&amp; !Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"Count i = "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">on = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果如下所示（输出内容可能不同）。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Count <span class="selector-tag">i</span> = <span class="number">543487324</span></span><br><span class="line">Count <span class="selector-tag">i</span> = <span class="number">540898082</span></span><br></pre></td></tr></table></figure></p></blockquote><p>示例在执行过程中，main线程通过中断操作和cancel()方法均可使CountThread得以终止。<br>这种通过标识位或者中断操作的方式能够使线程在终止时有机会去清理资源，而不是武断地<br>将线程停止，因此这种终止线程的做法显得更加安全和优雅。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;构造线程&quot;&gt;&lt;a href=&quot;#构造线程&quot; class=&quot;headerlink&quot; title=&quot;构造线程&quot;&gt;&lt;/a&gt;构造线程&lt;/h3&gt;&lt;p&gt;在运行线程之前首先要构造一个线程对象，线程对象在构造的时候需要提供线程所需要&lt;br&gt;的属性，如线程所属的线程组、线程优先级、是否是Daemon线程等信息。代码清单4-6所示的&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="启动和终止线程" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%90%AF%E5%8A%A8%E5%92%8C%E7%BB%88%E6%AD%A2%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="//aha.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="启动和终止线程" scheme="//aha.me/tags/%E5%90%AF%E5%8A%A8%E5%92%8C%E7%BB%88%E6%AD%A2%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Daemon线程</title>
    <link href="//aha.me/2019/01/28/Daemon%E7%BA%BF%E7%A8%8B/"/>
    <id>//aha.me/2019/01/28/Daemon线程/</id>
    <published>2019-01-28T09:24:05.000Z</published>
    <updated>2019-02-16T12:14:27.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Daemon线程"><a href="#Daemon线程" class="headerlink" title="Daemon线程"></a>Daemon线程</h3><p>Daemon线程是一种支持型线程，因为它主要被用作程序中后台调度以及支持性工作。这<br>意味着，当一个Java虚拟机中不存在非Daemon线程的时候，Java虚拟机将会退出。可以通过调<br>用Thread.setDaemon(true)将线程设置为Daemon线程。</p><a id="more"></a><blockquote><p>Daemon属性需要在启动线程之前设置，不能在启动线程之后设置。</p></blockquote><p>Daemon线程被用作完成支持性工作，但是在Java虚拟机退出时Daemon线程中的finally块<br>并不一定会执行，示例如代码清单4-5所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Daemon</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> DaemonRunner(), <span class="string">"DaemonRunner"</span>);</span><br><span class="line">thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">thread.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SleepUtils.second(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"DaemonThread finally run."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行Daemon程序，可以看到在终端或者命令提示符上没有任何输出。main线程（非<br>Daemon线程）在启动了线程DaemonRunner之后随着main方法执行完毕而终止，而此时Java虚拟<br>机中已经没有非Daemon线程，虚拟机需要退出。Java虚拟机中的所有Daemon线程都需要立即<br>终止，因此DaemonRunner立即终止，但是DaemonRunner中的finally块并没有执行。</p><blockquote><p>在构建Daemon线程时，不能依靠finally块中的内容来确保执行关闭或清理资源<br>的逻辑。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Daemon线程&quot;&gt;&lt;a href=&quot;#Daemon线程&quot; class=&quot;headerlink&quot; title=&quot;Daemon线程&quot;&gt;&lt;/a&gt;Daemon线程&lt;/h3&gt;&lt;p&gt;Daemon线程是一种支持型线程，因为它主要被用作程序中后台调度以及支持性工作。这&lt;br&gt;意味着，当一个Java虚拟机中不存在非Daemon线程的时候，Java虚拟机将会退出。可以通过调&lt;br&gt;用Thread.setDaemon(true)将线程设置为Daemon线程。&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="//aha.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="多线程基础" scheme="//aha.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>线程的状态</title>
    <link href="//aha.me/2019/01/28/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81/"/>
    <id>//aha.me/2019/01/28/线程的状态/</id>
    <published>2019-01-28T09:17:47.000Z</published>
    <updated>2019-02-16T12:14:27.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>Java线程在运行的生命周期中可能处于表4-1所示的6种不同的状态，在给定的一个时刻，<br>线程只能处于其中的一个状态。</p><a id="more"></a><p><img src="/assets/img/20190128171921.png" alt="32361-20180530095349427-444141538.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;线程的状态&quot;&gt;&lt;a href=&quot;#线程的状态&quot; class=&quot;headerlink&quot; title=&quot;线程的状态&quot;&gt;&lt;/a&gt;线程的状态&lt;/h3&gt;&lt;p&gt;Java线程在运行的生命周期中可能处于表4-1所示的6种不同的状态，在给定的一个时刻，&lt;br&gt;线程只能处于其中的一个状态。&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="//aha.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="多线程基础" scheme="//aha.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>线程优先级</title>
    <link href="//aha.me/2019/01/28/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>//aha.me/2019/01/28/线程优先级/</id>
    <published>2019-01-28T09:10:48.000Z</published>
    <updated>2019-02-16T12:14:27.389Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>现代操作系统基本采用时分的形式调度运行的线程，操作系统会分出一个个时间片，线<br>程会分配到若干时间片，当线程的时间片用完了就会发生线程调度，并等待着下次分配。线程<br>分配到的时间片多少也就决定了线程使用处理器资源的多少，而线程优先级就是决定线程需<br>要多或者少分配一些处理器资源的线程属性。</p><a id="more"></a><p>在Java线程中，通过一个整型成员变量priority来控制优先级，优先级的范围从1~10，在线<br>程构建的时候可以通过setPriority(int)方法来修改优先级，默认优先级是5，优先级高的线程分<br>配时间片的数量要多于优先级低的线程。设置线程优先级时，针对频繁阻塞（休眠或者I/O操<br>作）的线程需要设置较高优先级，而偏重计算（需要较多CPU时间或者偏运算）的线程则设置较<br>低的优先级，确保处理器不会被独占。在不同的JVM以及操作系统上，线程规划会存在差异，<br>有些操作系统甚至会忽略对线程优先级的设定，示例如代码清单4-2所示。</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Priority</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> volatile <span class="keyword">boolean</span> notStart = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> volatile <span class="keyword">boolean</span> notEnd = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(String[] args) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line"><span class="keyword">List</span>&lt;Job&gt; jobs = <span class="keyword">new</span> ArrayList&lt;Job&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> priority = i &lt; <span class="number">5</span> Thread.MIN_PRIORITY : Thread.MAX_PRIORITY;</span><br><span class="line">Job job = <span class="keyword">new</span> Job(priority);</span><br><span class="line">jobs.add(job);</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(job, <span class="string">"Thread:"</span> + i);</span><br><span class="line">thread.setPriority(priority);</span><br><span class="line">thread.start();</span><br><span class="line">&#125;</span><br><span class="line">notStart = <span class="keyword">false</span>;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">notEnd = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (Job job : jobs) &#123;</span><br><span class="line">System.out.println(<span class="string">"Job Priority : "</span> + job.priority + <span class="string">",</span></span><br><span class="line"><span class="string">Count : "</span> + job.jobCount);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Job</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> priority;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> jobCount;</span><br><span class="line"><span class="keyword">public</span> Job(<span class="keyword">int</span> priority) &#123;</span><br><span class="line">this.priority = priority;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> void run() &#123;</span><br><span class="line"><span class="keyword">while</span> (notStart) &#123;</span><br><span class="line">Thread.<span class="keyword">yield</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (notEnd) &#123;</span><br><span class="line">Thread.<span class="keyword">yield</span>();</span><br><span class="line">jobCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Job Priority : 1, <span class="type">Count</span> : 1259592</span><br><span class="line">Job Priority : 1, <span class="type">Count</span> : 1260717</span><br><span class="line">Job Priority : 1, <span class="type">Count</span> : 1264510</span><br><span class="line">Job Priority : 1, <span class="type">Count</span> : 1251897</span><br><span class="line">Job Priority : 1, <span class="type">Count</span> : 1264060</span><br><span class="line">Job Priority : 10, <span class="type">Count</span> : 1256938</span><br><span class="line">Job Priority : 10, <span class="type">Count</span> : 1267663</span><br><span class="line">Job Priority : 10, <span class="type">Count</span> : 1260637</span><br><span class="line">Job Priority : 10, <span class="type">Count</span> : 1261705</span><br><span class="line">Job Priority : 10, <span class="type">Count</span> : 1259967</span><br></pre></td></tr></table></figure><p>*** 从输出可以看到线程优先级没有生效，优先级1和优先级10的Job计数的结果非常相近，<br>没有明显差距。这表示程序正确性不能依赖线程的优先级高低。<br>线程优先级不能作为程序正确性的依赖，因为操作系统可以完全不用理会Java<br>线程对于优先级的设定。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;线程优先级&quot;&gt;&lt;a href=&quot;#线程优先级&quot; class=&quot;headerlink&quot; title=&quot;线程优先级&quot;&gt;&lt;/a&gt;线程优先级&lt;/h3&gt;&lt;p&gt;现代操作系统基本采用时分的形式调度运行的线程，操作系统会分出一个个时间片，线&lt;br&gt;程会分配到若干时间片，当线程的时间片用完了就会发生线程调度，并等待着下次分配。线程&lt;br&gt;分配到的时间片多少也就决定了线程使用处理器资源的多少，而线程优先级就是决定线程需&lt;br&gt;要多或者少分配一些处理器资源的线程属性。&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="//aha.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="多线程基础" scheme="//aha.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>双重检查锁定与延迟初始化</title>
    <link href="//aha.me/2019/01/28/%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5%E9%94%81%E5%AE%9A%E4%B8%8E%E5%BB%B6%E8%BF%9F%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>//aha.me/2019/01/28/双重检查锁定与延迟初始化/</id>
    <published>2019-01-28T08:37:02.000Z</published>
    <updated>2019-02-16T12:14:27.386Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在Java多线程程序中，有时候需要采用延迟初始化来降低初始化类和创建对象的&gt; 开销。双<br>重检查锁定是常见的延迟初始化技术，但它是一个错误的用法。本文将分析双重<br>检查锁定的<br>错误根源，以及两种线程安全的延迟初始化方案。</p></blockquote><a id="more"></a><h3 id="双重检查锁定的由来-单例模式"><a href="#双重检查锁定的由来-单例模式" class="headerlink" title="双重检查锁定的由来(单例模式)"></a>双重检查锁定的由来(单例模式)</h3><p>在Java程序中，有时候可能需要推迟一些高开销的对象初始化操作，并且只有在使用这些<br>对象时才进行初始化。此时，程序员可能会采用延迟初始化。但要正确实现线程安全的延迟初<br>始化需要一些技巧，否则很容易出现问题。比如，下面是非线程安全的延迟初始化对象的示例<br>代码</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class UnsafeLazyInitialization &#123;</span><br><span class="line">private<span class="keyword"> static</span> Instance instance;</span><br><span class="line">public<span class="keyword"> static</span> Instance getInstance() &#123;</span><br><span class="line">if (instance == null) // 1：A线程执行</span><br><span class="line">instance =<span class="built_in"> new </span>Instance(); // 2：B线程执行</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在UnsafeLazyInitialization类中，假设A线程执行代码1的同时，B线程执行代码2。此时，线<br>程A可能会看到instance引用的对象还没有完成初始化（出现这种情况的原因见3.8.2节）。<br>对于UnsafeLazyInitialization类，我们可以对getInstance()方法做同步处理来实现线程安全<br>的延迟初始化。示例代码如下。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class SafeLazyInitialization &#123;</span><br><span class="line">  private static<span class="built_in"> Instance </span>instance;public synchronized static<span class="built_in"> Instance </span>getInstance() &#123;</span><br><span class="line">  <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line"> <span class="built_in"> instance </span>= new Instance();</span><br><span class="line">return instance;</span><br></pre></td></tr></table></figure></p><p>由于对getInstance()方法做了同步处理，synchronized将导致性能开销。如果getInstance()方<br>法被多个线程频繁的调用，将会导致程序执行性能的下降。反之，如果getInstance()方法不会被<br>多个线程频繁的调用，那么这个延迟初始化方案将能提供令人满意的性能。</p><p>在早期的JVM中，synchronized（甚至是无竞争的synchronized）存在巨大的性能开销。因此，<br>人们想出了一个“聪明”的技巧：双重检查锁定（Double-Checked Locking）。人们想通过双重检查<br>锁定来降低同步的开销。下面是使用双重检查锁定来实现延迟初始化的示例代码。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckedLocking</span> &#123;</span> <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Instance instance; <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Instance getInstance() &#123; <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123; <span class="comment">// 4:第一次检查</span></span><br><span class="line"><span class="keyword">synchronized</span> (DoubleCheckedLocking.<span class="keyword">class</span>) &#123; <span class="comment">// 5:加锁</span></span><br><span class="line"><span class="keyword">if</span> (instance == <span class="literal">null</span>) <span class="comment">// 6:第二次检查</span></span><br><span class="line">instance = <span class="keyword">new</span> Instance(); <span class="comment">// 7:问题的根源出在这里</span></span><br><span class="line">&#125; <span class="comment">// 8</span></span><br><span class="line">&#125; <span class="comment">// 9</span></span><br><span class="line"><span class="keyword">return</span> instance; <span class="comment">// 10</span></span><br><span class="line">&#125; <span class="comment">// 11</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面代码所示，如果第一次检查instance不为null，那么就不需要执行下面的加锁和初始<br>化操作。因此，可以大幅降低synchronized带来的性能开销。上面代码表面上看起来，似乎两全<br>其美。</p><ul><li>·多个线程试图在同一时间创建对象时，会通过加锁来保证只有一个线程能创建对象。</li><li>·在对象创建好之后，执行getInstance()方法将不需要获取锁，直接返回已创建好的对象。<pre><code>双重检查锁定看起来似乎很完美，但这是一个错误的优化！在线程执行到第4行，代码读取到instance不为null时，**instance引用的对象有可能还没有完成初始化**。</code></pre></li></ul><h3 id="问题的根源"><a href="#问题的根源" class="headerlink" title="问题的根源"></a>问题的根源</h3><p>前面的双重检查锁定示例代码的第7行（instance=new Singleton();）创建了一个对象。这一行代码可以分解为如下的3行伪代码。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memory = allocate(); // 1：分配对象的内存空间</span><br><span class="line">ctorInstance(memory); // 2：初始化对象</span><br><span class="line">instance = memory; // 3：设置instance指向刚分配的内存地址</span><br></pre></td></tr></table></figure><p>上面3行伪代码中的2和3之间，可能会被重排序（在一些JIT编译器上，这种重排序是真实<br>发生的，详情见参考文献1的“Out-of-order writes”部分）。2和3之间重排序之后的执行时序如下。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">memory = allocate(); // 1：分配对象的内存空间</span><br><span class="line">instance = memory; // 3：设置instance指向刚分配的内存地址</span><br><span class="line">// 注意，此时对象还没有被初始化！</span><br><span class="line">ctorInstance(memory); // 2：初始化对象</span><br></pre></td></tr></table></figure><p>根据《The Java Language Specification,Java SE 7 Edition》（后文简称为Java语言规范），所有<br>线程在执行Java程序时必须要遵守intra-thread semantics。intra-thread semantics保证重排序不会<br>改变单线程内的程序执行结果。换句话说，intra-thread semantics允许那些在单线程内，不会改<br>变单线程程序执行结果的重排序。上面3行伪代码的2和3之间虽然被重排序了，但这个重排序<br>并不会违反intra-thread semantics。这个重排序在没有改变单线程程序执行结果的前提下，可以<br>提高程序的执行性能。<br>为了更好地理解intra-thread semantics，请看如图3-37所示的示意图（假设一个线程A在构<br>造对象后，立即访问这个对象）。<br>如图3-37所示，只要保证2排在4的前面，即使2和3之间重排序了，也不会违反intra-thread<br>semantics。</p><h3 id="基于volatile的解决方案"><a href="#基于volatile的解决方案" class="headerlink" title="基于volatile的解决方案"></a>基于volatile的解决方案</h3><p>对于前面的基于双重检查锁定来实现延迟初始化的方案（指DoubleCheckedLocking示例代<br>码），只需要做一点小的修改（把instance声明为volatile型），就可以实现线程安全的延迟初始<br>化。请看下面的示例代码。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class SafeDoubleCheckedLocking &#123;</span><br><span class="line">private volatile<span class="keyword"> static</span> Instance instance;</span><br><span class="line">public<span class="keyword"> static</span> Instance getInstance() &#123;</span><br><span class="line">if (instance == null) &#123;</span><br><span class="line">synchronized (SafeDoubleCheckedLocking.class) &#123;</span><br><span class="line">if (instance == null)</span><br><span class="line">instance =<span class="built_in"> new </span>Instance(); // instance为volatile，现在没问题了</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个解决方案需要JDK 5或更高版本（因为从JDK 5开始使用新的JSR-133内存模<br>型规范，这个规范增强了volatile的语义）。<br>当声明对象的引用为volatile后，3.8.2节中的3行伪代码中的2和3之间的重排序，在多线程<br>环境中将会被禁止。上面示例代码将按如下的时序执行，</p><h3 id="基于类初始化的解决方案"><a href="#基于类初始化的解决方案" class="headerlink" title="基于类初始化的解决方案"></a>基于类初始化的解决方案</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JVM在类的初始化阶段（即在<span class="keyword">Class</span>被加载后，且被线程使用之前），会执行类的初始化。在</span><br><span class="line">执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。</span><br><span class="line">基于这个特性，可以实现另一种线程安全的延迟初始化方案（这个方案被称之为</span><br><span class="line"><span class="keyword">Initialization</span> <span class="keyword">On</span> Demand Holder idiom）。</span><br></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class InstanceFactory &#123;</span><br><span class="line">private<span class="keyword"> static</span> class InstanceHolder &#123;</span><br><span class="line">public<span class="keyword"> static</span> Instance<span class="built_in"> instance </span>=<span class="built_in"> new </span>Instance();</span><br><span class="line">&#125;</span><br><span class="line">public<span class="keyword"> static</span> Instance getInstance() &#123;</span><br><span class="line">return InstanceHolder.instance ; // 这里将导致InstanceHolder类被初始化</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在Java多线程程序中，有时候需要采用延迟初始化来降低初始化类和创建对象的&amp;gt; 开销。双&lt;br&gt;重检查锁定是常见的延迟初始化技术，但它是一个错误的用法。本文将分析双重&lt;br&gt;检查锁定的&lt;br&gt;错误根源，以及两种线程安全的延迟初始化方案。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="多线程" scheme="//aha.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="//aha.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>初始化vue项目指令</title>
    <link href="//aha.me/2019/01/28/%E5%88%9D%E5%A7%8B%E5%8C%96vue%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4/"/>
    <id>//aha.me/2019/01/28/初始化vue项目指令/</id>
    <published>2019-01-28T07:29:32.000Z</published>
    <updated>2019-02-16T12:14:27.385Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-cli-webpack"><a href="#vue-cli-webpack" class="headerlink" title="vue-cli webpack"></a>vue-cli webpack</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install vue-cli -g</span><br><span class="line">vue init webpack</span><br><span class="line"><span class="built_in">npm</span> install</span><br><span class="line"><span class="built_in">npm</span> run dev</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue-cli-webpack&quot;&gt;&lt;a href=&quot;#vue-cli-webpack&quot; class=&quot;headerlink&quot; title=&quot;vue-cli webpack&quot;&gt;&lt;/a&gt;vue-cli webpack&lt;/h3&gt;&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;npm&lt;/span&gt; install vue-cli -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vue init webpack&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;npm&lt;/span&gt; install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;npm&lt;/span&gt; run dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="vue" scheme="//aha.me/categories/vue/"/>
    
    
      <category term="vue" scheme="//aha.me/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>mybatis使用拦截器打印sql</title>
    <link href="//aha.me/2019/01/28/mybatis%E4%BD%BF%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%93%E5%8D%B0sql/"/>
    <id>//aha.me/2019/01/28/mybatis使用拦截器打印sql/</id>
    <published>2019-01-28T07:19:04.000Z</published>
    <updated>2019-02-16T12:14:27.383Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mybatis使用拦截器打印sql"><a href="#mybatis使用拦截器打印sql" class="headerlink" title="mybatis使用拦截器打印sql"></a>mybatis使用拦截器打印sql</h3><a id="more"></a><blockquote><p>pom.xml</p></blockquote><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></span><br><span class="line"><span class="xml">xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yxkj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aha<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">poi.version</span>&gt;</span>3.13<span class="tag">&lt;/<span class="name">poi.version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 数据库 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- thymeleaf --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- poi --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;poi.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-scratchpad<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;poi.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;poi.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- commons-lang3 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- commons-beanutils --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- csv --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.javacsv<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javacsv<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="BaseService"><a href="#BaseService" class="headerlink" title="BaseService"></a>BaseService</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxkj.aha.MybatisConfig;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS, readOnly = <span class="keyword">true</span>, rollbackFor = Exception.class)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseService</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IService</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> Mapper&lt;T&gt; mapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Mapper&lt;T&gt; getMapper() &#123;</span><br><span class="line">        <span class="keyword">return</span> mapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; selectAll() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mapper.<span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">T <span class="title">selectByKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mapper.<span class="title">selectByPrimaryKey</span><span class="params">(key)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mapper.<span class="title">insert</span><span class="params">(entity)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mapper.<span class="title">deleteByPrimaryKey</span><span class="params">(key)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">batchDelete</span><span class="params">(List&lt;String&gt; list, String property, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        Example example = <span class="keyword">new</span> Example(clazz);</span><br><span class="line">        example.createCriteria().andIn(property, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.deleteByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">updateAll</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mapper.<span class="title">updateByPrimaryKey</span><span class="params">(entity)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">updateNotNull</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mapper.<span class="title">updateByPrimaryKeySelective</span><span class="params">(entity)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; selectByExample(Object example) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mapper.<span class="title">selectByExample</span><span class="params">(example)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IService"><a href="#IService" class="headerlink" title="IService"></a>IService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxkj.aha.MybatisConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">selectByKey</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(T entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">batchDelete</span><span class="params">(List&lt;String&gt; list, String property, Class&lt;T&gt; clazz)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateAll</span><span class="params">(T entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateNotNull</span><span class="params">(T entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">selectByExample</span><span class="params">(Object example)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyBatisConfig"><a href="#MyBatisConfig" class="headerlink" title="MyBatisConfig"></a>MyBatisConfig</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.yxkj</span><span class="selector-class">.aha</span><span class="selector-class">.MybatisConfig</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span><span class="selector-class">.condition</span><span class="selector-class">.ConditionalOnProperty</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Bean</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Configuration</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Auther: zch</span></span><br><span class="line"><span class="comment"> * @Date: 2018/12/21 16:02</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="keyword">Configuration</span></span><br><span class="line"><span class="keyword">public</span> class MyBatisConfig &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 sql打印拦截器</span></span><br><span class="line"><span class="comment">     * application.yml中 febs.showsql: true 时生效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return SqlStatementInterceptor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="keyword">Bean</span></span><br><span class="line">    @ConditionalOnProperty(name = <span class="string">"febs.showsql"</span>, havingValue = <span class="string">"true"</span>)</span><br><span class="line">    SqlStatementInterceptor sqlStatementInterceptor() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">SqlStatementInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SqlStatementInterceptor"><a href="#SqlStatementInterceptor" class="headerlink" title="SqlStatementInterceptor"></a>SqlStatementInterceptor</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">package com.yxkj.aha.MybatisConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * @Auther: zch</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * @Date: 2018/12/21 15:57</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * @Description:</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.cache.CacheKey;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.ParameterMapping;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.TypeHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">List</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Intercepts</span>(value = &#123;</span><br><span class="line">        <span class="meta">@Signature</span>(type = Executor.<span class="keyword">class</span>, method = <span class="string">"update"</span>, args = &#123;MappedStatement.<span class="keyword">class</span>, <span class="built_in">Object</span>.<span class="keyword">class</span>&#125;),</span><br><span class="line">        <span class="meta">@Signature</span>(type = Executor.<span class="keyword">class</span>, method = <span class="string">"query"</span>, args = &#123;MappedStatement.<span class="keyword">class</span>, <span class="built_in">Object</span>.<span class="keyword">class</span>, RowBounds.<span class="keyword">class</span>, ResultHandler.<span class="keyword">class</span>, CacheKey.<span class="keyword">class</span>, BoundSql.<span class="keyword">class</span>&#125;),</span><br><span class="line">        <span class="meta">@Signature</span>(type = Executor.<span class="keyword">class</span>, method = <span class="string">"query"</span>, args = &#123;MappedStatement.<span class="keyword">class</span>, <span class="built_in">Object</span>.<span class="keyword">class</span>, RowBounds.<span class="keyword">class</span>, ResultHandler.<span class="keyword">class</span>&#125;)&#125;)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SqlStatementInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="built_in">Object</span> intercept(Invocation invocation) throws Throwable &#123;</span><br><span class="line">        <span class="built_in">Object</span> returnValue;</span><br><span class="line">        long start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 执行 SQL语句</span></span><br><span class="line">        returnValue = invocation.proceed();</span><br><span class="line">        long end = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 耗时</span></span><br><span class="line">        long time = end - start;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="built_in">Object</span>[] args = invocation.getArgs();</span><br><span class="line">            MappedStatement ms = (MappedStatement) args[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">Object</span> parameter = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//获取参数，if语句成立，表示sql语句有参数，参数格式是map形式</span></span><br><span class="line">            <span class="keyword">if</span> (args.length &gt; <span class="number">1</span>)</span><br><span class="line">                parameter = invocation.getArgs()[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 获取到节点的 id,即 sql语句的 id</span></span><br><span class="line">            <span class="built_in">String</span> sqlId = ms.getId();</span><br><span class="line">            <span class="comment">// BoundSql就是封装 MyBatis最终产生的 sql类</span></span><br><span class="line">            BoundSql boundSql = ms.getBoundSql(parameter);</span><br><span class="line">            <span class="comment">// 获取节点的配置</span></span><br><span class="line">            Configuration configuration = ms.getConfiguration();</span><br><span class="line">            <span class="comment">// 获取到最终的 sql语句</span></span><br><span class="line">            printSql(configuration, boundSql, sqlId, time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"sql拦截异常:&#123;&#125; "</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">void</span> printSql(Configuration configuration, BoundSql boundSql, <span class="built_in">String</span> sqlId, long time) &#123;</span><br><span class="line">        <span class="built_in">String</span> sql = showSql(configuration, boundSql);</span><br><span class="line">        logger.info(<span class="string">"【SQL语句Id】&gt;&gt;&gt;&gt; &#123;&#125;"</span>, sqlId);</span><br><span class="line">        logger.info(<span class="string">"【SQL语句耗时】&gt;&gt;&gt;&gt; &#123;&#125; ms"</span>, time);</span><br><span class="line">        logger.info(<span class="string">"【SQL语句】&gt;&gt;&gt;&gt; &#123;&#125;"</span>, sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">String</span> getParameterValue(<span class="built_in">Object</span> obj) &#123;</span><br><span class="line">        <span class="built_in">String</span> value = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj instanceof <span class="built_in">String</span>) &#123;</span><br><span class="line">            value = <span class="string">"'"</span> + obj.toString() + <span class="string">"'"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj instanceof Date) &#123;</span><br><span class="line">            DateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.CHINA);</span><br><span class="line">            value = <span class="string">"'"</span> + formatter.format(<span class="keyword">new</span> Date()) + <span class="string">"'"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">                value = obj.toString();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                value = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">String</span> showSql(Configuration configuration, BoundSql boundSql) &#123;</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        <span class="built_in">Object</span> parameterObject = boundSql.getParameterObject();</span><br><span class="line">        <span class="built_in">List</span>&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">        <span class="comment">// sql语句中多个空格都用一个空格代替</span></span><br><span class="line">        <span class="built_in">String</span> sql = boundSql.getSql().replaceAll(<span class="string">"[\\s]+"</span>, <span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(parameterMappings) &amp;&amp; parameterObject != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取类型处理器注册器，类型处理器的功能是进行java类型和数据库类型的转换　　　　　　</span></span><br><span class="line">            <span class="comment">// 如果根据 parameterObject.getClass(）可以找到对应的类型，则替换</span></span><br><span class="line">            TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();</span><br><span class="line">            <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">                sql = sql.replaceFirst(<span class="string">"\\?"</span>, Matcher.quoteReplacement(getParameterValue(parameterObject)));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// MetaObject主要是封装了 originalObject对象，提供了 get和 set的方法用于获取和设置 originalObject的属性值</span></span><br><span class="line">                <span class="comment">// 主要支持对 JavaBean、Collection、Map三种类型对象的操作</span></span><br><span class="line">                MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class="line">                <span class="keyword">for</span> (ParameterMapping parameterMapping : parameterMappings) &#123;</span><br><span class="line">                    <span class="built_in">String</span> propertyName = parameterMapping.getProperty();</span><br><span class="line">                    <span class="keyword">if</span> (metaObject.hasGetter(propertyName)) &#123;</span><br><span class="line">                        <span class="built_in">Object</span> obj = metaObject.getValue(propertyName);</span><br><span class="line">                        sql = sql.replaceFirst(<span class="string">"\\?"</span>, Matcher.quoteReplacement(getParameterValue(obj)));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class="line">                        <span class="built_in">Object</span> obj = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">                        <span class="comment">// 该分支是动态 sql</span></span><br><span class="line">                        sql = sql.replaceFirst(<span class="string">"\\?"</span>, Matcher.quoteReplacement(getParameterValue(obj)));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sql = sql.replaceFirst(<span class="string">"\\?"</span>, <span class="string">"缺失"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="built_in">Object</span> plugin(<span class="built_in">Object</span> arg0) &#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(arg0, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="keyword">void</span> setProperties(Properties properties) &#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span><span class="bullet">-01</span><span class="bullet">-28</span> <span class="number">14</span><span class="string">:33:54.439</span>  <span class="string">INFO</span> <span class="number">31604</span> <span class="meta">---</span> <span class="string">[</span>           <span class="string">main]</span> <span class="string">c.y.a.M.SqlStatementInterceptor</span>          <span class="string">:</span> <span class="string">【SQL语句Id】&gt;&gt;&gt;&gt;</span> <span class="string">com.yxkj.aha.dao.RoleDao.findAll</span></span><br><span class="line"><span class="number">2019</span><span class="bullet">-01</span><span class="bullet">-28</span> <span class="number">14</span><span class="string">:33:54.439</span>  <span class="string">INFO</span> <span class="number">31604</span> <span class="meta">---</span> <span class="string">[</span>           <span class="string">main]</span> <span class="string">c.y.a.M.SqlStatementInterceptor</span>          <span class="string">:</span> <span class="string">【SQL语句耗时】&gt;&gt;&gt;&gt;</span> <span class="number">79</span> <span class="string">ms</span></span><br><span class="line"><span class="number">2019</span><span class="bullet">-01</span><span class="bullet">-28</span> <span class="number">14</span><span class="string">:33:54.439</span>  <span class="string">INFO</span> <span class="number">31604</span> <span class="meta">---</span> <span class="string">[</span>           <span class="string">main]</span> <span class="string">c.y.a.M.SqlStatementInterceptor</span>          <span class="string">:</span> <span class="string">【SQL语句】&gt;&gt;&gt;&gt;</span> <span class="string">SELECT</span> <span class="string">id,alias</span> <span class="string">FROM</span> <span class="string">role</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.tuicool.com/articles/7bYjUn" target="_blank" rel="noopener">http://www.tuicool.com/articles/7bYjUn</a></p><p><a href="http://www.cnblogs.com/xdp-gacl/p/4262895.html" target="_blank" rel="noopener">http://www.cnblogs.com/xdp-gacl/p/4262895.html</a></p><p><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/index.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mybatis使用拦截器打印sql&quot;&gt;&lt;a href=&quot;#mybatis使用拦截器打印sql&quot; class=&quot;headerlink&quot; title=&quot;mybatis使用拦截器打印sql&quot;&gt;&lt;/a&gt;mybatis使用拦截器打印sql&lt;/h3&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
      <category term="mybatis" scheme="//aha.me/categories/springBoot/mybatis/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>springBoot整合mybatis及poi注解导出控制台输出sql语句</title>
    <link href="//aha.me/2019/01/28/springBoot%E6%95%B4%E5%90%88mybatis%E5%8F%8Apoi%E6%B3%A8%E8%A7%A3%E5%AF%BC%E5%87%BA%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BAsql%E8%AF%AD%E5%8F%A5/"/>
    <id>//aha.me/2019/01/28/springBoot整合mybatis及poi注解导出，控制台输出sql语句/</id>
    <published>2019-01-28T07:04:21.000Z</published>
    <updated>2019-02-16T12:14:27.384Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单整合mybatis"><a href="#简单整合mybatis" class="headerlink" title="简单整合mybatis"></a>简单整合mybatis</h3><blockquote><p>pom.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://10.255.1.5:3306/spdb?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">infosys668</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">      pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">      filters:</span></span><br><span class="line">            <span class="string">commons-log.connection-logger-name:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">      time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">      min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">      validation-query:</span> <span class="string">select</span> <span class="number">1</span> <span class="string">from</span> <span class="string">dual</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># type-aliases扫描路径</span></span><br><span class="line">  <span class="comment"># type-aliases-package:</span></span><br><span class="line">  <span class="comment"># mapper xml实现扫描路径</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span> <span class="string">扫描到的xml</span></span><br><span class="line"><span class="attr">  property:</span></span><br><span class="line"><span class="attr">    order:</span> <span class="string">BEFORE</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.yxkj.aha.entity</span> <span class="string">该实体类的位置</span></span><br></pre></td></tr></table></figure><h3 id="RoleDao"><a href="#RoleDao" class="headerlink" title="RoleDao"></a>RoleDao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Role</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">-7790334862410409053</span>L;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">Long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String alias;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RoleDao-xml"><a href="#RoleDao-xml" class="headerlink" title="RoleDao.xml"></a>RoleDao.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yxkj.aha.dao.RoleDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span>  <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> <span class="attr">resultType</span>=<span class="string">"role"</span> &gt;</span></span><br><span class="line">        SELECT id,alias FROM role</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/zch2017lrf/mybatisAndExecelAndprint" target="_blank" rel="noopener">源码地址</a></p>]]></content>
    
    <summary type="html">
    
      springBoot整合mybatis及poi注解导出控制台输出sql语句
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
      <category term="mybatis" scheme="//aha.me/categories/springBoot/mybatis/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot中使用过滤器和拦截器</title>
    <link href="//aha.me/2019/01/28/Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>//aha.me/2019/01/28/Spring-Boot中使用过滤器和拦截器/</id>
    <published>2019-01-28T02:10:00.000Z</published>
    <updated>2019-02-16T12:14:27.380Z</updated>
    
    <content type="html"><![CDATA[<p>过滤器（Filter）和拦截器（Interceptor）是Web项目中常用的两个功能，本文将简单介绍在Spring Boot中使用过滤器和拦截器来计算Controller中方法的执行时长，并且简单对比两者的区别。</p><p>现有如下Controller：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line">    public void get(<span class="variable">@PathVariable</span> String id) &#123;</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面通过配置过滤器和拦截器来实现对get方法执行时间计算的功能。</p><a id="more"></a><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>定义一个TimeFilter类，实现javax.servlet.Filter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"过滤器初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始执行过滤器"</span>);</span><br><span class="line">        Long start = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"【过滤器】耗时 "</span> + (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">        System.out.println(<span class="string">"结束执行过滤器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"过滤器销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TimeFilter重写了Filter的三个方法，方法名称已经很直白的描述了其作用，这里不再赘述。</p><p>要使该过滤器在Spring Boot中生效，还需要一些配置。这里主要有两种配置方式。</p><blockquote><p>配置方式一</p></blockquote><p>可通过在TimeFilter上加上如下注解：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Component</span></span><br><span class="line"><span class="variable">@WebFilter</span>(urlPatterns = &#123;<span class="string">"/*"</span>&#125;)</span><br><span class="line">public class TimeFilter implements Filter &#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Component注解让TimeFilter成为Spring上下文中的一个Bean，@WebFilter注解的urlPatterns属性配置了哪些请求可以进入该过滤器，/*表示所有请求。</p><p>启动项目时可以看到控制台输出了过滤器初始化，启动后访问<a href="http://localhost:8080/user/1，控制台输出如下：" target="_blank" rel="noopener">http://localhost:8080/user/1，控制台输出如下：</a></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开始执行过滤器</span><br><span class="line"><span class="number">1</span></span><br><span class="line">【过滤器】耗时 <span class="number">31</span></span><br><span class="line">结束执行过滤器</span><br></pre></td></tr></table></figure><blockquote><p>配置方式二</p></blockquote><p>除了在过滤器类上加注解外，我们也可以通过FilterRegistrationBean来注册过滤器。</p><p>定义一个WebConfig类，加上@Configuration注解表明其为配置类，然后通过FilterRegistrationBean来注册过滤器:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> @Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean timeFilter() &#123;</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> <span class="type">FilterRegistrationBean</span>();</span><br><span class="line">        TimeFilter timeFilter = <span class="keyword">new</span> <span class="type">TimeFilter</span>();</span><br><span class="line">        filterRegistrationBean.setFilter(timeFilter);</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; urlList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        urlList.add(<span class="string">"/*"</span>);</span><br><span class="line"></span><br><span class="line">        filterRegistrationBean.setUrlPatterns(urlList);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FilterRegistrationBean除了注册过滤器TimeFilter外还通过setUrlPatterns方法配置了URL匹配规则。重启项目访问<a href="http://localhost:8080/user/1，我们可以看到和上面一样的效果。" target="_blank" rel="noopener">http://localhost:8080/user/1，我们可以看到和上面一样的效果。</a></p><blockquote><p>通过过滤器我们只可以获取到servletRequest对象，所以并不能获取到方法的名称，所属类，参数等额外的信息。</p></blockquote><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>定义一个TimeInterceptor类，实现org.springframework.web.servlet.HandlerInterceptor接口:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TimeInterceptor <span class="keyword">implements</span> HandlerInterceptor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"处理拦截之前"</span>);</span><br><span class="line">        httpServletRequest.setAttribute(<span class="string">"startTime"</span>, <span class="keyword">new</span> Date().getTime());</span><br><span class="line">        System.out.<span class="keyword">println</span>(((HandlerMethod) o).getBean().getClass().getName());</span><br><span class="line">        System.out.<span class="keyword">println</span>(((HandlerMethod) o).getMethod().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"开始处理拦截"</span>);</span><br><span class="line">        <span class="keyword">Long</span> start = (<span class="keyword">Long</span>) httpServletRequest.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"【拦截器】耗时 "</span> + (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"处理拦截之后"</span>);</span><br><span class="line">        <span class="keyword">Long</span> start = (<span class="keyword">Long</span>) httpServletRequest.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"【拦截器】耗时 "</span> + (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"异常信息 "</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TimeInterceptor实现了HandlerInterceptor接口的三个方法。preHandle方法在处理拦截之前执行，postHandle只有当被拦截的方法没有抛出异常成功时才会处理，afterCompletion方法无论被拦截的方法抛出异常与否都会执行。</p><p>通过这三个方法的参数可以看到，相较于过滤器，拦截器多了Object和Exception对象，所以可以获取的信息比过滤器要多的多。但过滤器仍无法获取到方法的参数等信息，我们可以通过切面编程来实现这个目的，具体可参考<a href="https://mrbird.cc/Spring-Boot-AOP%20log.html。" target="_blank" rel="noopener">https://mrbird.cc/Spring-Boot-AOP%20log.html。</a></p><p>要使拦截器在Spring Boot中生效，还需要如下两步配置：</p><p>1.在拦截器类上加入@Component注解；</p><p>2.在WebConfig中通过InterceptorRegistry注册过滤器:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TimeInterceptor</span> timeInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void addInterceptors(<span class="type">InterceptorRegistry</span> registry) &#123;</span><br><span class="line">        registry.addInterceptor(timeInterceptor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，访问<a href="http://localhost:8080/user/1，控制台输出如下：" target="_blank" rel="noopener">http://localhost:8080/user/1，控制台输出如下：</a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">处理拦截之前</span><br><span class="line">cc<span class="selector-class">.mrbird</span><span class="selector-class">.controller</span><span class="selector-class">.UserController</span></span><br><span class="line">get</span><br><span class="line"><span class="number">1</span></span><br><span class="line">开始处理拦截</span><br><span class="line">【拦截器】耗时 <span class="number">24</span></span><br><span class="line">处理拦截之后</span><br><span class="line">【拦截器】耗时 <span class="number">24</span></span><br><span class="line">异常信息 null</span><br></pre></td></tr></table></figure></p><p>从输出中我们可以了解到三个方法的执行顺序，并且三个方法都被执行了。</p><p>我们在UserController的get方法中手动抛出一个异常：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="variable">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line">public void get(<span class="variable">@PathVariable</span> String id) &#123;</span><br><span class="line">    <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(id);</span><br><span class="line">    <span class="selector-tag">throw</span> <span class="selector-tag">new</span> <span class="selector-tag">RuntimeException</span>(<span class="string">"user not exist"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启项目后，访问<a href="http://localhost:8080/user/1，控制台输出如下：" target="_blank" rel="noopener">http://localhost:8080/user/1，控制台输出如下：</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">处理拦截之前</span><br><span class="line">cc.mrbird.controller.UserController</span><br><span class="line">get</span><br><span class="line">1</span><br><span class="line">处理拦截之后</span><br><span class="line">【拦截器】耗时 0</span><br><span class="line">异常信息 java.lang.RuntimeException:<span class="built_in"> user </span><span class="keyword">not</span> exist</span><br></pre></td></tr></table></figure><p>可看到，postHandle方法并没有被执行。</p><h3 id="执行时机对比"><a href="#执行时机对比" class="headerlink" title="执行时机对比"></a>执行时机对比</h3><p>我们将过滤器和拦截器都配置上，然后启动项目访问<a href="http://localhost:8080/user/1：" target="_blank" rel="noopener">http://localhost:8080/user/1：</a><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">开始执行过滤器</span><br><span class="line">处理拦截之前</span><br><span class="line">cc.mrbird.controller.UserController</span><br><span class="line">get</span><br><span class="line"><span class="number">1</span></span><br><span class="line">开始处理拦截</span><br><span class="line">【拦截器】耗时 <span class="number">25</span></span><br><span class="line">处理拦截之后</span><br><span class="line">【拦截器】耗时 <span class="number">25</span></span><br><span class="line">异常信息 null</span><br><span class="line">【过滤器】耗时 <span class="number">34</span></span><br><span class="line">结束执行过滤器</span><br></pre></td></tr></table></figure></p><p>可看到过滤器要先于拦截器执行，晚于拦截器结束。下图很好的描述了它们的执行时间区别：</p><p><img src="/assets/img/32361-20180530095349427-444141538.png" alt="32361-20180530095349427-444141538.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过滤器（Filter）和拦截器（Interceptor）是Web项目中常用的两个功能，本文将简单介绍在Spring Boot中使用过滤器和拦截器来计算Controller中方法的执行时长，并且简单对比两者的区别。&lt;/p&gt;
&lt;p&gt;现有如下Controller：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class UserController &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/&amp;#123;id:\\d+&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void get(&lt;span class=&quot;variable&quot;&gt;@PathVariable&lt;/span&gt; String id) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-tag&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.println&lt;/span&gt;(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面通过配置过滤器和拦截器来实现对get方法执行时间计算的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="springBoot" scheme="//aha.me/categories/springBoot/"/>
    
    
      <category term="springBoot" scheme="//aha.me/tags/springBoot/"/>
    
      <category term="过滤器和拦截器" scheme="//aha.me/tags/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>反击爬虫，前端工程师的脑洞可以有多大？</title>
    <link href="//aha.me/2019/01/25/test/"/>
    <id>//aha.me/2019/01/25/test/</id>
    <published>2019-01-25T02:36:00.000Z</published>
    <updated>2019-02-16T12:14:27.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown-更简洁、更高效"><a href="#markdown-更简洁、更高效" class="headerlink" title="markdown - 更简洁、更高效"></a>markdown - 更简洁、更高效</h1><p>=================================================</p><p>强烈建议开发者认真阅读本文档，掌握md及HBuilderX对md的强大支持。<br><em>如果没有点右键设置自动换行，可按Alt+滚轮横向滚动查看。</em></p><p>很多人只把markdown用于网络文章发表，这糟蹋了markdown。<br>markdown不止是HTML的简化版，更重要的是txt的升级版、word的轻量版、笔记的最佳载体。<br>作为一种简单的格式标记语言，不同于txt的无格式，不同于HTML的复杂标记，也不同于word的鼠标调整样式。markdown通过简单的几个字符键入，就可以快捷的定义文档的样式。<br>比如在行首敲一个“#”，就把这行定义为了1级标题，并且在HBuilderX里有直观完善的着色，这样无需发布为web页面，可直接当word用。<br>掌握markdown，你可以完全抛弃txt和笔记软件的编辑器，并且在大多数场景下替代掉复杂臃肿的word。享受简洁之美、享受效率提升。<br>而HBuilderX，可以被称为最强大的markdown书写工具了。</p><p>下面的示例列举了markdown语法及对应的HBuilderX使用技巧：<br><a id="more"></a><br>开始前，可以先按下文档结构图的快捷键Alt+w（Mac是Ctrl+w），浏览本文的大纲。</p><h1 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h1><p>markdown的标题是行首以#号开头，空格分割的，不同级别的标题，在HX里着色也不同。如下：</p><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><p>标题使用技巧：</p><ol><li>Emmet快速输入：敲h2+Tab即可生成二级标题【同HTML里的emmet写法，不止标题，HX里所有可对应tag的markdown语法均支持emmet写法】。仅行首生效</li><li>智能双击：双击#号可选中整个标题段落</li><li>智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动在下一行补#。而连续2次回车后将自动补的#去掉。(体验同word)</li><li>回车后再次按Tab可递进一层标题，再按Tab切换列表符</li><li>在# 后回车，可上插一个空标题行【同word】，或任意位置按Ctrl+Shift+Enter也可以上插空标题行</li><li>折叠：<ul><li>点标题前的-号可折叠该标题段落，快捷键是Alt+-（展开折叠是Alt+=）</li><li>多层折叠时折叠或展开子节点，快捷键是Alt+Shift+-或=</li><li>全文全部折叠或展开，快捷键是Ctrl+Alt+Shift+-或=</li><li>折叠其他区域，快捷键是Alt+Shift+o。这对长文档管理非常有用，可以专注于当前章节</li><li>可以在菜单-跳转-折叠中随时找到这些功能</li></ul></li></ol><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>markdown的列表支持有序列表、无序列表以及特殊的任务列表。<br>同样也是在行前加一个特殊符号，并空格后再跟列表文字内容。</p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>有序列表就是有顺序的列表，依靠行前的数字标记顺序。</p><ol><li>有序列表1 【设置或取消有序列表符的快捷键：Ctrl+Alt+1，可选中多行批量设置序号；支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标】</li><li>有序列表2 【列表后回车会自动补序号】</li><li>有序列表3 【智能双击：双击前面的数字，可重新对数字排序，修正序号错误，并选中有序列表段落（左边的4是故意写错让你体验的）】</li></ol><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表就是列表不排序，无序列表因书写随意而被更广泛的使用。<br>无序列表有3种前缀，HX里分别用于表示1级列表、2级列表、3级列表。</p><ul><li>无序列表1 【快捷键：Ctrl+Alt+-；智能双击：双击-号可选中整段无序列表；再次按Tab会更换二级列表符】</li></ul><ul><li>无序列表2    <ul><li>Emmet：li后敲Tab可生成*号列表符，行首生效</li><li>快捷键：Ctrl+Alt+8【8即*对应的数字】，支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标</li><li>智能双击：双击*号可选中整段无序列表</li><li>智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；再次按Tab会更换列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符</li><li>*号常用于二级列表，列表符后继续Tab，可切换列表符</li></ul></li></ul><ul><li>无序列表3 【快捷键：Ctrl+Alt+=；常用于三级列表；其他同上】</li></ul><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>任务列表非常实用，管理待办已办非常便利。<br>[ ] 任务列表-未完成任务 【快捷键：Ctrl+Alt+[】<br>[x] 任务列表-已完成任务 【快捷键：Ctrl+Alt+]】</p><pre><code>1. 智能双击：双击方括号内可切换勾选状态，把任务标记为完成或未完成；双击方括号右侧可选中任务列表段落2. 智能回车：回车后自动补任务列表前缀符号；连续按回车清除前缀符号；在列表符后回车或行尾Shift+回车，上一行留出列表符</code></pre><p>以上三种列表，均支持批量修改列表符，有如下方式建议依次学习尝试：</p><ol><li>选中多行，按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，批量设置列表符</li><li>如果需要跳行设置有序或无序列表，通过Ctrl+鼠标左键点中目标多行（可不连续），产生多光标，然后按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，可跳行设置列表符，尤其是有序列表，数字也会跳行加1</li><li>按Alt+鼠标选中行首那列（列选择），这样每行行首都有光标，然后再键入或删除列表符即可批量操作</li><li>选中多行，按快捷键Ctrl+Shift+\（其实就是Ctrl+|），可以在每行行首添加一个光标</li></ol><h2 id="引用列表"><a href="#引用列表" class="headerlink" title="引用列表"></a>引用列表</h2><blockquote><p>引用1<br>引用2<br>快捷键：Ctrl+Alt+Shift+.<br>智能双击：双击&gt;号可选中整段引用列表<br>智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符</p></blockquote><h1 id="文字样式语法"><a href="#文字样式语法" class="headerlink" title="文字样式语法"></a>文字样式语法</h1><p><strong>加粗</strong> 【快捷键：Ctrl+B，支持多光标；Emmet：b后敲Tab】<br><strong>加粗2</strong><br>_倾斜<em>【Emmet：i后敲Tab；前后包围：选中文字按Ctrl+\是在选区两侧添加光标，可以继续输入</em>】<br><em>倾斜</em><br><del>删除线</del><br><figure class="highlight plain"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">包围插入：先选中文字内容，然后按_*~`等符号，会自动在2侧加包围</span><br><span class="line">智能双击：双击语法区前面的定义符号，选中包含定义符的整段文字</span><br><span class="line">去包围：选中整段文字后，按Ctrl+Shift+]，可去除2侧包围符号</span><br><span class="line"></span><br><span class="line">引号括号虽然不属于markdown语法，但也支持相同的包围、选择、去包围操作。</span><br><span class="line">引号括号智能双击选择时略特殊的是：双击引号括号内侧，选中引号括号里的内容(不含引号括号)；按下Alt+双击引号括号内侧，则选中包含符号的整段文字</span><br><span class="line"></span><br><span class="line">HBuilderX还支持以下对2侧文本高效处理的手段</span><br><span class="line">1. 选中文字按Ctrl+\是在选区两侧添加光标，可以继续输入~~，会在2侧同时输入</span><br><span class="line">2. 向2侧扩大选择：【Win:Alt+Shit+→ 、Mac:Ctrl++Shit+→】；由2侧向内减少选择：【Win:Alt+Shit+← 、Mac:Ctrl++Shit+←】</span><br><span class="line"></span><br><span class="line">[链接文字](http://dcloud.io)</span><br><span class="line">1. Emmet：a后敲Tab</span><br><span class="line">2. 打开链接：Alt+鼠标单击；如果是本地文件，可通过Shift+Alt+单击，在另一分栏打开文件</span><br><span class="line">3. 智能粘贴：粘贴URL会自动变成超链接格式；粘贴本地文件进来也会自动创建引用链接</span><br><span class="line">4. 智能双击：双击语法区开头，即[左侧，选中包含定义符的整段文字</span><br><span class="line"></span><br><span class="line">![图片描述文字](logo.jpg)</span><br><span class="line">1. Emmet：img后敲Tab</span><br><span class="line">2. 智能粘贴：粘贴剪切板里的图形时会自动保存为本md文档的附件；删除文档中的图片语法，保存md文档时会自动删除对应的图片附件；粘贴图片文件时自动变成链接引用格式；</span><br><span class="line">3. 悬浮预览：鼠标移到图片语法上，本地图片会自动显示出来</span><br><span class="line">4. 智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字</span><br><span class="line"></span><br><span class="line"># 表格 </span><br><span class="line">||||</span><br><span class="line">|--|--|--|</span><br><span class="line">||||</span><br><span class="line">||||</span><br><span class="line">1. Emmet：table3*3后敲Tab，表示生成3行3列的表格，行首生效</span><br><span class="line">2. md表格对齐是传统md的痛点，HBuilderX按下Ctrl+K可以自动整理表格格式（暂未兼容不同缩放模式和字体的情况）</span><br><span class="line">3. 支持从excel、wps、word、number的表格中复制粘贴表格进来（不支持合并单元格和单元格换行）</span><br><span class="line"></span><br><span class="line"># 分割线</span><br><span class="line">------------- 【Emmet：hr后敲Tab】</span><br><span class="line">*************</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line"># 代码区</span><br><span class="line">``` javascript</span><br><span class="line">var a = document</span><br></pre></td></tr></table></figure></p><p>Emmet：code后敲Tab，行首生效<br>智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><!--注释--> <p>快捷键：Ctrl+/<br>智能双击：双击注释首尾的定义符，选中整段注释</p><h1 id="其他emmet快捷输入"><a href="#其他emmet快捷输入" class="headerlink" title="其他emmet快捷输入"></a>其他emmet快捷输入</h1><p>day后敲Tab，当前日期。注意day需在行首或前面有空格<br>time后敲Tab，当前时间。注意time需在行首或前面有空格</p><h1 id="文档结构图"><a href="#文档结构图" class="headerlink" title="文档结构图"></a>文档结构图</h1><p>文章很长时，word里有文档结构图，HBuilderX也有。<br>菜单视图-文档结构图，快捷键Alt+W(mac是ctrl+W)，轻松管理长文档</p><h1 id="运行、预览和打印PDF"><a href="#运行、预览和打印PDF" class="headerlink" title="运行、预览和打印PDF"></a>运行、预览和打印PDF</h1><p>对md文件点工具栏或菜单里的浏览器运行，可以使用外部浏览器预览此md文件，会自动渲染为HTML。<br>点右上角的预览【快捷键Alt+p】，可在HBuilderX右侧预览该md文档的HTML渲染结果。<br>在浏览器中点打印，选择打印到PDF，可将md输出为PDF格式。（注意在打印选项里去掉页眉页脚）</p><h1 id="其他常用但你可能不知道的快捷操作技巧"><a href="#其他常用但你可能不知道的快捷操作技巧" class="headerlink" title="其他常用但你可能不知道的快捷操作技巧"></a>其他常用但你可能不知道的快捷操作技巧</h1><ul><li>Ctrl+鼠标左键添加多光标，然后敲字或粘贴，可批量处理。Ctrl+鼠标左键拖选，可选中多个选区。</li><li>Ctrl+鼠标右键删除多光标</li><li>不选内容按Ctrl+C或X可复制或剪切整行</li><li>选中2个选区后，按Ctrl+Shift+X，可互换选区内容。如无选区，只是2个光标，则互换2行</li><li>Ctrl+上下键可上下移动行</li><li>Ctrl+Insert可重复插入当前行，如果有选中内容，可重复插入选中内容</li><li>Ctrl+Shift+K可合并多行（是格式化Ctrl+K的反操作）</li><li>删除<ul><li>按Ctrl+D可删除选中行，支持多光标</li><li>Shift+Del删除到行尾</li><li>Shift+Backspace删除到行首</li></ul></li><li>选择<ul><li>Ctrl+E选相同词(mac是Command+D)，连续按可选中多词进一步操作，比替换更方便</li><li>Ctrl+L可连选多行，Ctrl+Shift+L也是选择行，但不选行首尾的空白字符</li><li>Ctrl+=可逐级放大选区</li><li>双击标题、列表符可选中相应段落</li><li>双击英文引号、括号内侧，可选中内部内容</li><li>双击缩进符，可选中同缩进段落</li><li>双击连字符比如-或_，可选中相连的词，比如双击这里试试，uni-app</li></ul></li><li>查找<ul><li>Ctrl+P查找文件</li><li>Ctrl+Alt+F可在当前目录的所有文档中搜索指定关键字(mac是Command+Shift+f)</li><li>选中文字按F3，查找下一个，Shift+F3找上一个</li></ul></li><li>云同步：HBuilderX+markdown用于云同步笔记的技巧，请参考<a href="http://ask.dcloud.net.cn/article/13097" target="_blank" rel="noopener">http://ask.dcloud.net.cn/article/13097</a></li></ul><p>都学会了吗？<br>markdown语法其实很简单，认真学半小时就能掌握。<br>HBuilderX的极客操作则需要不停反复练习，熟练掌握这些技巧，你将成为高效极客！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;markdown-更简洁、更高效&quot;&gt;&lt;a href=&quot;#markdown-更简洁、更高效&quot; class=&quot;headerlink&quot; title=&quot;markdown - 更简洁、更高效&quot;&gt;&lt;/a&gt;markdown - 更简洁、更高效&lt;/h1&gt;&lt;p&gt;=================================================&lt;/p&gt;
&lt;p&gt;强烈建议开发者认真阅读本文档，掌握md及HBuilderX对md的强大支持。&lt;br&gt;&lt;em&gt;如果没有点右键设置自动换行，可按Alt+滚轮横向滚动查看。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;很多人只把markdown用于网络文章发表，这糟蹋了markdown。&lt;br&gt;markdown不止是HTML的简化版，更重要的是txt的升级版、word的轻量版、笔记的最佳载体。&lt;br&gt;作为一种简单的格式标记语言，不同于txt的无格式，不同于HTML的复杂标记，也不同于word的鼠标调整样式。markdown通过简单的几个字符键入，就可以快捷的定义文档的样式。&lt;br&gt;比如在行首敲一个“#”，就把这行定义为了1级标题，并且在HBuilderX里有直观完善的着色，这样无需发布为web页面，可直接当word用。&lt;br&gt;掌握markdown，你可以完全抛弃txt和笔记软件的编辑器，并且在大多数场景下替代掉复杂臃肿的word。享受简洁之美、享受效率提升。&lt;br&gt;而HBuilderX，可以被称为最强大的markdown书写工具了。&lt;/p&gt;
&lt;p&gt;下面的示例列举了markdown语法及对应的HBuilderX使用技巧：&lt;br&gt;
    
    </summary>
    
      <category term="cate" scheme="//aha.me/categories/cate/"/>
    
    
      <category term="前端" scheme="//aha.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="安全" scheme="//aha.me/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>『数据结构与算法』—— 排序-冒泡&amp;选择&amp;插入</title>
    <link href="//aha.me/2018/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%86%92%E6%B3%A1-%E9%80%89%E6%8B%A9-%E6%8F%92%E5%85%A5/"/>
    <id>//aha.me/2018/12/01/数据结构与算法-排序-冒泡-选择-插入/</id>
    <published>2018-12-01T07:10:00.000Z</published>
    <updated>2019-02-16T12:14:27.461Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>终于进入排序了，这应该是大学课上学的第一个算法，当时学的还不是很成熟，只是当时学会了如何去写，并没有深究其原理和时间复杂度等细节信息，在之后不久就忘记怎么写了。其实在大部分的编程语言中，也提供了排序函数。</p><a id="more"></a><p>其实在项目中也会经常用到排序算法，就拿我之前在两日三日 K 线时，服务端不愿意计算，只能所有逻辑放在客户端来算， 这对客户端来说无疑是增加了难度。因为数据规模很大，如果算法不是很好的话，会浪费很多的时间在数据的计算上，尤其我们项目中的计算大部分是放在主线程中计算的，过长时间的计算，很大可能上会阻塞 UI 上的更新，造成卡顿，影响用户体验。</p><p>当然，排序算法也有很多种类，最经典最常用的有：冒泡、插入、选择、归并、快排、计数、基数排序、桶排序、按照时间复杂度可以分成三类：</p><p><img src="https://static001.geekbang.org/resource/image/fb/cd/fb8394a588b12ff6695cfd664afb17cd.jpg" alt></p><h3 id="如何分析排序算法"><a href="#如何分析排序算法" class="headerlink" title="如何分析排序算法"></a>如何分析排序算法</h3><p>大学时只是学了如何写，现在要想学好排序，除了学习其原理和代码实现之外，更重的是要学会如何评价和分析一个排序算法。分析一个拍排序算法从以下三种方式入手：</p><h4 id="排序算法的执行效率"><a href="#排序算法的执行效率" class="headerlink" title="排序算法的执行效率"></a>排序算法的执行效率</h4><ol><li><p>最好情况、最坏情况、平均情况时间复杂度</p><p>要分析排序算法，就必须把这些因素全部考虑到。</p></li><li><p>时间复杂度的系数、常数和低阶</p><p>在算时间复杂度的时候，往往会把这三个因素忽略到，因为考虑到数据规模的无线庞大，那这几个因素的影响可以忽略不计。但在实际的项目中，数据规模是有限的，那么如何选择一个排序算法，就必须将这些因素重新放在考虑之中了。</p></li><li><p>比较次数和交换(或移动)次数</p><p>一切影响性能或者影响时间的因素都要放在考虑之中。</p></li></ol><h4 id="排序算法的内存消耗"><a href="#排序算法的内存消耗" class="headerlink" title="排序算法的内存消耗"></a>排序算法的内存消耗</h4><p>空间复杂度当然也是考量的标准，不过针对排序算法的空间复杂度，引入累计额一个新的概念，<strong>原地排序</strong>。原地排序算法，就是特指空间复杂度是 $O(1)$ 的排序算法。冒泡、选择和插入都是原地排序算法。</p><h4 id="排序算法的稳定性"><a href="#排序算法的稳定性" class="headerlink" title="排序算法的稳定性"></a>排序算法的稳定性</h4><p>除了以上的标准外，还有一个因素需要被考虑进去，<strong>稳定性</strong>。简单来说，在排序中，对于相同元素（针对此次排序的 key 相同）来说，在进行排序后，还能保证原来的顺序，那么这个排序算法就叫做 <strong>稳定的排序算法</strong>。</p><p><strong>稳定排序算法可以保持相同的两个对象，在排序之后的前后顺序不发生改变。</strong></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序只会操作相邻的两个数据，每次冒泡操作都会对相邻的两个元素进行比较，不满足则需要进行交换。来看第一次冒泡的详细过程。</p><p><img src="https://static001.geekbang.org/resource/image/40/e9/4038f64f47975ab9f519e4f739e464e9.jpg" alt></p><p>这么看来的话，一共需要 n 次冒泡，但是可以进行优化，如果某次没有交换，说明已经完全有序，就不需要进行冒泡。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> dataChanged = <span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        dataChanged = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[j] &gt; data[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = data[j + <span class="number">1</span>];</span><br><span class="line">                data[j + <span class="number">1</span>] = data[j];</span><br><span class="line">                data[j] = temp;</span><br><span class="line">                dataChanged = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!dataChanged) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据之前总结的排序算法特性，来看一下冒泡排序的特点：</p><ol><li><p>是原地排序算法</p></li><li><p>是稳定的排序算法</p></li><li><p>最坏时间复杂度 $O(n^2)$，最好时间复杂度 $O(n)$，平均时间复杂度 $O(n^2)$</p><p>这里引入两个概念 <strong>有序度</strong> 和 <strong>逆序度</strong>。有序度 是数组中具有有序关系的元素对的个数，通常的表达式：<code>有序元素对：a[i] &lt;= a[j], 如果 i &lt; j。</code></p><p>满有序度 = $n*(n-1)/2$ ，满有序度=有序度+逆序度。</p></li></ol><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序的关键思想是将数组中的数据分为两个区间 <strong>已排序区间</strong> 和 <strong>未排序区间</strong>。初始已排序区间只有一个元素，每次从未排序区间取出一个元素，在已排序区间找到合适的位置插入，并保证已排序区间数据一直有序。</p><p>如何找到合适的位置插入？依次比较待插入的区间，不符合要求的进行数据迁移，直至找到满足条件的停止迁移。如图：</p><p><img src="https://static001.geekbang.org/resource/image/7b/a6/7b257e179787c633d2bd171a764171a6.jpg" alt></p><p>假设要排序的数据是 4,5,6,1,3,2,其中左侧是已排序区间，右侧是未排序区间。</p><p><img src="https://static001.geekbang.org/resource/image/b6/e1/b60f61ec487358ac037bf2b6974d2de1.jpg" alt></p><p>整个过程包含两种操作， <strong>元素的比较</strong> 和 <strong>元素的移动</strong>。用到上面说的有序度相关知识，数据移动的个数等于逆序度。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> value = data[i];</span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[j] &gt; value) &#123;</span><br><span class="line">                data[j + <span class="number">1</span>] = data[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        data[j + <span class="number">1</span>] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>是原地排序算法</li><li>稳定的排序算法</li><li>最坏时间复杂度 $O(n^2)$，最好时间复杂度 $O(n)$，平均时间复杂度  $O(n^2)$</li></ol><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>核心思想：每次找到最小的元素放置在已排序区间。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[j] &lt; data[minIndex]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i != minIndex) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = data[i];</span><br><span class="line">            data[i] = data[minIndex];</span><br><span class="line">            data[minIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>是原地排序算法</li><li>不是稳定的排序算法</li><li>最好最坏都是 $O(n^2)$</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>为了对比三者的时间复杂度，我构造了一个二维数组，作用在于随机创建 200 条 长度为 4000 的数据，用三种排序算法对其进行排序，对比他们的总耗时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] createRandomData(<span class="keyword">int</span> count, <span class="keyword">int</span> perNum) &#123;</span><br><span class="line">    <span class="keyword">int</span>[][] data = <span class="keyword">new</span> <span class="keyword">int</span>[count][perNum];</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; perNum; i++) &#123;</span><br><span class="line">            data[j][i] = (<span class="keyword">int</span>) (random.nextDouble() * <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p>冒泡排序：3601ms</p><p>选择排序：1998ms</p><p>插入排序：694ms</p><p>数据越庞大，对比效果越明显，冒泡排序多了一个比较交换的操作，时间复杂度会高上一点，插入排序表现尤为出色，因此优先会选插入排序。最后看一下三者比较一览图：</p><p><img src="https://static001.geekbang.org/resource/image/34/50/348604caaf0a1b1d7fee0512822f0e50.jpg" alt></p><p>参考自<a href="https://time.geekbang.org/column/126" target="_blank" rel="noopener">极客时间</a><a href="https://time.geekbang.org/column/126" target="_blank" rel="noopener">https://time.geekbang.org/column/126</a>)</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;终于进入排序了，这应该是大学课上学的第一个算法，当时学的还不是很成熟，只是当时学会了如何去写，并没有深究其原理和时间复杂度等细节信息，在之后不久就忘记怎么写了。其实在大部分的编程语言中，也提供了排序函数。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="//aha.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="//aha.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="平时积累" scheme="//aha.me/tags/%E5%B9%B3%E6%97%B6%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="进阶" scheme="//aha.me/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>『数据结构与算法』—— 递归</title>
    <link href="//aha.me/2018/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92/"/>
    <id>//aha.me/2018/11/21/数据结构与算法-递归/</id>
    <published>2018-11-21T07:10:00.000Z</published>
    <updated>2019-02-16T12:14:27.466Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>最简单的例子，常见的推荐有奖营销活动，如果需要找到最终的推荐人，那么就需要用到  <strong>递归</strong>。递归是一种应用非常广泛的算法或者是编程技巧。其中有两个难点：动态规划和递归。</p><a id="more"></a><h4 id="递归需要满足的三个条件"><a href="#递归需要满足的三个条件" class="headerlink" title="递归需要满足的三个条件"></a>递归需要满足的三个条件</h4><ol><li>一个问题的解可以分解为几个子问题的解</li><li>这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</li><li>存在递归终止条件</li></ol><h3 id="编写递归代码"><a href="#编写递归代码" class="headerlink" title="编写递归代码"></a>编写递归代码</h3><p>编写递归代码关键在于 <strong>写出递推公式，找到终止条件。</strong>一个简单的例子：</p><p>假如这里有 n 个台阶，每次可以跨 1 个台阶或者 2 个台阶，请问走 n 个台阶有多少种走法？</p><p>仔细想一下，所有的走法可以分成两类，第一类是第一步走了 1 个台阶，另一类是第一步走了 2 个台阶。所以 n 个台阶的走法就等于先走 1 个台阶后，n-1 个台阶的走法加上先走 2 个台阶后，n-2 个台阶的走法，用公式表示就是:</p><p>$f(n) = f(n-1)+f(n-2)​$</p><p>当递推公式出来后，递归代码基本上就走了一半。终止条件和递推公式合并后就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">f(<span class="number">2</span>) = <span class="number">2</span>;</span><br><span class="line">f(n) = f(n-<span class="number">1</span>) + f(n-<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>总结一下，<strong>写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。</strong></p><p>还有一点：<strong>编写递归代码的关键是，知道遇到递归，我们就把它抽象成一个递推公司，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤。</strong></p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><h4 id="警惕堆栈溢出"><a href="#警惕堆栈溢出" class="headerlink" title="警惕堆栈溢出"></a>警惕堆栈溢出</h4><p>递归代码需要重复调用自身的方法，当调用次数过大是，很有可能就会抛出堆栈溢出的异常。函数调用会使用栈来保存临时变量，每调用一个函数，都会临时变量封装为栈帧压入内存栈，等函数执行完成返回后，才会出栈。系统栈或者虚拟机控件一般都不大。如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。</p><p>如何避免堆栈溢出的出现，最常见的办法就是使用循环遍历来替代递归，但是可读性可能会降低。后面会介绍例子。</p><h4 id="警惕重复计算"><a href="#警惕重复计算" class="headerlink" title="警惕重复计算"></a>警惕重复计算</h4><p>如果把算台阶走法的题目分解一下，就是这样的：</p><p><img src="https://static001.geekbang.org/resource/image/e7/bf/e7e778994e90265344f6ac9da39e01bf.jpg" alt></p><p>从图中可以发现有些是重复计算的，为了避免计算，就可以通过 HashMap 来保存计算的值，优化这个问题。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>首先使用普通的递归方式来实现台阶走法那个题目：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findLadder</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> findLadder(n - <span class="number">1</span>) + findLadder(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换成循环迭代的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findLadderNormal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pre1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pre2 =<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        result = pre1 + pre2;</span><br><span class="line">        pre1 = pre2;</span><br><span class="line">        pre2 = result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在递归的基础上，优化重复计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findLadderAdvanced</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (cached.containsKey(n)) &#123;</span><br><span class="line">        <span class="keyword">return</span> cached.get(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> result = findLadderAdvanced(n - <span class="number">1</span>) + findLadderAdvanced(n - <span class="number">2</span>);</span><br><span class="line">    cached.put(n, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>递归是一种非常高效、简洁的编码技巧。只要满足三个条件的问题就可以通过递归代码来解决。</p><p>不过递归代码也比较难写、难理解。编写递归代码的关键就是不要把自己绕进去，正确姿势是写出递推公式，找出终止条件，然后再翻译成递归代码。</p><p>参考自<a href="https://time.geekbang.org/column/126" target="_blank" rel="noopener">极客时间</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;最简单的例子，常见的推荐有奖营销活动，如果需要找到最终的推荐人，那么就需要用到  &lt;strong&gt;递归&lt;/strong&gt;。递归是一种应用非常广泛的算法或者是编程技巧。其中有两个难点：动态规划和递归。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="//aha.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="//aha.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="平时积累" scheme="//aha.me/tags/%E5%B9%B3%E6%97%B6%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="进阶" scheme="//aha.me/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>『数据结构与算法』—— 队列</title>
    <link href="//aha.me/2018/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%98%9F%E5%88%97/"/>
    <id>//aha.me/2018/11/06/数据结构与算法-队列/</id>
    <published>2018-11-06T07:10:00.000Z</published>
    <updated>2019-02-16T12:14:27.469Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>有一定的业务需求就会有对应的技术或数据结构产生。我们都知道 CPU 的资源是有限的，任务的处理速度与线程个数并不是线性正相关。相反过多的线程反而会导致 CPU 频繁切换，处理性能下降。所以线程池的大小一般都是综合考虑处理任务的特点和硬件环境，来事先设置的。</p><p>队列的特点 <strong>先进先出</strong>，可以想象成排队买票，先来的先买。最基本的操作就是 <strong>入队和出队</strong>，所以队列跟栈一样，也是一种 <strong>操作受限的线性数据结构</strong>。</p><a id="more"></a><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>类似栈，可以通过数组和链表试下，数组实现的队列叫做 <strong>顺序队列</strong>，链表实现的队列叫做 <strong>链式队列</strong>。</p><h4 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h4><p>核心思想在于，使用两个下标保存头部和尾部的数据，也可以当成标识。因为入队是从屁股进行插入，出队是从头部拿出数据，因此要记住头尾的位置。</p><p>先来看一下简单的实现方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    T[] items;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">int</span> tail;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    ArrayQueue(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        items = (T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        count = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">enqueue</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tail == count) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        items[tail] = t;</span><br><span class="line">        tail ++;</span><br><span class="line">        print(<span class="string">"enqueue"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == tail) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        T t= items[head];</span><br><span class="line">        items[head] = <span class="keyword">null</span>;</span><br><span class="line">        head ++;</span><br><span class="line">        print(<span class="string">"dequeue"</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String mode)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mode:\t"</span> + mode + <span class="string">" head:\t"</span> + head + <span class="string">" tail:\t"</span> + tail);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head; i &lt; tail; i++) &#123;</span><br><span class="line">            System.out.print(items[i] + <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayQueue&lt;String&gt; queue = <span class="keyword">new</span> ArrayQueue&lt;String&gt;(<span class="number">6</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"1"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"2"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"3"</span>);</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        queue.enqueue(<span class="string">"5"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"6"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mode:enqueue head:<span class="number">0</span> tail:<span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">mode:enqueue head:<span class="number">0</span> tail:<span class="number">2</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">mode:enqueue head:<span class="number">0</span> tail:<span class="number">3</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">mode:dequeue head:<span class="number">1</span> tail:<span class="number">3</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line">mode:dequeue head:<span class="number">2</span> tail:<span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">mode:dequeue head:<span class="number">3</span> tail:<span class="number">3</span></span><br><span class="line"></span><br><span class="line">mode:enqueue head:<span class="number">3</span> tail:<span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">mode:enqueue head:<span class="number">3</span> tail:<span class="number">5</span></span><br><span class="line"><span class="number">56</span></span><br></pre></td></tr></table></figure><p>上述实现的方式有一个弊端，当 tail == n 的时候，就不能继续插入数据，但是此时容器并没有装满，只是不能继续往后插入数据了。那这个时候就需要对容器进行改变：<strong>数据搬移</strong>。单并不是每次入队都需要迁移，为了优化时间复杂度，可以在每次尾节点到达终点时，再开始数据搬移，即数据往前移动 head 的位置。</p><p>来看一下实现方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicArrayQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    T[] items;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">int</span> tail;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    DynamicArrayQueue(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        items = (T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        count = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">enqueue</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tail == count) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head; i &lt; tail; i++) &#123;</span><br><span class="line">                items[i - head] = items[i];</span><br><span class="line">            &#125;</span><br><span class="line">            tail -= head;</span><br><span class="line">            head = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        items[tail] = t;</span><br><span class="line">        tail ++;</span><br><span class="line">        print(<span class="string">"enqueue"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == tail) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        T t = items[head];</span><br><span class="line">        items[head] = <span class="keyword">null</span>;</span><br><span class="line">        head ++;</span><br><span class="line">        print(<span class="string">"new dequeue"</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String mode)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mode:\t"</span> + mode + <span class="string">" head:\t"</span> + head + <span class="string">" tail:\t"</span> + tail);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head; i &lt; tail; i++) &#123;</span><br><span class="line">            System.out.print(items[i] + <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(Arrays.toString(items));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DynamicArrayQueue&lt;String&gt; queue = <span class="keyword">new</span> DynamicArrayQueue&lt;String&gt;(<span class="number">4</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"1"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"2"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"3"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"4"</span>);</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        queue.enqueue(<span class="string">"5"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"6"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mode:enqueue head:<span class="number">0</span> tail:<span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">[<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">mode:enqueue head:<span class="number">0</span> tail:<span class="number">2</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">mode:enqueue head:<span class="number">0</span> tail:<span class="number">3</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="keyword">null</span>]</span><br><span class="line">mode:enqueue head:<span class="number">0</span> tail:<span class="number">4</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">mode:<span class="keyword">new</span> dequeue head:<span class="number">1</span> tail:<span class="number">4</span></span><br><span class="line"><span class="number">234</span></span><br><span class="line">[<span class="keyword">null</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">mode:<span class="keyword">new</span> dequeue head:<span class="number">2</span> tail:<span class="number">4</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line">[<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">mode:enqueue head:<span class="number">0</span> tail:<span class="number">3</span></span><br><span class="line"><span class="number">345</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line">mode:enqueue head:<span class="number">0</span> tail:<span class="number">4</span></span><br><span class="line"><span class="number">3456</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">mode:<span class="keyword">new</span> dequeue head:<span class="number">1</span> tail:<span class="number">4</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">[<span class="keyword">null</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">mode:enqueue head:<span class="number">0</span> tail:<span class="number">4</span></span><br><span class="line"><span class="number">4567</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>想比较之前的实现，出队的逻辑并没有任何的改变，在入队是，需要判断 tail == 0，如果达到这个条件则可能需要进行数据搬移。</p><h4 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h4><p>思路其实类似于顺序队列的实现逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    Node&lt;T&gt; head = <span class="keyword">null</span>;</span><br><span class="line">    Node&lt;T&gt; tail = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tail == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;T&gt; node = <span class="keyword">new</span> Node&lt;T&gt;(t, <span class="keyword">null</span>);</span><br><span class="line">            head = node;</span><br><span class="line">            tail = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tail.next = <span class="keyword">new</span> Node&lt;T&gt;(t, <span class="keyword">null</span>);</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(head.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        T t = head.value;</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(head == <span class="keyword">null</span> ? <span class="string">"null"</span> : head.toString());</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedQueue&lt;String&gt; queue = <span class="keyword">new</span> LinkedQueue&lt;String&gt;();</span><br><span class="line">        queue.enqueue(<span class="string">"1"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"2"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"3"</span>);</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        queue.enqueue(<span class="string">"6"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">3</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p>需要注意的是：</p><ol><li>入队的时候，需要考虑队列无数据的情况</li><li>出队的时候，需要考虑出队到最后尾节点的处理</li></ol><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><p>之前在用数组实现队列时，在 tail == n 时会有数据搬移的操作，这样入队操作性能就会收到影响，我们可以使用循环队列来解决这个问题。</p><p>循环队列其实长得像一个环，现在需要将首尾相连变成一个环。</p><p>放三张图感受一下，图片来自于极客时间的课程。</p><p><img src="https://static001.geekbang.org/resource/image/58/90/58ba37bb4102b87d66dffe7148b0f990.jpg" alt></p><p><img src="https://static001.geekbang.org/resource/image/71/80/71a41effb54ccea9dd463bde1b6abe80.jpg" alt></p><p><img src="https://static001.geekbang.org/resource/image/3d/ec/3d81a44f8c42b3ceee55605f9aeedcec.jpg" alt></p><p>从图中可以发现规律，当 <strong>(tail + 1) % n = head</strong> 时，说明队列已满。</p><p>来看一下代码的具体实现方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数组：items，数组大小：n</span></span><br><span class="line">    <span class="keyword">private</span> String[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// head表示队头下标，tail表示队尾下标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请一个大小为capacity的数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircularQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> String[capacity + <span class="number">1</span>];</span><br><span class="line">        n = capacity + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enqueue</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 队列满了</span></span><br><span class="line">        <span class="keyword">if</span> ((tail + <span class="number">1</span>) % n == head) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        items[tail] = item;</span><br><span class="line">        tail = (tail + <span class="number">1</span>) % n;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果head == tail 表示队列为空</span></span><br><span class="line">        <span class="keyword">if</span> (head == tail) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        String ret = items[head];</span><br><span class="line">        head = (head + <span class="number">1</span>) % n;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head; i % n != tail; ++i) &#123;</span><br><span class="line">            System.out.print(items[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CircularQueue queue = <span class="keyword">new</span> CircularQueue(<span class="number">5</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"1"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"2"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"3"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"4"</span>);</span><br><span class="line">        queue.printAll();</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        queue.printAll();</span><br><span class="line">        queue.enqueue(<span class="string">"5"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"6"</span>);</span><br><span class="line">        queue.printAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p>参考自<a href="https://time.geekbang.org/column/126" target="_blank" rel="noopener">极客时间</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;有一定的业务需求就会有对应的技术或数据结构产生。我们都知道 CPU 的资源是有限的，任务的处理速度与线程个数并不是线性正相关。相反过多的线程反而会导致 CPU 频繁切换，处理性能下降。所以线程池的大小一般都是综合考虑处理任务的特点和硬件环境，来事先设置的。&lt;/p&gt;
&lt;p&gt;队列的特点 &lt;strong&gt;先进先出&lt;/strong&gt;，可以想象成排队买票，先来的先买。最基本的操作就是 &lt;strong&gt;入队和出队&lt;/strong&gt;，所以队列跟栈一样，也是一种 &lt;strong&gt;操作受限的线性数据结构&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="//aha.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="//aha.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="平时积累" scheme="//aha.me/tags/%E5%B9%B3%E6%97%B6%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="进阶" scheme="//aha.me/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>『数据结构与算法』—— 栈</title>
    <link href="//aha.me/2018/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%A0%88/"/>
    <id>//aha.me/2018/10/15/数据结构与算法-栈/</id>
    <published>2018-10-15T07:10:00.000Z</published>
    <updated>2019-02-16T12:14:27.464Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>先入后出</strong>，有点类似将书放在抽屉里，先放进去的书，如果想拿到他，必须将他上面书拿完才可以，粗俗的形容可以这么比喻：“吃了吐”叫栈，“吃了拉”叫队列，话粗理不粗。<strong>栈是一种“操作受限”的线性表</strong>，只允许一段插入和删除数据。</p><p>从功能上看，数组或链表确实可代替栈，但是在特定的情况中，数组和链表暴露的接口太多，操作上虽然灵活，但是很多条件不可控，使用上当然容易出现问题。</p><p><strong>当某个数据集合只涉及在一段插入和删除数据，并且满足先进后出的特性，我们就应该首选栈这种数据结构。</strong></p><a id="more"></a><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>根据其定义和特点，栈主要包含两个操作，入栈和出栈。数组和链表都可以实现，用数组实现的栈叫做 <strong>顺序栈</strong>，用链表实现的栈叫做 <strong>链式栈</strong>。后面会贴上具体的实现代码和测试用例。</p><p>栈存储数据只需要一个大小为 n 的数组就足够了，在操作数据的过程中，只需要一两个临时变量存储空间，所以空间复杂度是 O(1)，至于入栈和出栈的时间复杂度也是 O(1)。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="数组实现栈-支持动态扩容"><a href="#数组实现栈-支持动态扩容" class="headerlink" title="数组实现栈(支持动态扩容)"></a>数组实现栈(支持动态扩容)</h4><p>需要注意点：</p><ol><li>当数据不断增加，大小达到阈值，也就是容器满了，此时大小需要扩容到原来的两倍。</li><li>当数据不断减小，大小达到整个大小四分之一时，此时大小需要缩小为原来的 1/2。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    ArrayStack(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        data = (T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        totalCount = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">push</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == totalCount) &#123;</span><br><span class="line">            resize(totalCount * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        data[count] = t;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">"push: "</span> + t + <span class="string">"  data:\t"</span> + Arrays.toString(data));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        T t = data[count - <span class="number">1</span>];</span><br><span class="line">        data[count - <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        count --;</span><br><span class="line">        <span class="keyword">if</span> (count == totalCount / <span class="number">4</span> &amp;&amp; totalCount / <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            resize(totalCount / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"pop: "</span> + t + <span class="string">"  data:\t"</span> + Arrays.toString(data));</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        T t = data[count - <span class="number">1</span>];</span><br><span class="line">        System.out.println(<span class="string">"peek: "</span> + t + <span class="string">"  data:\t"</span> + Arrays.toString(data));</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newSize)</span> </span>&#123;</span><br><span class="line">        T[] newData = (T[]) <span class="keyword">new</span> Object[newSize];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        totalCount = newData.length;</span><br><span class="line">        System.out.println(<span class="string">"扩容前："</span> + data.length);</span><br><span class="line">        data = newData;</span><br><span class="line">        System.out.println(<span class="string">"重新调整大小:\t"</span> + data.length + <span class="string">"  data:\t"</span> + Arrays.toString(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayStack&lt;Integer&gt; data = <span class="keyword">new</span> ArrayStack&lt;Integer&gt;(<span class="number">4</span>);</span><br><span class="line">        data.push(<span class="number">1</span>);</span><br><span class="line">        data.push(<span class="number">2</span>);</span><br><span class="line">        data.push(<span class="number">3</span>);</span><br><span class="line">        data.push(<span class="number">4</span>);</span><br><span class="line">        data.push(<span class="number">5</span>);</span><br><span class="line">        data.push(<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"size:\t"</span> + data.size());</span><br><span class="line">        System.out.println(<span class="string">"isEmpty:\t"</span> + data.isEmpty());</span><br><span class="line">        <span class="keyword">for</span> (Integer datum : data) &#123;</span><br><span class="line">            System.out.print(datum);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        data.pop();</span><br><span class="line">        data.pop();</span><br><span class="line">        data.pop();</span><br><span class="line">        data.pop();</span><br><span class="line">        data.peek();</span><br><span class="line">        data.peek();</span><br><span class="line">        data.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayIterator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ArrayIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = count;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data[--i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里如果需要支持加强 for 循环，则需要创建自定义实现 Iterator 类。</p></blockquote><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">push: <span class="number">1</span>  data:[<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">push: <span class="number">2</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">push: <span class="number">3</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="keyword">null</span>]</span><br><span class="line">push: <span class="number">4</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">扩容前：<span class="number">4</span></span><br><span class="line">重新调整大小:<span class="number">8</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">push: <span class="number">5</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">push: <span class="number">6</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">size:<span class="number">6</span></span><br><span class="line">isEmpty:<span class="keyword">false</span></span><br><span class="line"><span class="number">654321</span></span><br><span class="line">pop: <span class="number">6</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">pop: <span class="number">5</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">pop: <span class="number">4</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">扩容前：<span class="number">8</span></span><br><span class="line">重新调整大小:<span class="number">4</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">pop: <span class="number">3</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">peek: <span class="number">2</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">peek: <span class="number">2</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">peek: <span class="number">2</span>  data:[<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br></pre></td></tr></table></figure><h4 id="链表实现栈"><a href="#链表实现栈" class="headerlink" title="链表实现栈"></a>链表实现栈</h4><p>需要注意的是临界值的判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    Node&lt;T&gt; head = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; node = createNode(t);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.next = head;</span><br><span class="line">            head = node;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">"push:\t"</span> + t + <span class="string">"  data:\t"</span> + head.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        T t = head.value;</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">if</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"pop:\t"</span> + t + <span class="string">"  data:\t"</span> + head.toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"pop:\t"</span> + t + <span class="string">"  data:\tnull"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        T t = head.value;</span><br><span class="line">        System.out.println(<span class="string">"peek:\t"</span> + t + <span class="string">"  data:\t"</span> + head.toString());</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node&lt;T&gt; <span class="title">createNode</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;T&gt;(t, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedStack&lt;Integer&gt; stack = <span class="keyword">new</span> LinkedStack&lt;Integer&gt;();</span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line">        stack.push(<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">"size:\t"</span> + stack.size());</span><br><span class="line">        System.out.println(<span class="string">"isEmpty:\t"</span> + stack.isEmpty());</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : stack) &#123;</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125;</span><br><span class="line">        stack.peek();</span><br><span class="line">        stack.peek();</span><br><span class="line">        stack.peek();</span><br><span class="line">        stack.pop();</span><br><span class="line">        stack.pop();</span><br><span class="line">        stack.pop();</span><br><span class="line">        stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">            sb.append(t).append(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        head = <span class="keyword">null</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LinkedIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LinkedIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        Node&lt;T&gt; first = head;</span><br><span class="line">        <span class="keyword">int</span> n = count;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            T t = first.value;</span><br><span class="line">            first = first.next;</span><br><span class="line">            n--;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">push:<span class="number">1</span>  data:<span class="number">1</span> </span><br><span class="line">push:<span class="number">2</span>  data:<span class="number">2</span> <span class="number">1</span> </span><br><span class="line">push:<span class="number">3</span>  data:<span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line">push:<span class="number">4</span>  data:<span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line">size:<span class="number">4</span></span><br><span class="line">isEmpty:<span class="keyword">false</span></span><br><span class="line"><span class="number">4321</span></span><br><span class="line">peek:<span class="number">4</span>  data:<span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line">peek:<span class="number">4</span>  data:<span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line">peek:<span class="number">4</span>  data:<span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line">pop:<span class="number">4</span>  data:<span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line">pop:<span class="number">3</span>  data:<span class="number">2</span> <span class="number">1</span> </span><br><span class="line">pop:<span class="number">2</span>  data:<span class="number">1</span> </span><br><span class="line">pop:<span class="number">1</span>  data:<span class="keyword">null</span></span><br></pre></td></tr></table></figure><h4 id="栈在括号匹配中的应用"><a href="#栈在括号匹配中的应用" class="headerlink" title="栈在括号匹配中的应用"></a>栈在括号匹配中的应用</h4><p>括号一般都是一一对应的，那可以用栈保存未匹配的左括号，从左到又进行扫描。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedStack&lt;String&gt; stack = <span class="keyword">new</span> LinkedStack&lt;String&gt;();</span><br><span class="line">        stack.push(<span class="string">"["</span>);</span><br><span class="line">        stack.push(<span class="string">"&#123;"</span>);</span><br><span class="line">        stack.push(<span class="string">"『"</span>);</span><br><span class="line">        stack.push(<span class="string">"「"</span>);</span><br><span class="line">        stack.push(<span class="string">"」"</span>);</span><br><span class="line">        stack.push(<span class="string">"』"</span>);</span><br><span class="line">        stack.push(<span class="string">"&#125;"</span>);</span><br><span class="line">        stack.push(<span class="string">"]"</span>);</span><br><span class="line">        System.out.println(stack.toString());</span><br><span class="line">        System.out.println(<span class="string">"is correct:\t"</span> + isCorrect(stack));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCorrect</span><span class="params">(LinkedStack&lt;String&gt; stack)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isCorrect = <span class="keyword">true</span>;</span><br><span class="line">        LinkedStack&lt;String&gt; stack1 = <span class="keyword">new</span> LinkedStack&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : stack) &#123;</span><br><span class="line">            stack1.push(s);</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;String&gt; iterator = stack.iterator();</span><br><span class="line">        Iterator&lt;String&gt; iterator1 = stack1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext() &amp;&amp; iterator1.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!equals(iterator.next(), iterator1.next())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isCorrect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(String one, String two)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"["</span>.equals(one) &amp;&amp; <span class="string">"]"</span>.equals(two)) || (<span class="string">"["</span>.equals(two) &amp;&amp; <span class="string">"]"</span>.equals(one)) ||</span><br><span class="line">                (<span class="string">"&#123;"</span>.equals(one) &amp;&amp; <span class="string">"&#125;"</span>.equals(two)) || (<span class="string">"&#123;"</span>.equals(two) &amp;&amp; <span class="string">"&#125;"</span>.equals(one)) ||</span><br><span class="line">                (<span class="string">"「"</span>.equals(one) &amp;&amp; <span class="string">"」"</span>.equals(two)) || (<span class="string">"「"</span>.equals(two) &amp;&amp; <span class="string">"」"</span>.equals(one)) ||</span><br><span class="line">                (<span class="string">"『"</span>.equals(one) &amp;&amp; <span class="string">"』"</span>.equals(two)) || (<span class="string">"『"</span>.equals(two) &amp;&amp; <span class="string">"』"</span>.equals(one));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="浏览器在栈的应用"><a href="#浏览器在栈的应用" class="headerlink" title="浏览器在栈的应用"></a>浏览器在栈的应用</h4><p>一般浏览器支持回退和前进功能，其实可以通过栈来实现这个功能。</p><ol><li>使用两个栈，一个存储后退的数据，一个存储前进的数据</li><li>每次打开新的网址，后退栈压入，前进栈清空</li><li>每次回退网站，后退栈出栈，前进栈压入</li><li>在已经后退基础上前进，后退栈压入，前进栈出栈</li><li>每次前进和后退都需要判断各自栈是否可以进行数据操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackTest2</span> </span>&#123;</span><br><span class="line">    String currentPage = <span class="string">""</span>;</span><br><span class="line">    LinkedStack&lt;String&gt; backStack;</span><br><span class="line">    LinkedStack&lt;String&gt; forwardStack;</span><br><span class="line"></span><br><span class="line">    StackTest2() &#123;</span><br><span class="line">        backStack = <span class="keyword">new</span> LinkedStack&lt;String&gt;();</span><br><span class="line">        forwardStack = <span class="keyword">new</span> LinkedStack&lt;String&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (currentPage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            backStack.push(url);</span><br><span class="line">            forwardStack.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        showPage(url, <span class="string">"open"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canGoBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !backStack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canGoForward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !forwardStack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (canGoBack()) &#123;</span><br><span class="line">            String back = backStack.pop();</span><br><span class="line">            forwardStack.push(currentPage);</span><br><span class="line">            showPage(back, <span class="string">"go back"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goForward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (canGoForward()) &#123;</span><br><span class="line">            String forward = forwardStack.pop();</span><br><span class="line">            backStack.push(currentPage);</span><br><span class="line">            showPage(forward, <span class="string">"go forward"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showCurrentPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"current page url:\t"</span> + currentPage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPage</span><span class="params">(String url, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentPage = url;</span><br><span class="line">        System.out.println(<span class="string">"current page url:\t"</span> + <span class="keyword">this</span>.currentPage + <span class="string">"  desc:\t"</span> + desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StackTest2 stack = <span class="keyword">new</span> StackTest2();</span><br><span class="line">        stack.open(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">        stack.open(<span class="string">"http://news.baidu.com/"</span>);</span><br><span class="line">        stack.open(<span class="string">"http://news.baidu.com/ent"</span>);</span><br><span class="line">        stack.goBack();</span><br><span class="line">        stack.goBack();</span><br><span class="line">        stack.goForward();</span><br><span class="line">        stack.open(<span class="string">"http://www.qq.com"</span>);</span><br><span class="line">        stack.goForward();</span><br><span class="line">        stack.goBack();</span><br><span class="line">        stack.goForward();</span><br><span class="line">        stack.goBack();</span><br><span class="line">        stack.goBack();</span><br><span class="line">        stack.goBack();</span><br><span class="line">        stack.goBack();</span><br><span class="line">        stack.showCurrentPage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考自<a href="https://time.geekbang.org/column/126" target="_blank" rel="noopener">极客时间</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;先入后出&lt;/strong&gt;，有点类似将书放在抽屉里，先放进去的书，如果想拿到他，必须将他上面书拿完才可以，粗俗的形容可以这么比喻：“吃了吐”叫栈，“吃了拉”叫队列，话粗理不粗。&lt;strong&gt;栈是一种“操作受限”的线性表&lt;/strong&gt;，只允许一段插入和删除数据。&lt;/p&gt;
&lt;p&gt;从功能上看，数组或链表确实可代替栈，但是在特定的情况中，数组和链表暴露的接口太多，操作上虽然灵活，但是很多条件不可控，使用上当然容易出现问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当某个数据集合只涉及在一段插入和删除数据，并且满足先进后出的特性，我们就应该首选栈这种数据结构。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="//aha.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="//aha.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="平时积累" scheme="//aha.me/tags/%E5%B9%B3%E6%97%B6%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="进阶" scheme="//aha.me/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>『数据结构与算法』—— 链表</title>
    <link href="//aha.me/2018/10/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8/"/>
    <id>//aha.me/2018/10/03/数据结构与算法-链表/</id>
    <published>2018-10-03T07:10:00.000Z</published>
    <updated>2019-02-16T12:14:27.468Z</updated>
    
    <content type="html"><![CDATA[<h3 id="底层存储结构"><a href="#底层存储结构" class="headerlink" title="底层存储结构"></a>底层存储结构</h3><p>与 <strong>数组</strong> 对比，数组需要一块 <strong>连续的内存空间</strong> 来存储，对内存要求很高。如果我们申请 50MB 的内存，即便内存的剩余内存大于 50MB，但是如果内存不是连续的，也是很有可能申请失败。</p><p>而 <strong>链表</strong> 与之相反，它并不需要一块连续的内存，通过 <strong>指针</strong> 将一组 <strong>零散的内存块</strong> 串联起来使用。</p><a id="more"></a><p>下面的图片可以看出两者之间的区别：</p><p><img src="https://static001.geekbang.org/resource/image/d5/cd/d5d5bee4be28326ba3c28373808a62cd.jpg" alt></p><h3 id="链表分类"><a href="#链表分类" class="headerlink" title="链表分类"></a>链表分类</h3><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>单链表每个节点有两部分组成，<strong>数据</strong> 和 <strong>后继指针 next</strong>  。</p><p><img src="https://static001.geekbang.org/resource/image/b9/eb/b93e7ade9bb927baad1348d9a806ddeb.jpg" alt></p><p>第一个节点称为 <strong>头结点</strong>， 最后一个节点称为 <strong>尾节点</strong> ，尾节点 next 指向 null。链表的插入增加和删除，不需要移动，只需要改变前后节点 next 的指针即可实现。</p><p><img src="https://static001.geekbang.org/resource/image/45/17/452e943788bdeea462d364389bd08a17.jpg" alt></p><p>但是，如果需要访问第 N 个元素，则需要时间复杂度为 $O(n)$ 。</p><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p>循环链表是从链尾直接连接到链头。</p><p><img src="https://static001.geekbang.org/resource/image/86/55/86cb7dc331ea958b0a108b911f38d155.jpg" alt></p><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><p>相比于单链表，双向链表具有两个节点：前继节点和后继节点。</p><p><img src="https://static001.geekbang.org/resource/image/cb/0b/cbc8ab20276e2f9312030c313a9ef70b.jpg" alt></p><h3 id="LRU-缓存淘汰算法"><a href="#LRU-缓存淘汰算法" class="headerlink" title="LRU 缓存淘汰算法"></a>LRU 缓存淘汰算法</h3><p>维护一个有序单链表，越靠近链尾的节点是越早访问的，当有一个新的数据访问时，我们从链表头部开始顺序遍历链表。</p><ol><li>如果该数据已经存在于链表中，那么遍历拿个这个数据的节点删除，并将新的插入到头部。</li><li>如果此数据没有再缓存链表中：<ol><li>如果缓存未满，则直接将该节点插入链表的头部</li><li>如果此时链表已满，则链表尾节点删除，将新的数据节点插入到链表的头部。</li></ol></li></ol><h3 id="链表小总结"><a href="#链表小总结" class="headerlink" title="链表小总结"></a>链表小总结</h3><p>说一句尴尬的话，本人大学的时候也是挂了 算法与数据结构 这门课，说实话，对算法也是有一点阴影，总感觉自己会学不好。就拿写链表而言，经常被引用的移动产生误解，在过程中经常不知道指针移到到哪了，导致并不会实现自己预期想要的结果。其实练习题做下来还是蛮有感触的，还是要多练习，从中可以找到一些技巧，下面总结一下：</p><h4 id="理解指针或引用的含义"><a href="#理解指针或引用的含义" class="headerlink" title="理解指针或引用的含义"></a>理解指针或引用的含义</h4><p>对于我这个学习 Java 的而言，其实就是要理解引用的含义。</p><p><strong>将某个变量赋值给引用，实际上是将这个变量的地址赋值给该引用，或者反过来说，引用中存储了这个变量的内存地址，指向了这个变量，通过这个指针就能找到这个变量。</strong></p><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Node node1 = <span class="keyword">new</span> Node(<span class="keyword">null</span>, <span class="number">1</span>);</span><br><span class="line">node1 = <span class="keyword">new</span> Node(<span class="keyword">null</span>, <span class="number">2</span>);</span><br><span class="line">Node node2 = <span class="keyword">new</span> Node(<span class="keyword">null</span>, <span class="number">3</span>);</span><br><span class="line">node1 = node2;</span><br><span class="line">node1.value = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>只要是 <code>node =</code> 引用后面直接跟上等于，那就证明只是单纯的将这个引用指向另一个内存地址，并不会影响任何变量的值。而如果 <code>node.</code> 引用通过 <code>.</code> 的方式，那么他的值就有变化的可能。</p><h4 id="警惕引用丢失和内存泄漏"><a href="#警惕引用丢失和内存泄漏" class="headerlink" title="警惕引用丢失和内存泄漏"></a>警惕引用丢失和内存泄漏</h4><p><img src="https://static001.geekbang.org/resource/image/05/6e/05a4a3b57502968930d517c934347c6e.jpg" alt></p><p>比如链表插入节点操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Node targetNode = <span class="keyword">new</span> Node(<span class="keyword">null</span>, <span class="number">1</span>); <span class="comment">// 待被插入的节点</span></span><br><span class="line">Node preNode; <span class="comment">// 已经被找到插入前一个节点</span></span><br></pre></td></tr></table></figure><p>错误示范：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preNode.next = targetNode;</span><br><span class="line">targeNode.next = preNode.next.next;</span><br></pre></td></tr></table></figure><p>这里现将前节点指向目标节点，然后目标节点再指向前节点的下下个节点，意思是没有错误，但是会导致后节点以及之后都会被丢失。</p><p>正确的做法应该是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">targetNode.next = preNode.next.next;</span><br><span class="line">preNode.next = targeNode;</span><br></pre></td></tr></table></figure><p>虽然仅仅是调换了顺序，就会产生不同的结果。同样删除节点时，也要记得手动释放内存。</p><h4 id="利用哨兵简化实现难度"><a href="#利用哨兵简化实现难度" class="headerlink" title="利用哨兵简化实现难度"></a>利用哨兵简化实现难度</h4><p>针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。</p><h4 id="重点留意边界条件处理"><a href="#重点留意边界条件处理" class="headerlink" title="重点留意边界条件处理"></a>重点留意边界条件处理</h4><ol><li>如果链表为空，代码是否能正常工作</li><li>如果链表只包含一个节点，代码是否能正常工作</li><li>如果链表只包含两个节点，代码是否能正常工作</li><li>代码逻辑在处理头结点和尾节点的时候，代码是否能正常工作</li></ol><h4 id="举例画图，辅助思考"><a href="#举例画图，辅助思考" class="headerlink" title="举例画图，辅助思考"></a>举例画图，辅助思考</h4><p>我平常在做练习题时，身边必备一张纸和一纸笔，对特殊的逻辑进行画图举例演示，很大程度上可以帮助自己理清逻辑。</p><h4 id="多写多练"><a href="#多写多练" class="headerlink" title="多写多练"></a>多写多练</h4><p>多多练习吧！</p><p>下面写几个练习题</p><h3 id="代码实现单链列表"><a href="#代码实现单链列表" class="headerlink" title="代码实现单链列表"></a>代码实现单链列表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertToHead</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.next = head;</span><br><span class="line">            head = node;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"insert head "</span> + node.value + <span class="string">" data:\t"</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertToHead</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        insertToHead(createNode(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(Node node, Node newNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        newNode.next = node.next;</span><br><span class="line">        node.next = newNode;</span><br><span class="line">        System.out.println(<span class="string">"insertAfter data:\t"</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(Node node, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        insertAfter(node, createNode(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertBefore</span><span class="params">(Node before, Node newNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (before == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (head == before) &#123;</span><br><span class="line">            insertToHead(newNode);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span> &amp;&amp; temp.next != before) &#123;</span><br><span class="line">            <span class="comment">// 直到找打 before 的上个节点</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = before;</span><br><span class="line">        temp.next = newNode;</span><br><span class="line">        System.out.println(<span class="string">"insertBefore data:\t"</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertBefore</span><span class="params">(Node before, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        insertBefore(before, createNode(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">findByValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span> &amp;&amp; temp.value != value) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">findByIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span> &amp;&amp; pos != index) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertLast</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = node;</span><br><span class="line">            System.out.println(<span class="string">"insert last "</span> + node.value + <span class="string">" data:\t"</span> + toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = node;</span><br><span class="line">        System.out.println(<span class="string">"insert last "</span> + node.value + <span class="string">" data:\t"</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertLast</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        insertLast(createNode(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">createNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node(<span class="keyword">null</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node before = <span class="keyword">null</span>;</span><br><span class="line">        Node current = head;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span> &amp;&amp; current.value != value) &#123;</span><br><span class="line">            before = current;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (before == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            before.next = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"deleteByValue:\t"</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span> &amp;&amp; temp.next != node) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = node.next;</span><br><span class="line">        System.out.println(<span class="string">"deleteByNode:\t"</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"["</span>);</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(temp.value).append(<span class="string">","</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        Node next;</span><br><span class="line"></span><br><span class="line">        Node(Node next, <span class="keyword">int</span> value) &#123;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SinglyLinkedList linkedList = <span class="keyword">new</span> SinglyLinkedList();</span><br><span class="line">        linkedList.insertLast(<span class="number">1</span>);</span><br><span class="line">        linkedList.insertLast(<span class="number">2</span>);</span><br><span class="line">        linkedList.insertLast(<span class="number">3</span>);</span><br><span class="line">        linkedList.insertLast(<span class="number">4</span>);</span><br><span class="line">        linkedList.insertToHead(<span class="number">5</span>);</span><br><span class="line">        linkedList.insertAfter(linkedList.findByValue(<span class="number">3</span>), <span class="number">6</span>);</span><br><span class="line">        linkedList.insertBefore(linkedList.findByValue(<span class="number">1</span>), <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        linkedList.deleteByValue(<span class="number">2</span>);</span><br><span class="line">        linkedList.deleteByNode(linkedList.findByValue(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">insert last <span class="number">1</span> data:[<span class="number">1</span>,]</span><br><span class="line">insert last <span class="number">2</span> data:[<span class="number">1</span>,<span class="number">2</span>,]</span><br><span class="line">insert last <span class="number">3</span> data:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,]</span><br><span class="line">insert last <span class="number">4</span> data:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,]</span><br><span class="line">insert head <span class="number">5</span> data:[<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,]</span><br><span class="line">insertAfter data:[<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,]</span><br><span class="line">insertBefore data:[<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,]</span><br><span class="line">deleteByValue:[<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,]</span><br><span class="line">deleteByNode:[<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,]</span><br></pre></td></tr></table></figure><h3 id="判断是否为回文数"><a href="#判断是否为回文数" class="headerlink" title="判断是否为回文数"></a>判断是否为回文数</h3><p>核心思想：使用两个指针，一个慢指针，每次移动一个节点，一个快指针，每次移动两个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node pre = <span class="keyword">null</span>;</span><br><span class="line">        Node slow = head;</span><br><span class="line">        Node fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 快指针每次跳两个</span></span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="comment">// 临时指针指向下个节点</span></span><br><span class="line">            Node temp = slow.next;</span><br><span class="line">            <span class="comment">// 将 slow 回转</span></span><br><span class="line">            slow.next = pre;</span><br><span class="line">            pre = slow;</span><br><span class="line">            slow = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 这种代表着节点数为偶数，slow 需要往后移动一位</span></span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (slow != <span class="keyword">null</span> &amp;&amp; pre != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (slow.value != pre.value) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insert last <span class="number">1</span> data:[<span class="number">1</span>,]</span><br><span class="line">insert last <span class="number">2</span> data:[<span class="number">1</span>,<span class="number">2</span>,]</span><br><span class="line">insert last <span class="number">2</span> data:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,]</span><br><span class="line">insert last <span class="number">1</span> data:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,]</span><br><span class="line">是否为回文函数:<span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="节点回转"><a href="#节点回转" class="headerlink" title="节点回转"></a>节点回转</h3><p>核心思想：每次遍历时，回转节点的逻辑操作顺序，且看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">reversed</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    Node pre = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 现将下个节点用 temp 保存下来</span></span><br><span class="line">        Node temp = node.next;</span><br><span class="line">        node.next = pre;</span><br><span class="line">        pre = node;</span><br><span class="line">        node = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01234</span></span><br><span class="line"></span><br><span class="line"><span class="number">43210</span></span><br></pre></td></tr></table></figure><h4 id="判断是否是循环节点"><a href="#判断是否是循环节点" class="headerlink" title="判断是否是循环节点"></a>判断是否是循环节点</h4><p>核心思想：循环节点的特点就在于链表的尾部指向头部，只需要是用快慢节点进行遍历，如果不是循环节点，循环一次就结束了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否是循环链表</span></span><br><span class="line"><span class="comment"> * 快慢节点，如果两者相等必然是循环链表，时间复杂度为 O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCircle</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Node slow = node;</span><br><span class="line">    Node fast = node;</span><br><span class="line">    <span class="keyword">while</span> (slow != <span class="keyword">null</span> &amp;&amp; fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">            System.out.println(<span class="string">"循环了 "</span> + count + <span class="string">"次"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"循环了 "</span> + count + <span class="string">"次"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">循环了 <span class="number">5</span>次</span><br><span class="line">is circle:<span class="keyword">true</span></span><br></pre></td></tr></table></figure><h4 id="拼接两个有序节点"><a href="#拼接两个有序节点" class="headerlink" title="拼接两个有序节点"></a>拼接两个有序节点</h4><p>核心思想：首先创建一个空的头节点，然后两个有序链表依次遍历，谁小就把这个空节点指向谁(默认从小到大排序)。其中需要注意的是，如果一个节点提前结束了，那么就需要将新节点直接指向剩下的那个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">mergeNode</span><span class="params">(Node aNode, Node bNode)</span> </span>&#123;</span><br><span class="line">    Node head = <span class="keyword">new</span> Node(<span class="keyword">null</span>, -<span class="number">1</span>);</span><br><span class="line">    Node tail = head;</span><br><span class="line">    <span class="keyword">if</span> (aNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        head = bNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        head = aNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (aNode != <span class="keyword">null</span> &amp;&amp; bNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (aNode.value &gt; bNode.value) &#123;</span><br><span class="line">            tail.next = bNode;</span><br><span class="line">            bNode = bNode.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tail.next = aNode;</span><br><span class="line">            aNode = aNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = tail.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (aNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        tail.next = bNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        tail.next = aNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A 节点:<span class="number">135</span></span><br><span class="line"></span><br><span class="line">B 节点:<span class="number">24689</span></span><br><span class="line"></span><br><span class="line"><span class="number">12345689</span></span><br></pre></td></tr></table></figure><h4 id="删除倒数第-N-个节点"><a href="#删除倒数第-N-个节点" class="headerlink" title="删除倒数第 N 个节点"></a>删除倒数第 N 个节点</h4><p>核心思想：快慢指针，快的比慢 的多 N 个，遍历到最后，慢节点指向倒数第 N 个节点，然后直接进行删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除倒数 N 个节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteLast</span><span class="params">(Node node, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Node head = node;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        count ++;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; count) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == count) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            node.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.value = node.next.value;</span><br><span class="line">            node.next = node.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node slow = node;</span><br><span class="line">    Node fast = node;</span><br><span class="line">    <span class="keyword">int</span> tempCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (slow != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tempCount &lt; n) &#123;</span><br><span class="line">            tempCount ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    slow.next = slow.next.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01234567</span></span><br><span class="line"></span><br><span class="line"><span class="number">0124567</span></span><br></pre></td></tr></table></figure><h4 id="找出中间节点"><a href="#找出中间节点" class="headerlink" title="找出中间节点"></a>找出中间节点</h4><p>核心思想：直接使用快慢指针进行遍历，慢指针每次移动一个，快指针每次移动两个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMiddleNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    Node fast = node;</span><br><span class="line">    Node slow = node;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01234567</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>参考自<a href="https://time.geekbang.org/column/126" target="_blank" rel="noopener">极客时间</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;底层存储结构&quot;&gt;&lt;a href=&quot;#底层存储结构&quot; class=&quot;headerlink&quot; title=&quot;底层存储结构&quot;&gt;&lt;/a&gt;底层存储结构&lt;/h3&gt;&lt;p&gt;与 &lt;strong&gt;数组&lt;/strong&gt; 对比，数组需要一块 &lt;strong&gt;连续的内存空间&lt;/strong&gt; 来存储，对内存要求很高。如果我们申请 50MB 的内存，即便内存的剩余内存大于 50MB，但是如果内存不是连续的，也是很有可能申请失败。&lt;/p&gt;
&lt;p&gt;而 &lt;strong&gt;链表&lt;/strong&gt; 与之相反，它并不需要一块连续的内存，通过 &lt;strong&gt;指针&lt;/strong&gt; 将一组 &lt;strong&gt;零散的内存块&lt;/strong&gt; 串联起来使用。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="//aha.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="//aha.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="平时积累" scheme="//aha.me/tags/%E5%B9%B3%E6%97%B6%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="进阶" scheme="//aha.me/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>『数据结构与算法』—— 数组</title>
    <link href="//aha.me/2018/09/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84/"/>
    <id>//aha.me/2018/09/25/数据结构与算法-数组/</id>
    <published>2018-09-25T07:10:00.000Z</published>
    <updated>2019-02-16T12:14:27.462Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>数组（Array）是一种<strong>线性表</strong>数据结构。它用一组<strong>连续的内存空间</strong>，来存储一组具有<strong>相同类型</strong>的数据。</p><p><strong>线性表</strong></p><p>顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构。</p><a id="more"></a><p><img src="https://static001.geekbang.org/resource/image/b6/77/b6b71ec46935130dff5c4b62cf273477.jpg" alt></p><p><img src="https://static001.geekbang.org/resource/image/6e/69/6ebf42641b5f98f912d36f6bf86f6569.jpg" alt></p><p><strong>连续内存，类型相同</strong></p><p><img src="https://static001.geekbang.org/resource/image/98/c4/98df8e702b14096e7ee4a5141260cdc4.jpg" alt></p><p>我们知道，计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[i]_address = base_address + i * data_type_size</span><br></pre></td></tr></table></figure><h3 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h3><p>优点显而易见，其时间复杂度仅仅为 $O(1)$，但是对于插入或者删除，都需要通过平移数组来完成操作，这就意味着最坏时间复杂度为 $O(n)$，如果容量还需要进行扩容，这是相当耗时的。</p><h3 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h3><ol><li>Java List 无法存储基本类型，都需要封住成 Integer 或者 Long 类，而装箱和拆箱是有很大的性能消耗的。</li><li>如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ol><li>普通数组封装(不支持扩容)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data[];</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    Array(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        n = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= n) &#123;</span><br><span class="line">            System.out.println(<span class="string">"容量达到最大值"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; count) &#123;</span><br><span class="line">            System.out.println(<span class="string">"下标越界"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从屁股开始，往后移动，将 index 位置空出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = count; i &gt; index; i--) &#123;</span><br><span class="line">            data[i] = data[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        data[index] = value;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">"插入成功:\tvalue:\t"</span> + value + <span class="string">":\tindex:\t"</span> + index);</span><br><span class="line">        System.out.println(<span class="string">"data:\t"</span> + toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= count) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"value:\t"</span> + data[index]);</span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= count) &#123;</span><br><span class="line">            System.out.println(<span class="string">"下标越界"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; count - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            data[i] = data[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        data[count - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        count--;</span><br><span class="line">        System.out.println(<span class="string">"删除成功 data:\t"</span> + toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Array array = <span class="keyword">new</span> Array(<span class="number">10</span>);</span><br><span class="line">        array.add(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        array.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        array.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        array.add(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        array.add(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        array.add(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        array.add(<span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">        array.add(<span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">        array.add(<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        array.add(<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">        array.delete(<span class="number">9</span>);</span><br><span class="line">        System.out.println(<span class="string">"get value:\t"</span> + array.get(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">插入成功:value:1:index:0</span><br><span class="line">data:[1, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line">插入成功:value:2:index:1</span><br><span class="line">data:[1, 2, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line">插入成功:value:3:index:2</span><br><span class="line">data:[1, 2, 3, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line">插入成功:value:4:index:3</span><br><span class="line">data:[1, 2, 3, 4, 0, 0, 0, 0, 0, 0]</span><br><span class="line">插入成功:value:5:index:4</span><br><span class="line">data:[1, 2, 3, 4, 5, 0, 0, 0, 0, 0]</span><br><span class="line">插入成功:value:6:index:5</span><br><span class="line">data:[1, 2, 3, 4, 5, 6, 0, 0, 0, 0]</span><br><span class="line">插入成功:value:7:index:6</span><br><span class="line">data:[1, 2, 3, 4, 5, 6, 7, 0, 0, 0]</span><br><span class="line">插入成功:value:8:index:7</span><br><span class="line">data:[1, 2, 3, 4, 5, 6, 7, 8, 0, 0]</span><br><span class="line">插入成功:value:9:index:8</span><br><span class="line">data:[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]</span><br><span class="line">插入成功:value:10:index:9</span><br><span class="line">data:[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class="line">删除成功 data:[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]</span><br><span class="line">value:4</span><br><span class="line">get value:4</span><br></pre></td></tr></table></figure><ol start="2"><li>支持扩容的数组</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericArray</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    T[] data;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    GenericArray(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        data = (T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GenericArray() &#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">checkIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"下标越界"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newSize)</span> </span>&#123;</span><br><span class="line">        T[] newData = (T[]) <span class="keyword">new</span> Object[newSize];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"扩容 capacity:\t"</span> + newSize);</span><br><span class="line">        data = newData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkIndex(index);</span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, T t)</span> </span>&#123;</span><br><span class="line">        checkIndex(index);</span><br><span class="line">        data[index] = t;</span><br><span class="line">        System.out.println(<span class="string">"set value:"</span> + <span class="string">" index: "</span> + index + <span class="string">" value: "</span> + t);</span><br><span class="line">        System.out.println(<span class="string">"data: "</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[i] == t) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[i] == t) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"下标越界"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (size == data.length) &#123;</span><br><span class="line">            resize(<span class="number">2</span> * size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--) &#123;</span><br><span class="line">            data[i] = data[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        data[index] = t;</span><br><span class="line">        size ++;</span><br><span class="line">        System.out.println(<span class="string">"add data: "</span> + <span class="string">" index: "</span> + index + <span class="string">" value: "</span> + t);</span><br><span class="line">        System.out.println(<span class="string">"data: "</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        add(<span class="number">0</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        add(size, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkIndex(index);</span><br><span class="line">        T t = data[index];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            data[i] = data[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        data[size-<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span> (size == data.length / <span class="number">4</span> &amp;&amp; data.length / <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            resize(data.length / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"remove data: "</span> + <span class="string">" index: "</span> + index + <span class="string">" value: "</span> + t);</span><br><span class="line">        System.out.println(<span class="string">"data: "</span> + toString());</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericArray&lt;String&gt; data = <span class="keyword">new</span> GenericArray&lt;String&gt;(<span class="number">6</span>);</span><br><span class="line">        data.addLast(<span class="string">"1"</span>);</span><br><span class="line">        data.addLast(<span class="string">"2"</span>);</span><br><span class="line">        data.addLast(<span class="string">"3"</span>);</span><br><span class="line">        data.addLast(<span class="string">"4"</span>);</span><br><span class="line">        data.addLast(<span class="string">"5"</span>);</span><br><span class="line">        data.addLast(<span class="string">"6"</span>);</span><br><span class="line">        data.addLast(<span class="string">"7"</span>);</span><br><span class="line"></span><br><span class="line">        data.remove(data.getCount()-<span class="number">1</span>);</span><br><span class="line">        data.remove(data.getCount()-<span class="number">1</span>);</span><br><span class="line">        data.remove(data.getCount()-<span class="number">1</span>);</span><br><span class="line">        data.remove(data.getCount()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">add</span> <span class="attr">data:</span>  <span class="attr">index:</span> <span class="number">0</span> <span class="attr">value:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">[1,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">]</span></span><br><span class="line"><span class="string">add</span> <span class="attr">data:</span>  <span class="attr">index:</span> <span class="number">1</span> <span class="attr">value:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">]</span></span><br><span class="line"><span class="string">add</span> <span class="attr">data:</span>  <span class="attr">index:</span> <span class="number">2</span> <span class="attr">value:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">]</span></span><br><span class="line"><span class="string">add</span> <span class="attr">data:</span>  <span class="attr">index:</span> <span class="number">3</span> <span class="attr">value:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="number">4</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">]</span></span><br><span class="line"><span class="string">add</span> <span class="attr">data:</span>  <span class="attr">index:</span> <span class="number">4</span> <span class="attr">value:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="number">4</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="literal">null</span><span class="string">]</span></span><br><span class="line"><span class="string">add</span> <span class="attr">data:</span>  <span class="attr">index:</span> <span class="number">5</span> <span class="attr">value:</span> <span class="number">6</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="number">4</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">6</span><span class="string">]</span></span><br><span class="line"><span class="string">扩容</span> <span class="attr">capacity:</span><span class="number">12</span></span><br><span class="line"><span class="string">add</span> <span class="attr">data:</span>  <span class="attr">index:</span> <span class="number">6</span> <span class="attr">value:</span> <span class="number">7</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="number">4</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">6</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">]</span></span><br><span class="line"><span class="string">remove</span> <span class="attr">data:</span>  <span class="attr">index:</span> <span class="number">6</span> <span class="attr">value:</span> <span class="number">7</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="number">4</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">6</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">]</span></span><br><span class="line"><span class="string">remove</span> <span class="attr">data:</span>  <span class="attr">index:</span> <span class="number">5</span> <span class="attr">value:</span> <span class="number">6</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="number">4</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">]</span></span><br><span class="line"><span class="string">remove</span> <span class="attr">data:</span>  <span class="attr">index:</span> <span class="number">4</span> <span class="attr">value:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="number">4</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">]</span></span><br><span class="line"><span class="string">扩容</span> <span class="attr">capacity:</span><span class="number">6</span></span><br><span class="line"><span class="string">remove</span> <span class="attr">data:</span>  <span class="attr">index:</span> <span class="number">3</span> <span class="attr">value:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>参考自<a href="https://time.geekbang.org/column/126" target="_blank" rel="noopener">极客时间</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;数组（Array）是一种&lt;strong&gt;线性表&lt;/strong&gt;数据结构。它用一组&lt;strong&gt;连续的内存空间&lt;/strong&gt;，来存储一组具有&lt;strong&gt;相同类型&lt;/strong&gt;的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线性表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="//aha.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="//aha.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="平时积累" scheme="//aha.me/tags/%E5%B9%B3%E6%97%B6%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="进阶" scheme="//aha.me/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>『数据结构与算法』—— 复杂度</title>
    <link href="//aha.me/2018/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>//aha.me/2018/09/01/数据结构与算法-复杂度/</id>
    <published>2018-09-01T07:10:00.000Z</published>
    <updated>2019-02-16T12:14:27.459Z</updated>
    
    <content type="html"><![CDATA[<h3 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h3><p>复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半。</p><ol><li><p>测试结果非常依赖测试环境</p></li><li><p>测试结果受数据规模的影响很大</p></li></ol><p>我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法。</p><a id="more"></a><h3 id="大-O-复杂度表示法"><a href="#大-O-复杂度表示法" class="headerlink" title="大 O 复杂度表示法"></a>大 O 复杂度表示法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 2n<em>unit_time 的执行时间，所以这段代码总的执行时间就是 (2n+2)</em>unit_time。可以看出来，所有代码的执行时间 T(n) 与每行代码的执行次数成正比。</p><p>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比。</p><p>$T(n) = O(f(n))$</p><p>这就是大 O 时间复杂度表示法，大 O 时间复杂度实际上并不具体代表代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以也叫做 <strong>渐进时间复杂度</strong>，简称 <strong>时间复杂度</strong>。</p><h3 id="分析时间复杂度"><a href="#分析时间复杂度" class="headerlink" title="分析时间复杂度"></a>分析时间复杂度</h3><ol><li><p>只关注循环执行次数最多的一点代码</p><p>我们在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了。</p></li><li><p>加法法则：总复杂度等于量级最大的那段代码的复杂度</p></li><li><p>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</p></li></ol><h3 id="时间复杂度实例分析"><a href="#时间复杂度实例分析" class="headerlink" title="时间复杂度实例分析"></a>时间复杂度实例分析</h3><p><img src="http://owj4ejy7m.bkt.clouddn.com/2018-11-01-011935.png" alt="image-20181030151057149"></p><h3 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h3><p>时间复杂度的全称是 <strong>渐进时间复杂度</strong>，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度全称就是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。</p><h3 id="复杂度种类"><a href="#复杂度种类" class="headerlink" title="复杂度种类"></a>复杂度种类</h3><ol><li><p>最好情况时间复杂度</p><p>最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。</p></li><li><p>最坏情况时间复杂度</p><p>最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。</p></li><li><p>平均情况时间复杂度</p></li><li><p>均摊时间复杂度</p></li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量，大小为 10 的数组 array，长度 len，下标 i。</span></span><br><span class="line"><span class="keyword">int</span> array[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; </span><br><span class="line"><span class="keyword">int</span> len = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往数组中添加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (i &gt;= len) &#123; <span class="comment">// 数组空间不够了</span></span><br><span class="line">     <span class="comment">// 重新申请一个 2 倍大小的数组空间</span></span><br><span class="line">     <span class="keyword">int</span> new_array[] = <span class="keyword">new</span> <span class="keyword">int</span>[len*<span class="number">2</span>];</span><br><span class="line">     <span class="comment">// 把原来 array 数组中的数据依次 copy 到 new_array</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; ++j) &#123;</span><br><span class="line">       new_array[j] = array[j];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// new_array 复制给 array，array 现在大小就是 2 倍 len 了</span></span><br><span class="line">     array = new_array;</span><br><span class="line">     len = <span class="number">2</span> * len;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 将 element 放到下标为 i 的位置，下标 i 加一</span></span><br><span class="line">   array[i] = element;</span><br><span class="line">   ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好 $O(1)$，最坏 $O(n)$，平均 $O(n)$，均摊 $O(1)$</p><p>参考自<a href="https://time.geekbang.org/column/126" target="_blank" rel="noopener">极客时间</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;重要性&quot;&gt;&lt;a href=&quot;#重要性&quot; class=&quot;headerlink&quot; title=&quot;重要性&quot;&gt;&lt;/a&gt;重要性&lt;/h3&gt;&lt;p&gt;复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;测试结果非常依赖测试环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试结果受数据规模的影响很大&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="//aha.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="//aha.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="平时积累" scheme="//aha.me/tags/%E5%B9%B3%E6%97%B6%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="进阶" scheme="//aha.me/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>反击爬虫，前端工程师的脑洞可以有多大？</title>
    <link href="//aha.me/2017/07/09/prevent-spiders/"/>
    <id>//aha.me/2017/07/09/prevent-spiders/</id>
    <published>2017-07-09T02:36:00.000Z</published>
    <updated>2019-02-16T12:14:27.456Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7tszky.com1.z0.glb.clouddn.com/FmIvXiOiFFET4oPGkVU6rdDCl87S" width="400"></p><p><em>—— 同时发表于<a href="http://imweb.io/topic/595b7161d6ca6b4f0ac71f05" target="_blank" rel="noopener">imweb.io</a></em></p><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>对于一张网页，我们往往希望它是结构良好，内容清晰的，这样搜索引擎才能准确地认知它。<br>而反过来，又有一些情景，我们不希望内容能被轻易获取，比方说电商网站的交易额，教育网站的题目等。因为这些内容，往往是一个产品的生命线，必须做到有效地保护。这就是<strong>爬虫与反爬虫</strong>这一话题的由来。</p><a id="more"></a><h3 id="2-常见反爬虫策略"><a href="#2-常见反爬虫策略" class="headerlink" title="2. 常见反爬虫策略"></a>2. 常见反爬虫策略</h3><p>但是世界上没有一个网站，能做到完美地反爬虫。</p><p>如果页面希望能在用户面前正常展示，同时又不给爬虫机会，就必须要做到识别真人与机器人。因此工程师们做了各种尝试，这些策略大多采用于<strong>后端</strong>，也是目前比较常规单有效的手段，比如：</p><ul><li>User-Agent + Referer检测</li><li>账号及Cookie验证</li><li>验证码</li><li>IP限制频次</li></ul><p>而爬虫是可以无限逼近于真人的，比如：</p><ul><li>chrome headless或phantomjs来模拟浏览器环境</li><li><a href="http://udn.yyuap.com/doc/ae/920457.html" target="_blank" rel="noopener">tesseract</a>识别验证码</li><li>代理IP淘宝就能买到</li></ul><p>所以我们说，100%的反爬虫策略？不存在的。<br>更多的是体力活，是个难易程度的问题。</p><p>不过作为前端工程师，我们可以增加一下游戏难度，设计出一些<strong>很(sang)有(xin)意(bing)思(kuang)</strong>的反爬虫策略。</p><h3 id="3-前端与反爬虫"><a href="#3-前端与反爬虫" class="headerlink" title="3. 前端与反爬虫"></a>3. 前端与反爬虫</h3><h4 id="3-1-font-face拼凑式"><a href="#3-1-font-face拼凑式" class="headerlink" title="3.1 font-face拼凑式"></a>3.1 font-face拼凑式</h4><p><strong>例子：<a href="http://maoyan.com/films/342601" target="_blank" rel="noopener">猫眼电影</a></strong></p><p>猫眼电影里，对于票房数据，展示的并不是纯粹的数字。<br>页面使用了font-face定义了字符集，并通过unicode去映射展示。也就是说，除去图像识别，必须同时爬取字符集，才能识别出数字。</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/Fr4tKHT39qEwCjjK7QlhWpHWNkvs" alt></p><p>并且，每次刷新页面，字符集的url都是有变化的，无疑更大难度地增加了爬取成本。</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FnBGGXcZgJ_PN9CbX5gVz_f5Y579" alt></p><h4 id="3-2-background拼凑式"><a href="#3-2-background拼凑式" class="headerlink" title="3.2 background拼凑式"></a>3.2 background拼凑式</h4><p><strong>例子：<a href="http://www.meituan.com/dianying/342601?#content" target="_blank" rel="noopener">美团</a></strong></p><p>与font的策略类似，美团里用到的是background拼凑。数字其实是图片，根据不同的background偏移，显示出不同的字符。</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FvAROr33mC0rpTFO46Xtl3j-8HrW" alt></p><p>并且不同页面，图片的字符排序也是有区别的。不过理论上只需生成0-9与小数点，为何有重复字符就不是很懂。</p><p>页面A：<br><img src="http://7tszky.com1.z0.glb.clouddn.com/Fp_3RGHisGjjKoofp-W7oOx731ry" alt><br>页面B：<br><img src="http://7tszky.com1.z0.glb.clouddn.com/FiuQ2nSHzD6VoM2L_LDloXUo9ndL" alt></p><h4 id="3-3-字符穿插式"><a href="#3-3-字符穿插式" class="headerlink" title="3.3 字符穿插式"></a>3.3 字符穿插式</h4><p><strong>例子：<a href="https://mp.weixin.qq.com/s?__biz=MzI0MDYwNjk2OA==&amp;mid=2247484365&amp;idx=4&amp;sn=291a93e8a4ce6e90d3b6ef8b98fe09c4&amp;chksm=e919085ade6e814cc037ecf6a873f22da0e492911a4e539e6f8fdeff022806b4d248c4d54194&amp;scene=4" target="_blank" rel="noopener">微信公众号文章</a></strong></p><p>某些微信公众号的文章里，穿插了各种迷之字符，并且通过样式把这些字符隐藏掉。<br>这种方式虽然令人震惊…但其实没有太大的识别与过滤难度，甚至可以做得更好，不过也算是一种脑洞吧。<br><img src="http://7tszky.com1.z0.glb.clouddn.com/FoFF_VXDYzM0DyLDjAbOz8ATzH59" alt></p><p>对了，我的手机流量可以找谁报销吗？</p><h4 id="3-4-伪元素隐藏式"><a href="#3-4-伪元素隐藏式" class="headerlink" title="3.4 伪元素隐藏式"></a>3.4 伪元素隐藏式</h4><p><strong>例子：<a href="http://car.autohome.com.cn/config/series/3170.html" target="_blank" rel="noopener">汽车之家</a></strong></p><p>汽车之家里，把关键的厂商信息，做到了伪元素的content里。<br>这也是一种思路：爬取网页，必须得解析css，需要拿到伪元素的content，这就提升了爬虫的难度。</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FslsPbUtQhM2uE_bK-LZw7NHynl5" alt></p><h4 id="3-5-元素定位覆盖式"><a href="#3-5-元素定位覆盖式" class="headerlink" title="3.5 元素定位覆盖式"></a>3.5 元素定位覆盖式</h4><p><strong>例子：<a href="https://flight.qunar.com/site/oneway_list.htm?searchDepartureAirport=%E5%B9%BF%E5%B7%9E&amp;searchArrivalAirport=%E5%8C%97%E4%BA%AC&amp;searchDepartureTime=2017-07-06&amp;searchArrivalTime=2017-07-09&amp;nextNDays=0&amp;startSearch=true&amp;fromCode=CAN&amp;toCode=BJS&amp;from=qunarindex&amp;lowestPrice=null" target="_blank" rel="noopener">去哪儿</a></strong></p><p>还有热爱数学的去哪儿，对于一个4位数字的机票价格，先用四个<code>i</code>标签渲染，再用两个<code>b</code>标签去绝对定位偏移量，覆盖故意展示错误的<code>i</code>标签，最后在视觉上形成正确的价格…</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FtZdGFs-53tAYT10GS_ukosJL8CF" alt></p><p>这说明爬虫会解析css还不行，还得会做数学题。</p><h4 id="3-6-iframe异步加载式"><a href="#3-6-iframe异步加载式" class="headerlink" title="3.6 iframe异步加载式"></a>3.6 iframe异步加载式</h4><p><strong>例子：<a href="http://music.163.com/#/song?id=424477863" target="_blank" rel="noopener">网易云音乐</a></strong></p><p>网易云音乐页面一打开，html源码里几乎只有一个<code>iframe</code>，并且它的src是空白的：<code>about:blank</code>。接着js开始运行，把整个页面的框架异步塞到了iframe里面…</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FjHp4gqXWu1YeYWVJ1vkMAgRzO-g" alt></p><p>不过这个方式带来的难度并不大，只是在异步与iframe处理上绕了个弯（或者有其他原因，不完全是基于反爬虫考虑），无论你是用selenium还是phantom，都有API可以拿到iframe里面的content信息。</p><h4 id="3-7-字符分割式"><a href="#3-7-字符分割式" class="headerlink" title="3.7 字符分割式"></a>3.7 字符分割式</h4><p><strong>例子：<a href="http://www.goubanjia.com/" target="_blank" rel="noopener">全网代理IP</a></strong></p><p>在一些展示代理IP信息的页面，对于IP的保护也是大费周折。</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FiY93YeoTulfbXWBxfX3nrksVQVV" alt></p><p>他们会先把IP的数字与符号分割成dom节点，再在中间插入迷惑人的数字，如果爬虫不知道这个策略，还会以为自己成功拿到了数值；不过如果爬虫注意到，就很好解决了。</p><h4 id="3-8-字符集替换式"><a href="#3-8-字符集替换式" class="headerlink" title="3.8 字符集替换式"></a>3.8 字符集替换式</h4><p><strong>例子：<a href="https://m.flight.qunar.com/ncs/page/flightlist?depCity=%E5%8C%97%E4%BA%AC&amp;arrCity=%E4%B8%8A%E6%B5%B7&amp;goDate=2017-07-05&amp;backDate=&amp;sort=&amp;airLine=&amp;from=" target="_blank" rel="noopener">去哪儿移动侧</a></strong></p><p>同样会欺骗爬虫的还有去哪儿的移动版。</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/Ft3i0NfbT8udcJ-OMIQQvdeU-LTb" alt></p><p>html里明明写的3211，视觉上展示的却是1233。原来他们重新定义了字符集，3与1的顺序刚好调换得来的结果…</p><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FoMbTu14ollkxEO0tSv7F55ZVxMq" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7tszky.com1.z0.glb.clouddn.com/FmIvXiOiFFET4oPGkVU6rdDCl87S&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;—— 同时发表于&lt;a href=&quot;http://imweb.io/topic/595b7161d6ca6b4f0ac71f05&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;imweb.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h3&gt;&lt;p&gt;对于一张网页，我们往往希望它是结构良好，内容清晰的，这样搜索引擎才能准确地认知它。&lt;br&gt;而反过来，又有一些情景，我们不希望内容能被轻易获取，比方说电商网站的交易额，教育网站的题目等。因为这些内容，往往是一个产品的生命线，必须做到有效地保护。这就是&lt;strong&gt;爬虫与反爬虫&lt;/strong&gt;这一话题的由来。&lt;/p&gt;
    
    </summary>
    
      <category term="cate" scheme="//aha.me/categories/cate/"/>
    
    
      <category term="前端" scheme="//aha.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="安全" scheme="//aha.me/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
